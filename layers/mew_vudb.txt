
00000	N	Unknown	vkGetInstanceProcAddr	'If instance is not NULL, instance must be a valid VkInstance handle'
00001	N	Unknown	vkGetInstanceProcAddr	'pName must be a null-terminated string'
00002	N	Unknown	vkGetDeviceProcAddr	'device must be a valid VkDevice handle'
00003	N	Unknown	vkGetDeviceProcAddr	'pName must be a null-terminated string'
00004	N	Unknown	vkCreateInstance	'pCreateInfo must be a pointer to a valid VkInstanceCreateInfo structure'
00005	N	Unknown	vkCreateInstance	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00006	N	Unknown	vkCreateInstance	'pInstance must be a pointer to a VkInstance handle'
00007	N	Unknown	vkCreateInstance	'sType must be VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO'
00008	N	Unknown	vkCreateInstance	'pNext must be NULL'
00009	N	Unknown	vkCreateInstance	'flags must be 0'
00010	U	Unknown	vkCreateInstance	'If pApplicationInfo is not NULL, pApplicationInfo must be a pointer to a valid VkApplicationInfo structure'
00011	U	Unknown	vkCreateInstance	'If enabledLayerCount is not 0, ppEnabledLayerNames must be a pointer to an array of enabledLayerCount null-terminated strings'
00012	U	Unknown	vkCreateInstance	'If enabledExtensionCount is not 0, ppEnabledExtensionNames must be a pointer to an array of enabledExtensionCount null-terminated strings'
00013	U	Unknown	vkCreateInstance	'apiVersion must be zero, or otherwise it must be a version that the implementation supports, or supports an effective substitute for'
00014	N	Unknown	vkCreateInstance	'sType must be VK_STRUCTURE_TYPE_APPLICATION_INFO'
00015	N	Unknown	vkCreateInstance	'pNext must be NULL'
00016	U	Unknown	vkCreateInstance	'If pApplicationName is not NULL, pApplicationName must be a null-terminated string'
00017	U	Unknown	vkCreateInstance	'If pEngineName is not NULL, pEngineName must be a null-terminated string'
00018	Y	Unknown	vkDestroyInstance	'All child objects created using instance must have been destroyed prior to destroying instance'
00019	Y	Unknown	vkDestroyInstance	'If VkAllocationCallbacks were provided when instance was created, a compatible set of callbacks must be provided here'
00020	Y	Unknown	vkDestroyInstance	'If no VkAllocationCallbacks were provided when instance was created, pAllocator must be NULL'
00021	Y	None	vkDestroyInstance	'If instance is not NULL, instance must be a valid VkInstance handle'
00022	U	Unknown	vkDestroyInstance	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00023	Y	None	vkEnumeratePhysicalDevices	'instance must be a valid VkInstance handle'
00024	U	Unknown	vkEnumeratePhysicalDevices	'pPhysicalDeviceCount must be a pointer to a uint32_t value'
00025	U	Unknown	vkEnumeratePhysicalDevices	'If the value referenced by pPhysicalDeviceCount is not 0, and pPhysicalDevices is not NULL, pPhysicalDevices must be a pointer to an array of pPhysicalDeviceCount VkPhysicalDevice handles'
00026	Y	None	vkGetPhysicalDeviceProperties	'physicalDevice must be a valid VkPhysicalDevice handle'
00027	U	Unknown	vkGetPhysicalDeviceProperties	'pProperties must be a pointer to a VkPhysicalDeviceProperties structure'
00028	Y	Unknown	vkGetPhysicalDeviceQueueFamilyProperties	'physicalDevice must be a valid VkPhysicalDevice handle'
00029	U	Unknown	vkGetPhysicalDeviceQueueFamilyProperties	'pQueueFamilyPropertyCount must be a pointer to a uint32_t value'
00030	U	Unknown	vkGetPhysicalDeviceQueueFamilyProperties	'If the value referenced by pQueueFamilyPropertyCount is not 0, and pQueueFamilyProperties is not NULL, pQueueFamilyProperties must be a pointer to an array of pQueueFamilyPropertyCount VkQueueFamilyProperties structures'
00031	U	Unknown	vkCreateDevice	'physicalDevice must be a valid VkPhysicalDevice handle'
00032	U	Unknown	vkCreateDevice	'pCreateInfo must be a pointer to a valid VkDeviceCreateInfo structure'
00033	U	Unknown	vkCreateDevice	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00034	U	Unknown	vkCreateDevice	'pDevice must be a pointer to a VkDevice handle'
00035	U	Unknown	vkCreateDevice	'The queueFamilyIndex member of any given element of pQueueCreateInfos must be unique within pQueueCreateInfos'
00036	N	Unknown	vkCreateDevice	'sType must be VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO'
00037	N	Unknown	vkCreateDevice	'pNext must be NULL'
00038	N	Unknown	vkCreateDevice	'flags must be 0'
00039	U	Unknown	vkCreateDevice	'pQueueCreateInfos must be a pointer to an array of queueCreateInfoCount valid VkDeviceQueueCreateInfo structures'
00040	U	Unknown	vkCreateDevice	'If enabledLayerCount is not 0, ppEnabledLayerNames must be a pointer to an array of enabledLayerCount null-terminated strings'
00041	U	Unknown	vkCreateDevice	'If enabledExtensionCount is not 0, ppEnabledExtensionNames must be a pointer to an array of enabledExtensionCount null-terminated strings'
00042	U	Unknown	vkCreateDevice	'If pEnabledFeatures is not NULL, pEnabledFeatures must be a pointer to a valid VkPhysicalDeviceFeatures structure'
00043	U	Unknown	vkCreateDevice	'queueCreateInfoCount must be greater than 0'
00049	Y	Unknown	vkDestroyDevice	'All child objects created on device must have been destroyed prior to destroying device'
00050	Y	Unknown	vkDestroyDevice	'If VkAllocationCallbacks were provided when device was created, a compatible set of callbacks must be provided here'
00051	Y	Unknown	vkDestroyDevice	'If no VkAllocationCallbacks were provided when device was created, pAllocator must be NULL'
00052	Y	None	vkDestroyDevice	'If device is not NULL, device must be a valid VkDevice handle'
00053	U	Unknown	vkDestroyDevice	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00054	U	Unknown	vkDestroyDevice	'queueFamilyIndex must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties'
00055	N	Unknown	vkDestroyDevice	'sType must be VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO'
00056	N	Unknown	vkDestroyDevice	'pNext must be NULL'
00057	N	Unknown	vkDestroyDevice	'flags must be 0'
00058	U	Unknown	vkDestroyDevice	'pQueuePriorities must be a pointer to an array of queueCount float values'
00059	U	Unknown	vkDestroyDevice	'queueCount must be greater than 0'
00060	U	Unknown	vkGetDeviceQueue	'queueFamilyIndex must be one of the queue family indices specified when device was created, via the VkDeviceQueueCreateInfo structure'
00061	U	Unknown	vkGetDeviceQueue	'queueIndex must be less than the number of queues created for the specified queue family index when device was created, via the queueCount member of the VkDeviceQueueCreateInfo structure'
00062	Y	None	vkGetDeviceQueue	'device must be a valid VkDevice handle'
00063	U	Unknown	vkGetDeviceQueue	'pQueue must be a pointer to a VkQueue handle'
00064	Y	None	vkCreateCommandPool	'device must be a valid VkDevice handle'
00065	U	Unknown	vkCreateCommandPool	'pCreateInfo must be a pointer to a valid VkCommandPoolCreateInfo structure'
00066	U	Unknown	vkCreateCommandPool	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00067	U	Unknown	vkCreateCommandPool	'pCommandPool must be a pointer to a VkCommandPool handle'
00068	U	Unknown	vkCreateCommandPool	'queueFamilyIndex must be the index of a queue family available in the calling commands device parameter'
00069	N	Unknown	vkCreateCommandPool	'sType must be VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO'
00070	N	Unknown	vkCreateCommandPool	'pNext must be NULL'
00071	N	Unknown	vkCreateCommandPool	'flags must be a valid combination of VkCommandPoolCreateFlagBits values'
00072	Y	None	vkResetCommandPool	'All VkCommandBuffer objects allocated from commandPool must not currently be pending execution'
00073	Y	None	vkResetCommandPool	'device must be a valid VkDevice handle'
00074	Y	None	vkResetCommandPool	'commandPool must be a valid VkCommandPool handle'
00075	N	Unknown	vkResetCommandPool	'flags must be a valid combination of VkCommandPoolResetFlagBits values'
00076	U	Unknown	vkResetCommandPool	'commandPool must have been created, allocated, or retrieved from device'
00077	Y	None	vkDestroyCommandPool	'All VkCommandBuffer objects allocated from commandPool must not be pending execution'
00078	Y	Unknown	vkDestroyCommandPool	'If VkAllocationCallbacks were provided when commandPool was created, a compatible set of callbacks must be provided here'
00079	Y	Unknown	vkDestroyCommandPool	'If no VkAllocationCallbacks were provided when commandPool was created, pAllocator must be NULL'
00080	Y	None	vkDestroyCommandPool	'device must be a valid VkDevice handle'
00081	Y	None	vkDestroyCommandPool	'If commandPool is not VK_NULL_HANDLE, commandPool must be a valid VkCommandPool handle'
00082	U	Unknown	vkDestroyCommandPool	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00083	U	Unknown	vkDestroyCommandPool	'If commandPool is a valid handle, it must have been created, allocated, or retrieved from device'
00084	Y	None	vkAllocateCommandBuffers	'device must be a valid VkDevice handle'
00085	U	Unknown	vkAllocateCommandBuffers	'pAllocateInfo must be a pointer to a valid VkCommandBufferAllocateInfo structure'
00086	U	Unknown	vkAllocateCommandBuffers	'pCommandBuffers must be a pointer to an array of pAllocateInfo::commandBufferCount VkCommandBuffer handles'
00087	U	Unknown	vkAllocateCommandBuffers	'commandBufferCount must be greater than 0'
00088	N	Unknown	vkAllocateCommandBuffers	'sType must be VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO'
00089	N	Unknown	vkAllocateCommandBuffers	'pNext must be NULL'
00090	Y	None	vkAllocateCommandBuffers	'commandPool must be a valid VkCommandPool handle'
00091	U	Unknown	vkAllocateCommandBuffers	'level must be a valid VkCommandBufferLevel value'
00092	Y	CommandBufferResetErrors	vkResetCommandBuffer	'commandBuffer must not currently be pending execution'
00093	U	Unknown	vkResetCommandBuffer	'commandBuffer must have been allocated from a pool that was created with the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT'
00094	U	Unknown	vkResetCommandBuffer	'commandBuffer must be a valid VkCommandBuffer handle'
00095	N	Unknown	vkResetCommandBuffer	'flags must be a valid combination of VkCommandBufferResetFlagBits values'
00096	Y	None	vkFreeCommandBuffers	'All elements of pCommandBuffers must not be pending execution'
00097	Y	Unknown	vkFreeCommandBuffers	'pCommandBuffers must be a pointer to an array of commandBufferCount VkCommandBuffer handles, each element of which must either be a valid handle or NULL'
00098	Y	None	vkFreeCommandBuffers	'device must be a valid VkDevice handle'
00099	Y	None	vkFreeCommandBuffers	'commandPool must be a valid VkCommandPool handle'
00100	U	Unknown	vkFreeCommandBuffers	'commandBufferCount must be greater than 0'
00101	U	Unknown	vkFreeCommandBuffers	'commandPool must have been created, allocated, or retrieved from device'
00102	Y	Unknown	vkFreeCommandBuffers	'Each element of pCommandBuffers that is a valid handle must have been created, allocated, or retrieved from commandPool'
00103	U	Unknown	vkBeginCommandBuffer	'commandBuffer must not be in the recording state'
00104	U	Unknown	vkBeginCommandBuffer	'commandBuffer must not currently be pending execution'
00105	U	Unknown	vkBeginCommandBuffer	'If commandBuffer was allocated from a VkCommandPool which did not have the VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT flag set, commandBuffer must be in the initial state'
00106	U	Unknown	vkBeginCommandBuffer	'If commandBuffer is a secondary command buffer, the pInheritanceInfo member of pBeginInfo must be a valid VkCommandBufferInheritanceInfo structure'
00107	U	Unknown	vkBeginCommandBuffer	'If commandBuffer is a secondary command buffer and either the occlusionQueryEnable member of the pInheritanceInfo member of pBeginInfo is VK_FALSE, or the precise occlusion queries feature is not enabled, the queryFlags member of the pInheritanceInfo member pBeginInfo must not contain VK_QUERY_CONTROL_PRECISE_BIT'
00108	Y	None	vkBeginCommandBuffer	'commandBuffer must be a valid VkCommandBuffer handle'
00109	U	Unknown	vkBeginCommandBuffer	'pBeginInfo must be a pointer to a valid VkCommandBufferBeginInfo structure'
00110	Y	SecondaryCommandBufferNullRenderpass	vkBeginCommandBuffer	'If flags contains VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT, the renderPass member of pInheritanceInfo must be a valid VkRenderPass'
00111	U	Unknown	vkBeginCommandBuffer	'If flags contains VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT, the subpass member of pInheritanceInfo must be a valid subpass index within the renderPass member of pInheritanceInfo'
00112	Y	None	vkBeginCommandBuffer	'If flags contains VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT, the framebuffer member of pInheritanceInfo must be either VK_NULL_HANDLE, or a valid VkFramebuffer that is compatible with the renderPass member of pInheritanceInfo'
00113	N	Unknown	vkBeginCommandBuffer	'sType must be VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO'
00114	N	Unknown	vkBeginCommandBuffer	'pNext must be NULL'
00115	N	Unknown	vkBeginCommandBuffer	'flags must be a valid combination of VkCommandBufferUsageFlagBits values'
00116	U	Unknown	vkBeginCommandBuffer	'If the inherited queries feature is not enabled, occlusionQueryEnable must be VK_FALSE'
00117	U	Unknown	vkBeginCommandBuffer	'If the inherited queries feature is enabled, queryFlags must be a valid combination of VkQueryControlFlagBits values'
00118	U	Unknown	vkBeginCommandBuffer	'If the pipeline statistics queries feature is not enabled, pipelineStatistics must be 0'
00119	N	Unknown	vkBeginCommandBuffer	'sType must be VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO'
00120	N	Unknown	vkBeginCommandBuffer	'pNext must be NULL'
00121	U	Unknown	vkBeginCommandBuffer	'Both of framebuffer, and renderPass that are valid handles must have been created, allocated, or retrieved from the same VkDevice'
00122	U	Unknown	vkEndCommandBuffer	'commandBuffer must be in the recording state'
00123	U	Unknown	vkEndCommandBuffer	'If commandBuffer is a primary command buffer, there must not be an active render pass instance'
00124	U	Unknown	vkEndCommandBuffer	'All queries made active during the recording of commandBuffer must have been made inactive'
00125	Y	None	vkEndCommandBuffer	'commandBuffer must be a valid VkCommandBuffer handle'
00126	U	Unknown	vkQueueSubmit	'If fence is not VK_NULL_HANDLE, fence must be unsignaled'
00127	U	Unknown	vkQueueSubmit	'If fence is not VK_NULL_HANDLE, fence must not be associated with any other queue command that has not yet completed execution on that queue'
00128	Y	None	vkQueueSubmit	'queue must be a valid VkQueue handle'
00129	U	Unknown	vkQueueSubmit	'If submitCount is not 0, pSubmits must be a pointer to an array of submitCount valid VkSubmitInfo structures'
00130	Y	None	vkQueueSubmit	'If fence is not VK_NULL_HANDLE, fence must be a valid VkFence handle'
00131	U	Unknown	vkQueueSubmit	'Both of fence, and queue that are valid handles must have been created, allocated, or retrieved from the same VkDevice'
00132	U	Unknown	vkQueueSubmit	'Any given element of pSignalSemaphores must currently be unsignaled'
00133	U	Unknown	vkQueueSubmit	'Any given element of pCommandBuffers must either have been recorded with the VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT, or not currently be executing on the device'
00134	U	Unknown	vkQueueSubmit	'Any given element of pCommandBuffers must be in the executable state'
00135	U	Unknown	vkQueueSubmit	'If any given element of pCommandBuffers contains commands that execute secondary command buffers, those secondary command buffers must have been recorded with the VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT, or not currently be executing on the device'
00136	U	Unknown	vkQueueSubmit	'If any given element of pCommandBuffers was recorded with VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT, it must not have been previously submitted without re-recording that command buffer'
00137	U	Unknown	vkQueueSubmit	'If any given element of pCommandBuffers contains commands that execute secondary command buffers recorded with VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT, each such secondary command buffer must not have been previously submitted without re-recording that command buffer'
00138	U	Unknown	vkQueueSubmit	'Any given element of pCommandBuffers must not contain commands that execute a secondary command buffer, if that secondary command buffer has been recorded in another primary command buffer after it was recorded into this VkCommandBuffer'
00139	U	Unknown	vkQueueSubmit	'Any given element of pCommandBuffers must have been allocated from a VkCommandPool that was created for the same queue family that the calling commands queue belongs to'
00140	U	Unknown	vkQueueSubmit	'Any given element of pCommandBuffers must not have been allocated with VK_COMMAND_BUFFER_LEVEL_SECONDARY'
00141	U	Unknown	vkQueueSubmit	'Any given element of VkSemaphore in pWaitSemaphores must refer to a prior signal of that VkSemaphore that will not be consumed by any other wait on that semaphore'
00142	U	Unknown	vkQueueSubmit	'If the geometry shaders feature is not enabled, any given element of pWaitDstStageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT'
00143	U	Unknown	vkQueueSubmit	'If the tessellation shaders feature is not enabled, any given element of pWaitDstStageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT'
00144	N	Unknown	vkQueueSubmit	'sType must be VK_STRUCTURE_TYPE_SUBMIT_INFO'
00145	N	Unknown	vkQueueSubmit	'pNext must be NULL'
00146	Y	None	vkQueueSubmit	'If waitSemaphoreCount is not 0, pWaitSemaphores must be a pointer to an array of waitSemaphoreCount valid VkSemaphore handles'
00147	U	Unknown	vkQueueSubmit	'If waitSemaphoreCount is not 0, pWaitDstStageMask must be a pointer to an array of waitSemaphoreCount valid combinations of VkPipelineStageFlagBits values'
00148	U	Unknown	vkQueueSubmit	'Each element of pWaitDstStageMask must not be 0'
00149	Y	None	vkQueueSubmit	'If commandBufferCount is not 0, pCommandBuffers must be a pointer to an array of commandBufferCount valid VkCommandBuffer handles'
00150	Y	None	vkQueueSubmit	'If signalSemaphoreCount is not 0, pSignalSemaphores must be a pointer to an array of signalSemaphoreCount valid VkSemaphore handles'
00151	U	Unknown	vkQueueSubmit	'Each of the elements of pCommandBuffers, the elements of pSignalSemaphores, and the elements of pWaitSemaphores that are valid handles must have been created, allocated, or retrieved from the same VkDevice'
00152	U	Unknown	vkCmdExecuteCommands	'commandBuffer must have been allocated with a level of VK_COMMAND_BUFFER_LEVEL_PRIMARY'
00153	Y	Unknown	vkCmdExecuteCommands	'Any given element of pCommandBuffers must have been allocated with a level of VK_COMMAND_BUFFER_LEVEL_SECONDARY'
00154	Y	Unknown	vkCmdExecuteCommands	'Any given element of pCommandBuffers must not be already pending execution in commandBuffer, or appear twice in pCommandBuffers, unless it was recorded with the VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT flag'
00155	U	Unknown	vkCmdExecuteCommands	'Any given element of pCommandBuffers must not be already pending execution in any other VkCommandBuffer, unless it was recorded with the VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT flag'
00156	U	Unknown	vkCmdExecuteCommands	'Any given element of pCommandBuffers must be in the executable state'
00157	U	Unknown	vkCmdExecuteCommands	'Any given element of pCommandBuffers must have been allocated from a VkCommandPool that was created for the same queue family as the VkCommandPool from which commandBuffer was allocated'
00158	U	Unknown	vkCmdExecuteCommands	'If vkCmdExecuteCommands is being called within a render pass instance, that render pass instance must have been begun with the contents parameter of vkCmdBeginRenderPass set to VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS'
00159	Y	None	vkCmdExecuteCommands	'commandBuffer must be a valid VkCommandBuffer handle'
00160	Y	None	vkCmdExecuteCommands	'pCommandBuffers must be a pointer to an array of commandBufferCount valid VkCommandBuffer handles'
00161	U	Unknown	vkCmdExecuteCommands	'commandBuffer must be in the recording state'
00162	U	Unknown	vkCmdExecuteCommands	'The VkCommandPool that commandBuffer was allocated from must support transfer, graphics, or compute operations'
00163	U	Unknown	vkCmdExecuteCommands	'commandBuffer must be a primary VkCommandBuffer'
00164	U	Unknown	vkCmdExecuteCommands	'commandBufferCount must be greater than 0'
00165	U	Unknown	vkCmdExecuteCommands	'Both of commandBuffer, and the elements of pCommandBuffers must have been created, allocated, or retrieved from the same VkDevice'
00166	Y	None	vkCreateFence	'device must be a valid VkDevice handle'
00167	U	Unknown	vkCreateFence	'pCreateInfo must be a pointer to a valid VkFenceCreateInfo structure'
00168	U	Unknown	vkCreateFence	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00169	U	Unknown	vkCreateFence	'pFence must be a pointer to a VkFence handle'
00170	N	Unknown	vkCreateFence	'sType must be VK_STRUCTURE_TYPE_FENCE_CREATE_INFO'
00171	N	Unknown	vkCreateFence	'pNext must be NULL'
00172	N	Unknown	vkCreateFence	'flags must be a valid combination of VkFenceCreateFlagBits values'
00173	U	Unknown	vkDestroyFence	'All queue submission commands that refer to fence must have completed execution'
00174	Y	Unknown	vkDestroyFence	'If VkAllocationCallbacks were provided when fence was created, a compatible set of callbacks must be provided here'
00175	Y	Unknown	vkDestroyFence	'If no VkAllocationCallbacks were provided when fence was created, pAllocator must be NULL'
00176	Y	None	vkDestroyFence	'device must be a valid VkDevice handle'
00177	Y	None	vkDestroyFence	'If fence is not VK_NULL_HANDLE, fence must be a valid VkFence handle'
00178	U	Unknown	vkDestroyFence	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00179	U	Unknown	vkDestroyFence	'If fence is a valid handle, it must have been created, allocated, or retrieved from device'
00180	Y	None	vkGetFenceStatus	'device must be a valid VkDevice handle'
00181	Y	None	vkGetFenceStatus	'fence must be a valid VkFence handle'
00182	U	Unknown	vkGetFenceStatus	'fence must have been created, allocated, or retrieved from device'
00183	U	Unknown	vkResetFences	'Any given element of pFences must not currently be associated with any queue command that has not yet completed execution on that queue'
00184	Y	None	vkResetFences	'device must be a valid VkDevice handle'
00185	U	Unknown	vkResetFences	'pFences must be a pointer to an array of fenceCount valid VkFence handles'
00186	U	Unknown	vkResetFences	'fenceCount must be greater than 0'
00187	Y	None	vkResetFences	'Each element of pFences must have been created, allocated, or retrieved from device'
00188	Y	None	vkWaitForFences	'device must be a valid VkDevice handle'
00189	U	Unknown	vkWaitForFences	'pFences must be a pointer to an array of fenceCount valid VkFence handles'
00190	U	Unknown	vkWaitForFences	'fenceCount must be greater than 0'
00191	Y	None	vkWaitForFences	'Each element of pFences must have been created, allocated, or retrieved from device'
00192	Y	None	vkCreateSemaphore	'device must be a valid VkDevice handle'
00193	U	Unknown	vkCreateSemaphore	'pCreateInfo must be a pointer to a valid VkSemaphoreCreateInfo structure'
00194	U	Unknown	vkCreateSemaphore	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00195	U	Unknown	vkCreateSemaphore	'pSemaphore must be a pointer to a VkSemaphore handle'
00196	N	Unknown	vkCreateSemaphore	'sType must be VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO'
00197	N	Unknown	vkCreateSemaphore	'pNext must be NULL'
00198	N	Unknown	vkCreateSemaphore	'flags must be 0'
00199	Y	InUseDestroyedSignaled	vkDestroySemaphore	'All submitted batches that refer to semaphore must have completed execution'
00200	Y	Unknown	vkDestroySemaphore	'If VkAllocationCallbacks were provided when semaphore was created, a compatible set of callbacks must be provided here'
00201	Y	Unknown	vkDestroySemaphore	'If no VkAllocationCallbacks were provided when semaphore was created, pAllocator must be NULL'
00202	Y	None	vkDestroySemaphore	'device must be a valid VkDevice handle'
00203	Y	None	vkDestroySemaphore	'If semaphore is not VK_NULL_HANDLE, semaphore must be a valid VkSemaphore handle'
00204	U	Unknown	vkDestroySemaphore	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00205	U	Unknown	vkDestroySemaphore	'If semaphore is a valid handle, it must have been created, allocated, or retrieved from device'
00206	Y	None	vkCreateEvent	'device must be a valid VkDevice handle'
00207	U	Unknown	vkCreateEvent	'pCreateInfo must be a pointer to a valid VkEventCreateInfo structure'
00208	U	Unknown	vkCreateEvent	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00209	U	Unknown	vkCreateEvent	'pEvent must be a pointer to a VkEvent handle'
00210	N	Unknown	vkCreateEvent	'sType must be VK_STRUCTURE_TYPE_EVENT_CREATE_INFO'
00211	N	Unknown	vkCreateEvent	'pNext must be NULL'
00212	N	Unknown	vkCreateEvent	'flags must be 0'
00213	Y	InUseDestroyedSignaled	vkDestroyEvent	'All submitted commands that refer to event must have completed execution'
00214	Y	Unknown	vkDestroyEvent	'If VkAllocationCallbacks were provided when event was created, a compatible set of callbacks must be provided here'
00215	Y	Unknown	vkDestroyEvent	'If no VkAllocationCallbacks were provided when event was created, pAllocator must be NULL'
00216	Y	None	vkDestroyEvent	'device must be a valid VkDevice handle'
00217	Y	None	vkDestroyEvent	'If event is not VK_NULL_HANDLE, event must be a valid VkEvent handle'
00218	U	Unknown	vkDestroyEvent	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00219	U	Unknown	vkDestroyEvent	'If event is a valid handle, it must have been created, allocated, or retrieved from device'
00220	Y	None	vkGetEventStatus	'device must be a valid VkDevice handle'
00221	Y	None	vkGetEventStatus	'event must be a valid VkEvent handle'
00222	U	Unknown	vkGetEventStatus	'event must have been created, allocated, or retrieved from device'
00223	Y	None	vkSetEvent	'device must be a valid VkDevice handle'
00224	Y	None	vkSetEvent	'event must be a valid VkEvent handle'
00225	U	Unknown	vkSetEvent	'event must have been created, allocated, or retrieved from device'
00226	U	Unknown	vkResetEvent	'event must not be waited on by a vkCmdWaitEvents command that is currently executing'
00227	Y	None	vkResetEvent	'device must be a valid VkDevice handle'
00228	Y	None	vkResetEvent	'event must be a valid VkEvent handle'
00229	U	Unknown	vkResetEvent	'event must have been created, allocated, or retrieved from device'
00230	U	Unknown	vkCmdSetEvent	'If the geometry shaders feature is not enabled, stageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT'
00231	U	Unknown	vkCmdSetEvent	'If the tessellation shaders feature is not enabled, stageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT'
00232	Y	None	vkCmdSetEvent	'commandBuffer must be a valid VkCommandBuffer handle'
00233	Y	None	vkCmdSetEvent	'event must be a valid VkEvent handle'
00234	U	Unknown	vkCmdSetEvent	'stageMask must be a valid combination of VkPipelineStageFlagBits values'
00235	U	Unknown	vkCmdSetEvent	'stageMask must not be 0'
00236	U	Unknown	vkCmdSetEvent	'commandBuffer must be in the recording state'
00237	U	Unknown	vkCmdSetEvent	'The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations'
00238	U	Unknown	vkCmdSetEvent	'This command must only be called outside of a render pass instance'
00239	U	Unknown	vkCmdSetEvent	'Both of commandBuffer, and event must have been created, allocated, or retrieved from the same VkDevice'
00240	U	Unknown	vkCmdResetEvent	'If the geometry shaders feature is not enabled, stageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT'
00241	U	Unknown	vkCmdResetEvent	'If the tessellation shaders feature is not enabled, stageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT'
00242	U	Unknown	vkCmdResetEvent	'When this command executes, event must not be waited on by a vkCmdWaitEvents command that is currently executing'
00243	Y	None	vkCmdResetEvent	'commandBuffer must be a valid VkCommandBuffer handle'
00244	Y	None	vkCmdResetEvent	'event must be a valid VkEvent handle'
00245	U	Unknown	vkCmdResetEvent	'stageMask must be a valid combination of VkPipelineStageFlagBits values'
00246	U	Unknown	vkCmdResetEvent	'stageMask must not be 0'
00247	U	Unknown	vkCmdResetEvent	'commandBuffer must be in the recording state'
00248	U	Unknown	vkCmdResetEvent	'The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations'
00249	U	Unknown	vkCmdResetEvent	'This command must only be called outside of a render pass instance'
00250	U	Unknown	vkCmdResetEvent	'Both of commandBuffer, and event must have been created, allocated, or retrieved from the same VkDevice'
00252	Y	None	vkCmdWaitEvents	'commandBuffer must be a valid VkCommandBuffer handle'
00253	Y	None	vkCmdWaitEvents	'pEvents must be a pointer to an array of eventCount valid VkEvent handles'
00254	U	Unknown	vkCmdWaitEvents	'srcStageMask must be a valid combination of VkPipelineStageFlagBits values'
00255	U	Unknown	vkCmdWaitEvents	'srcStageMask must not be 0'
00256	U	Unknown	vkCmdWaitEvents	'dstStageMask must be a valid combination of VkPipelineStageFlagBits values'
00257	U	Unknown	vkCmdWaitEvents	'dstStageMask must not be 0'
00258	U	Unknown	vkCmdWaitEvents	'If memoryBarrierCount is not 0, pMemoryBarriers must be a pointer to an array of memoryBarrierCount valid VkMemoryBarrier structures'
00259	Y	None	vkCmdWaitEvents	'If bufferMemoryBarrierCount is not 0, pBufferMemoryBarriers must be a pointer to an array of bufferMemoryBarrierCount valid VkBufferMemoryBarrier structures'
00260	Y	None	vkCmdWaitEvents	'If imageMemoryBarrierCount is not 0, pImageMemoryBarriers must be a pointer to an array of imageMemoryBarrierCount valid VkImageMemoryBarrier structures'
00261	U	Unknown	vkCmdWaitEvents	'commandBuffer must be in the recording state'
00262	U	Unknown	vkCmdWaitEvents	'The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations'
00263	U	Unknown	vkCmdWaitEvents	'eventCount must be greater than 0'
00264	U	Unknown	vkCmdWaitEvents	'Both of commandBuffer, and the elements of pEvents must have been created, allocated, or retrieved from the same VkDevice'
00265	U	Unknown	vkCmdPipelineBarrier	'If the geometry shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT'
00266	U	Unknown	vkCmdPipelineBarrier	'If the geometry shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT'
00267	U	Unknown	vkCmdPipelineBarrier	'If the tessellation shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT'
00268	U	Unknown	vkCmdPipelineBarrier	'If the tessellation shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT'
00269	U	Unknown	vkCmdPipelineBarrier	'If vkCmdPipelineBarrier is called within a render pass instance, the render pass must have been created with a VkSubpassDependency instance in pDependencies that expresses a dependency from the current subpass to itself. Additionally:srcStageMask must contain a subset of the bit values in the srcStageMask member of that instance of VkSubpassDependencydstStageMask must contain a subset of the bit values in the dstStageMask member of that instance of VkSubpassDependencyThe srcAccessMask of any element of pMemoryBarriers or pImageMemoryBarriers must contain a subset of the bit values the srcAccessMask member of that instance of VkSubpassDependencyThe dstAccessMask of any element of pMemoryBarriers or pImageMemoryBarriers must contain a subset of the bit values the dstAccessMask member of that instance of VkSubpassDependencydependencyFlags must be equal to the dependencyFlags member of that instance of VkSubpassDependency'
00270	Y	None	vkCmdPipelineBarrier	'commandBuffer must be a valid VkCommandBuffer handle'
00271	U	Unknown	vkCmdPipelineBarrier	'srcStageMask must be a valid combination of VkPipelineStageFlagBits values'
00272	U	Unknown	vkCmdPipelineBarrier	'srcStageMask must not be 0'
00273	U	Unknown	vkCmdPipelineBarrier	'dstStageMask must be a valid combination of VkPipelineStageFlagBits values'
00274	U	Unknown	vkCmdPipelineBarrier	'dstStageMask must not be 0'
00275	U	Unknown	vkCmdPipelineBarrier	'dependencyFlags must be a valid combination of VkDependencyFlagBits values'
00276	U	Unknown	vkCmdPipelineBarrier	'If memoryBarrierCount is not 0, pMemoryBarriers must be a pointer to an array of memoryBarrierCount valid VkMemoryBarrier structures'
00277	Y	None	vkCmdPipelineBarrier	'If bufferMemoryBarrierCount is not 0, pBufferMemoryBarriers must be a pointer to an array of bufferMemoryBarrierCount valid VkBufferMemoryBarrier structures'
00278	Y	None	vkCmdPipelineBarrier	'If imageMemoryBarrierCount is not 0, pImageMemoryBarriers must be a pointer to an array of imageMemoryBarrierCount valid VkImageMemoryBarrier structures'
00279	U	Unknown	vkCmdPipelineBarrier	'commandBuffer must be in the recording state'
00280	U	Unknown	vkCmdPipelineBarrier	'The VkCommandPool that commandBuffer was allocated from must support transfer, graphics, or compute operations'
00281	N	Unknown	vkCmdPipelineBarrier	'sType must be VK_STRUCTURE_TYPE_MEMORY_BARRIER'
00282	N	Unknown	vkCmdPipelineBarrier	'pNext must be NULL'
00283	U	Unknown	vkCmdPipelineBarrier	'srcAccessMask must be a valid combination of VkAccessFlagBits values'
00284	U	Unknown	vkCmdPipelineBarrier	'dstAccessMask must be a valid combination of VkAccessFlagBits values'
00285	U	Unknown	vkCmdPipelineBarrier	'offset must be less than the size of buffer'
00286	U	Unknown	vkCmdPipelineBarrier	'If size is not equal to VK_WHOLE_SIZE, size must be greater than 0'
00287	U	Unknown	vkCmdPipelineBarrier	'If size is not equal to VK_WHOLE_SIZE, size must be less than or equal to than the size of buffer minus offset'
00288	U	Unknown	vkCmdPipelineBarrier	'If buffer was created with a sharing mode of VK_SHARING_MODE_CONCURRENT, srcQueueFamilyIndex and dstQueueFamilyIndex must both be VK_QUEUE_FAMILY_IGNORED'
00289	U	Unknown	vkCmdPipelineBarrier	'If buffer was created with a sharing mode of VK_SHARING_MODE_EXCLUSIVE, srcQueueFamilyIndex and dstQueueFamilyIndex must either both be VK_QUEUE_FAMILY_IGNORED, or both be a valid queue family (see Section 4.3.1, Queue Family Properties)'
00290	U	Unknown	vkCmdPipelineBarrier	'If buffer was created with a sharing mode of VK_SHARING_MODE_EXCLUSIVE, and srcQueueFamilyIndex and dstQueueFamilyIndex are valid queue families, at least one of them must be the same as the family of the queue that will execute this barrier'
00291	N	Unknown	vkCmdPipelineBarrier	'sType must be VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER'
00292	N	Unknown	vkCmdPipelineBarrier	'pNext must be NULL'
00293	U	Unknown	vkCmdPipelineBarrier	'srcAccessMask must be a valid combination of VkAccessFlagBits values'
00294	U	Unknown	vkCmdPipelineBarrier	'dstAccessMask must be a valid combination of VkAccessFlagBits values'
00295	U	Unknown	vkCmdPipelineBarrier	'buffer must be a valid VkBuffer handle'
00296	U	Unknown	vkCmdPipelineBarrier	'oldLayout must be VK_IMAGE_LAYOUT_UNDEFINED or the current layout of the image subresources affected by the barrier'
00297	U	Unknown	vkCmdPipelineBarrier	'newLayout must not be VK_IMAGE_LAYOUT_UNDEFINED or VK_IMAGE_LAYOUT_PREINITIALIZED'
00298	U	Unknown	vkCmdPipelineBarrier	'If image was created with a sharing mode of VK_SHARING_MODE_CONCURRENT, srcQueueFamilyIndex and dstQueueFamilyIndex must both be VK_QUEUE_FAMILY_IGNORED'
00299	U	Unknown	vkCmdPipelineBarrier	'If image was created with a sharing mode of VK_SHARING_MODE_EXCLUSIVE, srcQueueFamilyIndex and dstQueueFamilyIndex must either both be VK_QUEUE_FAMILY_IGNORED, or both be a valid queue family (see Section 4.3.1, Queue Family Properties)'
00300	U	Unknown	vkCmdPipelineBarrier	'If image was created with a sharing mode of VK_SHARING_MODE_EXCLUSIVE, and srcQueueFamilyIndex and dstQueueFamilyIndex are valid queue families, at least one of them must be the same as the family of the queue that will execute this barrier'
00301	U	Unknown	vkCmdPipelineBarrier	'subresourceRange must be a valid image subresource range for the image (see Section 11.5, Image Views)'
00302	U	Unknown	vkCmdPipelineBarrier	'If image has a depth/stencil format with both depth and stencil components, then aspectMask member of subresourceRange must include both VK_IMAGE_ASPECT_DEPTH_BIT and VK_IMAGE_ASPECT_STENCIL_BIT'
00303	U	Unknown	vkCmdPipelineBarrier	'If either oldLayout or newLayout is VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL then image must have been created with VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT set'
00304	U	Unknown	vkCmdPipelineBarrier	'If either oldLayout or newLayout is VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL then image must have been created with VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT set'
00305	U	Unknown	vkCmdPipelineBarrier	'If either oldLayout or newLayout is VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL then image must have been created with VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT set'
00306	U	Unknown	vkCmdPipelineBarrier	'If either oldLayout or newLayout is VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL then image must have been created with VK_IMAGE_USAGE_SAMPLED_BIT or VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT set'
00307	U	Unknown	vkCmdPipelineBarrier	'If either oldLayout or newLayout is VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL then image must have been created with VK_IMAGE_USAGE_TRANSFER_SRC_BIT set'
00308	U	Unknown	vkCmdPipelineBarrier	'If either oldLayout or newLayout is VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL then image must have been created with VK_IMAGE_USAGE_TRANSFER_DST_BIT set'
00309	N	Unknown	vkCmdPipelineBarrier	'sType must be VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER'
00310	N	Unknown	vkCmdPipelineBarrier	'pNext must be NULL'
00311	U	Unknown	vkCmdPipelineBarrier	'srcAccessMask must be a valid combination of VkAccessFlagBits values'
00312	U	Unknown	vkCmdPipelineBarrier	'dstAccessMask must be a valid combination of VkAccessFlagBits values'
00313	U	Unknown	vkCmdPipelineBarrier	'oldLayout must be a valid VkImageLayout value'
00314	U	Unknown	vkCmdPipelineBarrier	'newLayout must be a valid VkImageLayout value'
00315	U	Unknown	vkCmdPipelineBarrier	'image must be a valid VkImage handle'
00316	U	Unknown	vkCmdPipelineBarrier	'subresourceRange must be a valid VkImageSubresourceRange structure'
00317	Y	None	vkQueueWaitIdle	'queue must be a valid VkQueue handle'
00318	Y	None	vkDeviceWaitIdle	'device must be a valid VkDevice handle'
00319	Y	None	vkCreateRenderPass	'device must be a valid VkDevice handle'
00320	U	Unknown	vkCreateRenderPass	'pCreateInfo must be a pointer to a valid VkRenderPassCreateInfo structure'
00321	U	Unknown	vkCreateRenderPass	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00322	U	Unknown	vkCreateRenderPass	'pRenderPass must be a pointer to a VkRenderPass handle'
00323	U	Unknown	vkCreateRenderPass	'If any two subpasses operate on attachments with overlapping ranges of the same VkDeviceMemory object, and at least one subpass writes to that area of VkDeviceMemory, a subpass dependency must be included (either directly or via some intermediate subpasses) between them'
00324	U	Unknown	vkCreateRenderPass	'If the attachment member of any element of pInputAttachments, pColorAttachments, pResolveAttachments or pDepthStencilAttachment, or the attachment indexed by any element of pPreserveAttachments in any given element of pSubpasses is bound to a range of a VkDeviceMemory object that overlaps with any other attachment in any subpass (including the same subpass), the VkAttachmentDescription structures describing them must include VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT in flags'
00325	Y	RenderPassAttachmentIndexOutOfRange	vkCreateRenderPass	'If the attachment member of any element of pInputAttachments, pColorAttachments, pResolveAttachments or pDepthStencilAttachment, or any element of pPreserveAttachments in any given element of pSubpasses is not VK_ATTACHMENT_UNUSED, it must be less than attachmentCount'
00326	U	Unknown	vkCreateRenderPass	'The value of any element of the pPreserveAttachments member in any given element of pSubpasses must not be VK_ATTACHMENT_UNUSED'
00327	N	Unknown	vkCreateRenderPass	'sType must be VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO'
00328	N	Unknown	vkCreateRenderPass	'pNext must be NULL'
00329	N	Unknown	vkCreateRenderPass	'flags must be 0'
00330	U	Unknown	vkCreateRenderPass	'If attachmentCount is not 0, pAttachments must be a pointer to an array of attachmentCount valid VkAttachmentDescription structures'
00331	U	Unknown	vkCreateRenderPass	'pSubpasses must be a pointer to an array of subpassCount valid VkSubpassDescription structures'
00332	U	Unknown	vkCreateRenderPass	'If dependencyCount is not 0, pDependencies must be a pointer to an array of dependencyCount valid VkSubpassDependency structures'
00333	U	Unknown	vkCreateRenderPass	'subpassCount must be greater than 0'
00334	U	Unknown	vkCreateRenderPass	'finalLayout must not be VK_IMAGE_LAYOUT_UNDEFINED or VK_IMAGE_LAYOUT_PREINITIALIZED'
00335	N	Unknown	vkCreateRenderPass	'flags must be a valid combination of VkAttachmentDescriptionFlagBits values'
00336	U	Unknown	vkCreateRenderPass	'format must be a valid VkFormat value'
00337	U	Unknown	vkCreateRenderPass	'samples must be a valid VkSampleCountFlagBits value'
00338	U	Unknown	vkCreateRenderPass	'loadOp must be a valid VkAttachmentLoadOp value'
00339	U	Unknown	vkCreateRenderPass	'storeOp must be a valid VkAttachmentStoreOp value'
00340	U	Unknown	vkCreateRenderPass	'stencilLoadOp must be a valid VkAttachmentLoadOp value'
00341	U	Unknown	vkCreateRenderPass	'stencilStoreOp must be a valid VkAttachmentStoreOp value'
00342	U	Unknown	vkCreateRenderPass	'initialLayout must be a valid VkImageLayout value'
00343	U	Unknown	vkCreateRenderPass	'finalLayout must be a valid VkImageLayout value'
00347	U	Unknown	vkCreateRenderPass	'pipelineBindPoint must be VK_PIPELINE_BIND_POINT_GRAPHICS'
00348	U	Unknown	vkCreateRenderPass	'colorAttachmentCount must be less than or equal to VkPhysicalDeviceLimits::maxColorAttachments'
00349	U	Unknown	vkCreateRenderPass	'If the first use of an attachment in this render pass is as an input attachment, and the attachment is not also used as a color or depth/stencil attachment in the same subpass, then loadOp must not be VK_ATTACHMENT_LOAD_OP_CLEAR'
00350	U	Unknown	vkCreateRenderPass	'If pResolveAttachments is not NULL, for each resolve attachment that does not have the value VK_ATTACHMENT_UNUSED, the corresponding color attachment must not have the value VK_ATTACHMENT_UNUSED'
00351	U	Unknown	vkCreateRenderPass	'If pResolveAttachments is not NULL, the sample count of each element of pColorAttachments must be anything other than VK_SAMPLE_COUNT_1_BIT'
00352	U	Unknown	vkCreateRenderPass	'Any given element of pResolveAttachments must have a sample count of VK_SAMPLE_COUNT_1_BIT'
00353	U	Unknown	vkCreateRenderPass	'Any given element of pResolveAttachments must have the same VkFormat as its corresponding color attachment'
00354	U	Unknown	vkCreateRenderPass	'All attachments in pColorAttachments and pDepthStencilAttachment that are not VK_ATTACHMENT_UNUSED must have the same sample count'
00355	U	Unknown	vkCreateRenderPass	'If any input attachments are VK_ATTACHMENT_UNUSED, then any pipelines bound during the subpass must not access those input attachments from the fragment shader'
00356	U	Unknown	vkCreateRenderPass	'The attachment member of any element of pPreserveAttachments must not be VK_ATTACHMENT_UNUSED'
00357	U	Unknown	vkCreateRenderPass	'Any given element of pPreserveAttachments must not also be an element of any other member of the subpass description'
00358	U	Unknown	vkCreateRenderPass	'If any attachment is used as both an input attachment and a color or depth/stencil attachment, then each use must use the same layout'
00359	N	Unknown	vkCreateRenderPass	'flags must be 0'
00360	U	Unknown	vkCreateRenderPass	'pipelineBindPoint must be a valid VkPipelineBindPoint value'
00361	U	Unknown	vkCreateRenderPass	'If inputAttachmentCount is not 0, pInputAttachments must be a pointer to an array of inputAttachmentCount valid VkAttachmentReference structures'
00362	U	Unknown	vkCreateRenderPass	'If colorAttachmentCount is not 0, pColorAttachments must be a pointer to an array of colorAttachmentCount valid VkAttachmentReference structures'
00363	U	Unknown	vkCreateRenderPass	'If colorAttachmentCount is not 0, and pResolveAttachments is not NULL, pResolveAttachments must be a pointer to an array of colorAttachmentCount valid VkAttachmentReference structures'
00364	U	Unknown	vkCreateRenderPass	'If pDepthStencilAttachment is not NULL, pDepthStencilAttachment must be a pointer to a valid VkAttachmentReference structure'
00365	U	Unknown	vkCreateRenderPass	'If preserveAttachmentCount is not 0, pPreserveAttachments must be a pointer to an array of preserveAttachmentCount uint32_t values'
00366	U	Unknown	vkCreateRenderPass	'layout must not be VK_IMAGE_LAYOUT_UNDEFINED or VK_IMAGE_LAYOUT_PREINITIALIZED'
00367	U	Unknown	vkCreateRenderPass	'layout must be a valid VkImageLayout value'
00368	U	Unknown	vkCreateRenderPass	'If the geometry shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT'
00369	U	Unknown	vkCreateRenderPass	'If the geometry shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT'
00370	U	Unknown	vkCreateRenderPass	'If the tessellation shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT'
00371	U	Unknown	vkCreateRenderPass	'If the tessellation shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT'
00372	U	Unknown	vkCreateRenderPass	'srcSubpass must be less than or equal to dstSubpass, unless one of them is VK_SUBPASS_EXTERNAL, to avoid cyclic dependencies and ensure a valid execution order'
00373	U	Unknown	vkCreateRenderPass	'srcSubpass and dstSubpass must not both be equal to VK_SUBPASS_EXTERNAL'
00374	U	Unknown	vkCreateRenderPass	'If srcSubpass is equal to dstSubpass, srcStageMask and dstStageMask must only contain one of VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT, VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT, VK_PIPELINE_STAGE_VERTEX_INPUT_BIT, VK_PIPELINE_STAGE_VERTEX_SHADER_BIT, VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT, VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT, VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT, VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT, VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT, VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT, VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT, VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT, or VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT'
00375	U	Unknown	vkCreateRenderPass	'If srcSubpass is equal to dstSubpass, the logically latest pipeline stage in srcStageMask must be logically earlier than or equal to the logically earliest pipeline stage in dstStageMask'
00376	U	Unknown	vkCreateRenderPass	'srcStageMask must be a valid combination of VkPipelineStageFlagBits values'
00377	U	Unknown	vkCreateRenderPass	'srcStageMask must not be 0'
00378	U	Unknown	vkCreateRenderPass	'dstStageMask must be a valid combination of VkPipelineStageFlagBits values'
00379	U	Unknown	vkCreateRenderPass	'dstStageMask must not be 0'
00380	U	Unknown	vkCreateRenderPass	'srcAccessMask must be a valid combination of VkAccessFlagBits values'
00381	U	Unknown	vkCreateRenderPass	'dstAccessMask must be a valid combination of VkAccessFlagBits values'
00382	U	Unknown	vkCreateRenderPass	'dependencyFlags must be a valid combination of VkDependencyFlagBits values'
00393	Y	RenderPassInUseDestroyedSignaled	vkDestroyRenderPass	'All submitted commands that refer to renderPass must have completed execution'
00394	Y	Unknown	vkDestroyRenderPass	'If VkAllocationCallbacks were provided when renderPass was created, a compatible set of callbacks must be provided here'
00395	Y	Unknown	vkDestroyRenderPass	'If no VkAllocationCallbacks were provided when renderPass was created, pAllocator must be NULL'
00396	Y	None	vkDestroyRenderPass	'device must be a valid VkDevice handle'
00397	Y	None	vkDestroyRenderPass	'If renderPass is not VK_NULL_HANDLE, renderPass must be a valid VkRenderPass handle'
00398	U	Unknown	vkDestroyRenderPass	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00399	U	Unknown	vkDestroyRenderPass	'If renderPass is a valid handle, it must have been created, allocated, or retrieved from device'
00400	Y	None	vkCreateFramebuffer	'device must be a valid VkDevice handle'
00401	U	Unknown	vkCreateFramebuffer	'pCreateInfo must be a pointer to a valid VkFramebufferCreateInfo structure'
00402	U	Unknown	vkCreateFramebuffer	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00403	U	Unknown	vkCreateFramebuffer	'pFramebuffer must be a pointer to a VkFramebuffer handle'
00404	U	Unknown	vkCreateFramebuffer	'attachmentCount must be equal to the attachment count specified in renderPass'
00405	U	Unknown	vkCreateFramebuffer	'Any given element of pAttachments that is used as a color attachment or resolve attachment by renderPass must have been created with a usage value including VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT'
00406	U	Unknown	vkCreateFramebuffer	'Any given element of pAttachments that is used as a depth/stencil attachment by renderPass must have been created with a usage value including VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT'
00407	U	Unknown	vkCreateFramebuffer	'Any given element of pAttachments that is used as an input attachment by renderPass must have been created with a usage value including VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT'
00408	U	Unknown	vkCreateFramebuffer	'Any given element of pAttachments must have been created with an VkFormat value that matches the VkFormat specified by the corresponding VkAttachmentDescription in renderPass'
00409	U	Unknown	vkCreateFramebuffer	'Any given element of pAttachments must have been created with a samples value that matches the samples value specified by the corresponding VkAttachmentDescription in renderPass'
00410	U	Unknown	vkCreateFramebuffer	'Any given element of pAttachments must have dimensions at least as large as the corresponding framebuffer dimension'
00411	U	Unknown	vkCreateFramebuffer	'Any given element of pAttachments must only specify a single mip level'
00412	U	Unknown	vkCreateFramebuffer	'Any given element of pAttachments must have been created with the identity swizzle'
00413	U	Unknown	vkCreateFramebuffer	'width must be less than or equal to VkPhysicalDeviceLimits::maxFramebufferWidth'
00414	U	Unknown	vkCreateFramebuffer	'height must be less than or equal to VkPhysicalDeviceLimits::maxFramebufferHeight'
00415	U	Unknown	vkCreateFramebuffer	'layers must be less than or equal to VkPhysicalDeviceLimits::maxFramebufferLayers'
00416	N	Unknown	vkCreateFramebuffer	'sType must be VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO'
00417	N	Unknown	vkCreateFramebuffer	'pNext must be NULL'
00418	N	Unknown	vkCreateFramebuffer	'flags must be 0'
00419	Y	None	vkCreateFramebuffer	'renderPass must be a valid VkRenderPass handle'
00420	Y	None	vkCreateFramebuffer	'If attachmentCount is not 0, pAttachments must be a pointer to an array of attachmentCount valid VkImageView handles'
00421	U	Unknown	vkCreateFramebuffer	'Both of renderPass, and the elements of pAttachments that are valid handles must have been created, allocated, or retrieved from the same VkDevice'
00422	Y	FramebufferInUseDestroyedSignaled	vkDestroyFramebuffer	'All submitted commands that refer to framebuffer must have completed execution'
00423	Y	Unknown	vkDestroyFramebuffer	'If VkAllocationCallbacks were provided when framebuffer was created, a compatible set of callbacks must be provided here'
00424	Y	Unknown	vkDestroyFramebuffer	'If no VkAllocationCallbacks were provided when framebuffer was created, pAllocator must be NULL'
00425	Y	None	vkDestroyFramebuffer	'device must be a valid VkDevice handle'
00426	Y	None	vkDestroyFramebuffer	'If framebuffer is not VK_NULL_HANDLE, framebuffer must be a valid VkFramebuffer handle'
00427	U	Unknown	vkDestroyFramebuffer	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00428	U	Unknown	vkDestroyFramebuffer	'If framebuffer is a valid handle, it must have been created, allocated, or retrieved from device'
00429	U	Unknown	vkCmdBeginRenderPass	'If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT set'
00430	U	Unknown	vkCmdBeginRenderPass	'If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL or VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT set'
00431	U	Unknown	vkCmdBeginRenderPass	'If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_SAMPLED_BIT or VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT set'
00432	U	Unknown	vkCmdBeginRenderPass	'If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_TRANSFER_SRC_BIT set'
00433	U	Unknown	vkCmdBeginRenderPass	'If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL then the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with VK_IMAGE_USAGE_TRANSFER_DST_BIT set'
00434	U	Unknown	vkCmdBeginRenderPass	'If any of the initialLayout members of the VkAttachmentDescription structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is not VK_IMAGE_LAYOUT_UNDEFINED, then each such initialLayout must be equal to the current layout of the corresponding attachment image subresource of the framebuffer specified in the framebuffer member of pRenderPassBegin'
00435	Y	None	vkCmdBeginRenderPass	'commandBuffer must be a valid VkCommandBuffer handle'
00436	U	Unknown	vkCmdBeginRenderPass	'pRenderPassBegin must be a pointer to a valid VkRenderPassBeginInfo structure'
00437	U	Unknown	vkCmdBeginRenderPass	'contents must be a valid VkSubpassContents value'
00438	U	Unknown	vkCmdBeginRenderPass	'commandBuffer must be in the recording state'
00439	U	Unknown	vkCmdBeginRenderPass	'The VkCommandPool that commandBuffer was allocated from must support graphics operations'
00440	U	Unknown	vkCmdBeginRenderPass	'This command must only be called outside of a render pass instance'
00441	U	Unknown	vkCmdBeginRenderPass	'commandBuffer must be a primary VkCommandBuffer'
00442	Y	RenderPassClearOpMismatch	vkCmdBeginRenderPass	'clearValueCount must be greater than the largest attachment index in renderPass that specifies a loadOp (or stencilLoadOp, if the attachment has a depth/stencil format) of VK_ATTACHMENT_LOAD_OP_CLEAR'
00443	N	Unknown	vkCmdBeginRenderPass	'sType must be VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO'
00444	N	Unknown	vkCmdBeginRenderPass	'pNext must be NULL'
00445	Y	None	vkCmdBeginRenderPass	'renderPass must be a valid VkRenderPass handle'
00446	Y	None	vkCmdBeginRenderPass	'framebuffer must be a valid VkFramebuffer handle'
00447	U	Unknown	vkCmdBeginRenderPass	'If clearValueCount is not 0, pClearValues must be a pointer to an array of clearValueCount valid VkClearValue unions'
00448	U	Unknown	vkCmdBeginRenderPass	'Both of framebuffer, and renderPass must have been created, allocated, or retrieved from the same VkDevice'
00449	Y	None	vkGetRenderAreaGranularity	'device must be a valid VkDevice handle'
00450	Y	None	vkGetRenderAreaGranularity	'renderPass must be a valid VkRenderPass handle'
00451	U	Unknown	vkGetRenderAreaGranularity	'pGranularity must be a pointer to a VkExtent2D structure'
00452	U	Unknown	vkGetRenderAreaGranularity	'renderPass must have been created, allocated, or retrieved from device'
00453	U	Unknown	vkCmdNextSubpass	'The current subpass index must be less than the number of subpasses in the render pass minus one'
00454	Y	None	vkCmdNextSubpass	'commandBuffer must be a valid VkCommandBuffer handle'
00455	U	Unknown	vkCmdNextSubpass	'contents must be a valid VkSubpassContents value'
00456	U	Unknown	vkCmdNextSubpass	'commandBuffer must be in the recording state'
00457	U	Unknown	vkCmdNextSubpass	'The VkCommandPool that commandBuffer was allocated from must support graphics operations'
00458	U	Unknown	vkCmdNextSubpass	'This command must only be called inside of a render pass instance'
00459	U	Unknown	vkCmdNextSubpass	'commandBuffer must be a primary VkCommandBuffer'
00460	U	Unknown	vkCmdEndRenderPass	'The current subpass index must be equal to the number of subpasses in the render pass minus one'
00461	Y	None	vkCmdEndRenderPass	'commandBuffer must be a valid VkCommandBuffer handle'
00462	U	Unknown	vkCmdEndRenderPass	'commandBuffer must be in the recording state'
00463	U	Unknown	vkCmdEndRenderPass	'The VkCommandPool that commandBuffer was allocated from must support graphics operations'
00464	U	Unknown	vkCmdEndRenderPass	'This command must only be called inside of a render pass instance'
00465	U	Unknown	vkCmdEndRenderPass	'commandBuffer must be a primary VkCommandBuffer'
00466	Y	None	vkCreateShaderModule	'device must be a valid VkDevice handle'
00467	U	Unknown	vkCreateShaderModule	'pCreateInfo must be a pointer to a valid VkShaderModuleCreateInfo structure'
00468	U	Unknown	vkCreateShaderModule	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00469	U	Unknown	vkCreateShaderModule	'pShaderModule must be a pointer to a VkShaderModule handle'
00470	U	Unknown	vkCreateShaderModule	'codeSize must be greater than 0'
00471	U	Unknown	vkCreateShaderModule	'codeSize must be a multiple of 4. If the VK_NV_glsl_shader extension is enabled and pCode references GLSL code codeSize can be a multiple of 1'
00472	U	Unknown	vkCreateShaderModule	'pCode must point to valid SPIR-V code, formatted and packed as described by the Khronos SPIR-V Specification. If the VK_NV_glsl_shader extension is enabled pCode can instead reference valid GLSL code and must be written to the GL_KHR_vulkan_glsl extension specification'
00473	U	Unknown	vkCreateShaderModule	'pCode must adhere to the validation rules described by the Validation Rules within a Module section of the SPIR-V Environment appendix. If the VK_NV_glsl_shader extension is enabled pCode can be valid GLSL code with respect to the GL_KHR_vulkan_glsl GLSL extension specification'
00474	U	Unknown	vkCreateShaderModule	'pCode must declare the Shader capability for SPIR-V code'
00475	N	Unknown	vkCreateShaderModule	'sType must be VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO'
00476	N	Unknown	vkCreateShaderModule	'pNext must be NULL'
00477	N	Unknown	vkCreateShaderModule	'flags must be 0'
00478	U	Unknown	vkCreateShaderModule	'pCode must be a pointer to an array of $codeSize /over 4$ uint32_t values'
00479	Y	Unknown	vkDestroyShaderModule	'If VkAllocationCallbacks were provided when shaderModule was created, a compatible set of callbacks must be provided here'
00480	Y	Unknown	vkDestroyShaderModule	'If no VkAllocationCallbacks were provided when shaderModule was created, pAllocator must be NULL'
00481	Y	None	vkDestroyShaderModule	'device must be a valid VkDevice handle'
00482	Y	None	vkDestroyShaderModule	'If shaderModule is not VK_NULL_HANDLE, shaderModule must be a valid VkShaderModule handle'
00483	U	Unknown	vkDestroyShaderModule	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00484	U	Unknown	vkDestroyShaderModule	'If shaderModule is a valid handle, it must have been created, allocated, or retrieved from device'
00485	N	Unknown	vkCreateComputePipelines	'If the flags member of any given element of pCreateInfos contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and the basePipelineIndex member of that same element is not -1, basePipelineIndex must be less than the index into pCreateInfos that corresponds to that element'
00486	Y	None	vkCreateComputePipelines	'device must be a valid VkDevice handle'
00487	Y	None	vkCreateComputePipelines	'If pipelineCache is not VK_NULL_HANDLE, pipelineCache must be a valid VkPipelineCache handle'
00488	N	Unknown	vkCreateComputePipelines	'pCreateInfos must be a pointer to an array of createInfoCount valid VkComputePipelineCreateInfo structures'
00489	N	Unknown	vkCreateComputePipelines	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00490	N	Unknown	vkCreateComputePipelines	'pPipelines must be a pointer to an array of createInfoCount VkPipeline handles'
00491	N	Unknown	vkCreateComputePipelines	'createInfoCount must be greater than 0'
00492	U	Unknown	vkCreateComputePipelines	'If pipelineCache is a valid handle, it must have been created, allocated, or retrieved from device'
00493	N	Unknown	vkCreateComputePipelines	'If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineIndex is not -1, basePipelineHandle must be VK_NULL_HANDLE'
00494	N	Unknown	vkCreateComputePipelines	'If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineIndex is not -1, it must be a valid index into the calling commands pCreateInfos parameter'
00495	N	Unknown	vkCreateComputePipelines	'If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineHandle is not VK_NULL_HANDLE, basePipelineIndex must be -1'
00496	Y	None	vkCreateComputePipelines	'If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineHandle is not VK_NULL_HANDLE, basePipelineHandle must be a valid VkPipeline handle'
00497	N	Unknown	vkCreateComputePipelines	'If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineHandle is not VK_NULL_HANDLE, it must be a valid handle to a compute VkPipeline'
00498	N	Unknown	vkCreateComputePipelines	'The stage member of stage must be VK_SHADER_STAGE_COMPUTE_BIT'
00499	U	Unknown	vkCreateComputePipelines	'The shader code for the entry point identified by stage and the rest of the state identified by this structure must adhere to the pipeline linking rules described in the Shader Interfaces chapter'
00500	U	Unknown	vkCreateComputePipelines	'layout must be consistent with the layout of the compute shader specified in stage'
00501	N	Unknown	vkCreateComputePipelines	'sType must be VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO'
00502	N	Unknown	vkCreateComputePipelines	'pNext must be NULL'
00503	N	Unknown	vkCreateComputePipelines	'flags must be a valid combination of VkPipelineCreateFlagBits values'
00504	U	Unknown	vkCreateComputePipelines	'stage must be a valid VkPipelineShaderStageCreateInfo structure'
00505	Y	None	vkCreateComputePipelines	'layout must be a valid VkPipelineLayout handle'
00506	N	Unknown	vkCreateComputePipelines	'Both of basePipelineHandle, and layout that are valid handles must have been created, allocated, or retrieved from the same VkDevice'
00507	U	Unknown	vkCreateComputePipelines	'If the geometry shaders feature is not enabled, stage must not be VK_SHADER_STAGE_GEOMETRY_BIT'
00508	U	Unknown	vkCreateComputePipelines	'If the tessellation shaders feature is not enabled, stage must not be VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT or VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT'
00509	N	Unknown	vkCreateComputePipelines	'stage must not be VK_SHADER_STAGE_ALL_GRAPHICS, or VK_SHADER_STAGE_ALL'
00510	U	Unknown	vkCreateComputePipelines	'pName must be the name of an OpEntryPoint in module with an execution model that matches stage'
00511	N	Unknown	vkCreateComputePipelines	'sType must be VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO'
00512	N	Unknown	vkCreateComputePipelines	'pNext must be NULL'
00513	N	Unknown	vkCreateComputePipelines	'flags must be 0'
00514	N	Unknown	vkCreateComputePipelines	'stage must be a valid VkShaderStageFlagBits value'
00515	Y	None	vkCreateComputePipelines	'module must be a valid VkShaderModule handle'
00516	N	Unknown	vkCreateComputePipelines	'pName must be a null-terminated string'
00517	N	Unknown	vkCreateComputePipelines	'If pSpecializationInfo is not NULL, pSpecializationInfo must be a pointer to a valid VkSpecializationInfo structure'
00518	U	Unknown	vkCreateGraphicsPipelines	'If the flags member of any given element of pCreateInfos contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and the basePipelineIndex member of that same element is not -1, basePipelineIndex must be less than the index into pCreateInfos that corresponds to that element'
00519	Y	None	vkCreateGraphicsPipelines	'device must be a valid VkDevice handle'
00520	Y	None	vkCreateGraphicsPipelines	'If pipelineCache is not VK_NULL_HANDLE, pipelineCache must be a valid VkPipelineCache handle'
00521	U	Unknown	vkCreateGraphicsPipelines	'pCreateInfos must be a pointer to an array of createInfoCount valid VkGraphicsPipelineCreateInfo structures'
00522	U	Unknown	vkCreateGraphicsPipelines	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00523	U	Unknown	vkCreateGraphicsPipelines	'pPipelines must be a pointer to an array of createInfoCount VkPipeline handles'
00524	U	Unknown	vkCreateGraphicsPipelines	'createInfoCount must be greater than 0'
00525	U	Unknown	vkCreateGraphicsPipelines	'If pipelineCache is a valid handle, it must have been created, allocated, or retrieved from device'
00526	Y	Unknown	vkCreateGraphicsPipelines	'If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineIndex is not -1, basePipelineHandle must be VK_NULL_HANDLE'
00527	U	Unknown	vkCreateGraphicsPipelines	'If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineIndex is not -1, it must be a valid index into the calling commands pCreateInfos parameter'
00528	Y	Unknown	vkCreateGraphicsPipelines	'If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineHandle is not VK_NULL_HANDLE, basePipelineIndex must be -1'
00529	Y	None	vkCreateGraphicsPipelines	'If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineHandle is not VK_NULL_HANDLE, basePipelineHandle must be a valid VkPipeline handle'
00530	U	Unknown	vkCreateGraphicsPipelines	'If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineHandle is not VK_NULL_HANDLE, it must be a valid handle to a graphics VkPipeline'
00531	U	Unknown	vkCreateGraphicsPipelines	'The stage member of each element of pStages must be unique'
00532	U	Unknown	vkCreateGraphicsPipelines	'The stage member of one element of pStages must be VK_SHADER_STAGE_VERTEX_BIT'
00533	U	Unknown	vkCreateGraphicsPipelines	'The stage member of any given element of pStages must not be VK_SHADER_STAGE_COMPUTE_BIT'
00534	U	Unknown	vkCreateGraphicsPipelines	'If pStages includes a tessellation control shader stage, it must include a tessellation evaluation shader stage'
00535	U	Unknown	vkCreateGraphicsPipelines	'If pStages includes a tessellation evaluation shader stage, it must include a tessellation control shader stage'
00536	Y	Unknown	vkCreateGraphicsPipelines	'If pStages includes a tessellation control shader stage and a tessellation evaluation shader stage, pTessellationState must not be NULL'
00537	U	Unknown	vkCreateGraphicsPipelines	'If pStages includes tessellation shader stages, the shader code of at least one stage must contain an OpExecutionMode instruction that specifies the type of subdivision in the pipeline'
00538	Y	Unknown	vkCreateGraphicsPipelines	'sType must be VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO'
00539	N	Unknown	vkCreateGraphicsPipelines	'pNext must be NULL'
00540	N	Unknown	vkCreateGraphicsPipelines	'flags must be a valid combination of VkPipelineCreateFlagBits values'
00541	U	Unknown	vkCreateGraphicsPipelines	'pStages must be a pointer to an array of stageCount valid VkPipelineShaderStageCreateInfo structures'
00542	U	Unknown	vkCreateGraphicsPipelines	'pVertexInputState must be a pointer to a valid VkPipelineVertexInputStateCreateInfo structure'
00543	U	Unknown	vkCreateGraphicsPipelines	'pInputAssemblyState must be a pointer to a valid VkPipelineInputAssemblyStateCreateInfo structure'
00544	U	Unknown	vkCreateGraphicsPipelines	'pRasterizationState must be a pointer to a valid VkPipelineRasterizationStateCreateInfo structure'
00545	U	Unknown	vkCreateGraphicsPipelines	'If pDynamicState is not NULL, pDynamicState must be a pointer to a valid VkPipelineDynamicStateCreateInfo structure'
00546	Y	None	vkCreateGraphicsPipelines	'layout must be a valid VkPipelineLayout handle'
00547	Y	None	vkCreateGraphicsPipelines	'renderPass must be a valid VkRenderPass handle'
00548	U	Unknown	vkCreateGraphicsPipelines	'stageCount must be greater than 0'
00549	U	Unknown	vkCreateGraphicsPipelines	'Each of basePipelineHandle, layout, and renderPass that are valid handles must have been created, allocated, or retrieved from the same VkDevice'
00550	N	Unknown	vkCreateGraphicsPipelines	'sType must be VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO'
00551	N	Unknown	vkCreateGraphicsPipelines	'pNext must be NULL'
00552	N	Unknown	vkCreateGraphicsPipelines	'flags must be 0'
00553	U	Unknown	vkCreateGraphicsPipelines	'pDynamicStates must be a pointer to an array of dynamicStateCount valid VkDynamicState values'
00554	U	Unknown	vkCreateGraphicsPipelines	'dynamicStateCount must be greater than 0'
00555	Y	PipelineInUseDestroyedSignaled	vkDestroyPipeline	'All submitted commands that refer to pipeline must have completed execution'
00556	Y	Unknown	vkDestroyPipeline	'If VkAllocationCallbacks were provided when pipeline was created, a compatible set of callbacks must be provided here'
00557	Y	Unknown	vkDestroyPipeline	'If no VkAllocationCallbacks were provided when pipeline was created, pAllocator must be NULL'
00558	Y	None	vkDestroyPipeline	'device must be a valid VkDevice handle'
00559	Y	None	vkDestroyPipeline	'If pipeline is not VK_NULL_HANDLE, pipeline must be a valid VkPipeline handle'
00560	U	Unknown	vkDestroyPipeline	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00561	U	Unknown	vkDestroyPipeline	'If pipeline is a valid handle, it must have been created, allocated, or retrieved from device'
00562	Y	None	vkCreatePipelineCache	'device must be a valid VkDevice handle'
00563	U	Unknown	vkCreatePipelineCache	'pCreateInfo must be a pointer to a valid VkPipelineCacheCreateInfo structure'
00564	U	Unknown	vkCreatePipelineCache	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00565	U	Unknown	vkCreatePipelineCache	'pPipelineCache must be a pointer to a VkPipelineCache handle'
00566	U	Unknown	vkCreatePipelineCache	'If initialDataSize is not 0, it must be equal to the size of pInitialData, as returned by vkGetPipelineCacheData when pInitialData was originally retrieved'
00567	N	Unknown	vkCreatePipelineCache	'sType must be VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO'
00568	N	Unknown	vkCreatePipelineCache	'pNext must be NULL'
00569	N	Unknown	vkCreatePipelineCache	'flags must be 0'
00570	U	Unknown	vkCreatePipelineCache	'If initialDataSize is not 0, pInitialData must be a pointer to an array of initialDataSize bytes'
00571	U	Unknown	vkMergePipelineCaches	'dstCache must not appear in the list of source caches'
00572	Y	None	vkMergePipelineCaches	'device must be a valid VkDevice handle'
00573	Y	None	vkMergePipelineCaches	'dstCache must be a valid VkPipelineCache handle'
00574	U	Unknown	vkMergePipelineCaches	'pSrcCaches must be a pointer to an array of srcCacheCount valid VkPipelineCache handles'
00575	U	Unknown	vkMergePipelineCaches	'srcCacheCount must be greater than 0'
00576	U	Unknown	vkMergePipelineCaches	'dstCache must have been created, allocated, or retrieved from device'
00577	Y	None	vkMergePipelineCaches	'Each element of pSrcCaches must have been created, allocated, or retrieved from device'
00578	Y	None	vkGetPipelineCacheData	'device must be a valid VkDevice handle'
00579	Y	None	vkGetPipelineCacheData	'pipelineCache must be a valid VkPipelineCache handle'
00580	U	Unknown	vkGetPipelineCacheData	'pDataSize must be a pointer to a size_t value'
00581	U	Unknown	vkGetPipelineCacheData	'If the value referenced by pDataSize is not 0, and pData is not NULL, pData must be a pointer to an array of pDataSize bytes'
00582	U	Unknown	vkGetPipelineCacheData	'pipelineCache must have been created, allocated, or retrieved from device'
00583	Y	Unknown	vkDestroyPipelineCache	'If VkAllocationCallbacks were provided when pipelineCache was created, a compatible set of callbacks must be provided here'
00584	Y	Unknown	vkDestroyPipelineCache	'If no VkAllocationCallbacks were provided when pipelineCache was created, pAllocator must be NULL'
00585	Y	None	vkDestroyPipelineCache	'device must be a valid VkDevice handle'
00586	Y	None	vkDestroyPipelineCache	'If pipelineCache is not VK_NULL_HANDLE, pipelineCache must be a valid VkPipelineCache handle'
00587	U	Unknown	vkDestroyPipelineCache	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00588	U	Unknown	vkDestroyPipelineCache	'If pipelineCache is a valid handle, it must have been created, allocated, or retrieved from device'
00589	U	Unknown	vkDestroyPipelineCache	'The offset member of any given element of pMapEntries must be less than dataSize'
00590	U	Unknown	vkDestroyPipelineCache	'For any given element of pMapEntries, size must be less than or equal to dataSize minus offset'
00591	U	Unknown	vkDestroyPipelineCache	'If mapEntryCount is not 0, pMapEntries must be a pointer to an array of mapEntryCount valid VkSpecializationMapEntry structures'
00592	U	Unknown	vkDestroyPipelineCache	'If dataSize is not 0, pData must be a pointer to an array of dataSize bytes'
00593	U	Unknown	vkDestroyPipelineCache	'For a constantID specialization constant declared in a shader, size must match the byte size of the constantID. If the specialization constant is of type boolean, size must be the byte size of VkBool32'
00594	U	Unknown	vkCmdBindPipeline	'If pipelineBindPoint is VK_PIPELINE_BIND_POINT_COMPUTE, the VkCommandPool that commandBuffer was allocated from must support compute operations'
00595	U	Unknown	vkCmdBindPipeline	'If pipelineBindPoint is VK_PIPELINE_BIND_POINT_GRAPHICS, the VkCommandPool that commandBuffer was allocated from must support graphics operations'
00596	U	Unknown	vkCmdBindPipeline	'If pipelineBindPoint is VK_PIPELINE_BIND_POINT_COMPUTE, pipeline must be a compute pipeline'
00597	U	Unknown	vkCmdBindPipeline	'If pipelineBindPoint is VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline must be a graphics pipeline'
00598	U	Unknown	vkCmdBindPipeline	'If the variable multisample rate feature is not supported, pipeline is a graphics pipeline, the current subpass has no attachments, and this is not the first call to this function with a graphics pipeline after transitioning to the current subpass, then the sample count specified by this pipeline must match that set in the previous pipeline'
00599	Y	None	vkCmdBindPipeline	'commandBuffer must be a valid VkCommandBuffer handle'
00600	U	Unknown	vkCmdBindPipeline	'pipelineBindPoint must be a valid VkPipelineBindPoint value'
00601	Y	PipelineNotBound,InvalidPipeline	vkCmdBindPipeline	'pipeline must be a valid VkPipeline handle'
00602	U	Unknown	vkCmdBindPipeline	'commandBuffer must be in the recording state'
00603	U	Unknown	vkCmdBindPipeline	'The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations'
00604	U	Unknown	vkCmdBindPipeline	'Both of commandBuffer, and pipeline must have been created, allocated, or retrieved from the same VkDevice'
00605	U	Unknown	vkCmdBindPipeline	'pfnAllocation must be a pointer to a valid user-defined PFN_vkAllocationFunction'
00606	U	Unknown	vkCmdBindPipeline	'pfnReallocation must be a pointer to a valid user-defined PFN_vkReallocationFunction'
00607	U	Unknown	vkCmdBindPipeline	'pfnFree must be a pointer to a valid user-defined PFN_vkFreeFunction'
00608	U	Unknown	vkCmdBindPipeline	'If either of pfnInternalAllocation or pfnInternalFree is not NULL, both must be valid callbacks'
00609	Y	None	vkGetPhysicalDeviceMemoryProperties	'physicalDevice must be a valid VkPhysicalDevice handle'
00610	U	Unknown	vkGetPhysicalDeviceMemoryProperties	'pMemoryProperties must be a pointer to a VkPhysicalDeviceMemoryProperties structure'
00611	Y	None	vkAllocateMemory	'The number of currently valid memory objects, allocated from device, must be less than VkPhysicalDeviceLimits::maxMemoryAllocationCount'
00612	Y	None	vkAllocateMemory	'device must be a valid VkDevice handle'
00613	U	Unknown	vkAllocateMemory	'pAllocateInfo must be a pointer to a valid VkMemoryAllocateInfo structure'
00614	U	Unknown	vkAllocateMemory	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00615	U	Unknown	vkAllocateMemory	'pMemory must be a pointer to a VkDeviceMemory handle'
00616	U	Unknown	vkAllocateMemory	'allocationSize must be less than or equal to the amount of memory available to the VkMemoryHeap specified by memoryTypeIndex and the calling commands VkDevice'
00617	U	Unknown	vkAllocateMemory	'allocationSize must be greater than 0'
00618	N	Unknown	vkAllocateMemory	'sType must be VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO'
00619	N	Unknown	vkAllocateMemory	'pNext must be NULL, or a pointer to a valid instance of VkDedicatedAllocationMemoryAllocateInfoNV'
00620	Y	None	vkFreeMemory	'All submitted commands that refer to memory (via images or buffers) must have completed execution'
00621	Y	None	vkFreeMemory	'device must be a valid VkDevice handle'
00622	Y	VertexBufferInvalid	vkFreeMemory	'If memory is not VK_NULL_HANDLE, memory must be a valid VkDeviceMemory handle'
00623	U	Unknown	vkFreeMemory	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00624	U	Unknown	vkFreeMemory	'If memory is a valid handle, it must have been created, allocated, or retrieved from device'
00625	U	Unknown	vkMapMemory	'memory must not currently be mapped'
00626	U	Unknown	vkMapMemory	'offset must be less than the size of memory'
00627	U	Unknown	vkMapMemory	'If size is not equal to VK_WHOLE_SIZE, size must be greater than 0'
00628	U	Unknown	vkMapMemory	'If size is not equal to VK_WHOLE_SIZE, size must be less than or equal to the size of the memory minus offset'
00629	Y	Unknown	vkMapMemory	'memory must have been created with a memory type that reports VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT'
00630	Y	None	vkMapMemory	'device must be a valid VkDevice handle'
00631	Y	None	vkMapMemory	'memory must be a valid VkDeviceMemory handle'
00632	N	Unknown	vkMapMemory	'flags must be 0'
00633	U	Unknown	vkMapMemory	'ppData must be a pointer to a pointer'
00634	U	Unknown	vkMapMemory	'memory must have been created, allocated, or retrieved from device'
00635	Y	None	vkFlushMappedMemoryRanges	'device must be a valid VkDevice handle'
00636	U	Unknown	vkFlushMappedMemoryRanges	'pMemoryRanges must be a pointer to an array of memoryRangeCount valid VkMappedMemoryRange structures'
00637	U	Unknown	vkFlushMappedMemoryRanges	'memoryRangeCount must be greater than 0'
00638	Y	None	vkInvalidateMappedMemoryRanges	'device must be a valid VkDevice handle'
00639	N	Unknown	vkInvalidateMappedMemoryRanges	'pMemoryRanges must be a pointer to an array of memoryRangeCount valid VkMappedMemoryRange structures'
00640	U	Unknown	vkInvalidateMappedMemoryRanges	'memoryRangeCount must be greater than 0'
00641	U	Unknown	vkInvalidateMappedMemoryRanges	'memory must currently be mapped'
00642	Y	InvalidMemoryMapping	vkInvalidateMappedMemoryRanges	'If size is not equal to VK_WHOLE_SIZE, offset and size must specify a range contained within the currently mapped range of memory'
00643	Y	InvalidMemoryMapping	vkInvalidateMappedMemoryRanges	'If size is equal to VK_WHOLE_SIZE, offset must be within the currently mapped range of memory'
00644	Y	InvalidMemoryMapping	vkInvalidateMappedMemoryRanges	'offset must be a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize'
00645	Y	InvalidMemoryMapping	vkInvalidateMappedMemoryRanges	'If size is not equal to VK_WHOLE_SIZE, size must be a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize'
00646	N	Unknown	vkInvalidateMappedMemoryRanges	'sType must be VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE'
00647	N	Unknown	vkInvalidateMappedMemoryRanges	'pNext must be NULL'
00648	Y	None	vkInvalidateMappedMemoryRanges	'memory must be a valid VkDeviceMemory handle'
00649	U	Unknown	vkUnmapMemory	'memory must currently be mapped'
00650	Y	None	vkUnmapMemory	'device must be a valid VkDevice handle'
00651	Y	None	vkUnmapMemory	'memory must be a valid VkDeviceMemory handle'
00652	U	Unknown	vkUnmapMemory	'memory must have been created, allocated, or retrieved from device'
00653	U	Unknown	vkGetDeviceMemoryCommitment	'memory must have been created with a memory type that reports VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT'
00654	Y	None	vkGetDeviceMemoryCommitment	'device must be a valid VkDevice handle'
00655	Y	None	vkGetDeviceMemoryCommitment	'memory must be a valid VkDeviceMemory handle'
00656	U	Unknown	vkGetDeviceMemoryCommitment	'pCommittedMemoryInBytes must be a pointer to a VkDeviceSize value'
00657	U	Unknown	vkGetDeviceMemoryCommitment	'memory must have been created, allocated, or retrieved from device'
00658	N	None	vkCreateBuffer	'If the flags member of pCreateInfo includes VK_BUFFER_CREATE_SPARSE_BINDING_BIT, creating this VkBuffer must not cause the total required sparse memory for all currently valid sparse resources on the device to exceed VkPhysicalDeviceLimits::sparseAddressSpaceSize'
00659	Y	None	vkCreateBuffer	'device must be a valid VkDevice handle'
00660	N	None	vkCreateBuffer	'pCreateInfo must be a pointer to a valid VkBufferCreateInfo structure'
00661	N	None	vkCreateBuffer	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00662	N	None	vkCreateBuffer	'pBuffer must be a pointer to a VkBuffer handle'
00663	N	None	vkCreateBuffer	'size must be greater than 0'
00664	Y	None	vkCreateBuffer	'If sharingMode is VK_SHARING_MODE_CONCURRENT, pQueueFamilyIndices must be a pointer to an array of queueFamilyIndexCount uint32_t values'
00665	Y	None	vkCreateBuffer	'If sharingMode is VK_SHARING_MODE_CONCURRENT, queueFamilyIndexCount must be greater than 1'
00666	N	None	vkCreateBuffer	'If the sparse bindings feature is not enabled, flags must not contain VK_BUFFER_CREATE_SPARSE_BINDING_BIT'
00667	N	None	vkCreateBuffer	'If the sparse buffer residency feature is not enabled, flags must not contain VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT'
00668	N	None	vkCreateBuffer	'If the sparse aliased residency feature is not enabled, flags must not contain VK_BUFFER_CREATE_SPARSE_ALIASED_BIT'
00669	Y	SparseBindingImageBufferCreate	vkCreateBuffer	'If flags contains VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT or VK_BUFFER_CREATE_SPARSE_ALIASED_BIT, it must also contain VK_BUFFER_CREATE_SPARSE_BINDING_BIT'
00670	N	None	vkCreateBuffer	'sType must be VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO'
00671	N	None	vkCreateBuffer	'pNext must be NULL, or a pointer to a valid instance of VkDedicatedAllocationBufferCreateInfoNV'
00672	N	None	vkCreateBuffer	'flags must be a valid combination of VkBufferCreateFlagBits values'
00673	N	None	vkCreateBuffer	'usage must be a valid combination of VkBufferUsageFlagBits values'
00674	N	None	vkCreateBuffer	'usage must not be 0'
00675	N	None	vkCreateBuffer	'sharingMode must be a valid VkSharingMode value'
00676	U	Unknown	vkDestroyBuffer	'All submitted commands that refer to buffer, either directly or via a VkBufferView, must have completed execution'
00677	Y	Unknown	vkDestroyBuffer	'If VkAllocationCallbacks were provided when buffer was created, a compatible set of callbacks must be provided here'
00678	Y	Unknown	vkDestroyBuffer	'If no VkAllocationCallbacks were provided when buffer was created, pAllocator must be NULL'
00679	Y	None	vkDestroyBuffer	'device must be a valid VkDevice handle'
00680	Y	VertexBufferInvalid	vkDestroyBuffer	'If buffer is not VK_NULL_HANDLE, buffer must be a valid VkBuffer handle'
00681	U	Unknown	vkDestroyBuffer	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00682	U	Unknown	vkDestroyBuffer	'If buffer is a valid handle, it must have been created, allocated, or retrieved from device'
00683	Y	None	vkCreateBufferView	'device must be a valid VkDevice handle'
00684	U	Unknown	vkCreateBufferView	'pCreateInfo must be a pointer to a valid VkBufferViewCreateInfo structure'
00685	U	Unknown	vkCreateBufferView	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00686	U	Unknown	vkCreateBufferView	'pView must be a pointer to a VkBufferView handle'
00687	U	Unknown	vkCreateBufferView	'offset must be less than the size of buffer'
00688	U	Unknown	vkCreateBufferView	'offset must be a multiple of VkPhysicalDeviceLimits::minTexelBufferOffsetAlignment'
00689	U	Unknown	vkCreateBufferView	'If range is not equal to VK_WHOLE_SIZE:range must be greater than 0range must be a multiple of the element size of formatrange divided by the element size of format, must be less than or equal to VkPhysicalDeviceLimits::maxTexelBufferElementsthe sum of offset and range must be less than or equal to the size of buffer'
00690	U	Unknown	vkCreateBufferView	'range must be greater than 0'
00691	U	Unknown	vkCreateBufferView	'range must be a multiple of the element size of format'
00692	U	Unknown	vkCreateBufferView	'range divided by the element size of format, must be less than or equal to VkPhysicalDeviceLimits::maxTexelBufferElements'
00693	U	Unknown	vkCreateBufferView	'the sum of offset and range must be less than or equal to the size of buffer'
00694	Y	None	vkCreateBufferView	'buffer must have been created with a usage value containing at least one of VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT or VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT'
00695	U	Unknown	vkCreateBufferView	'If buffer was created with usage containing VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT, format must be supported for uniform texel buffers, as specified by the VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT flag in VkFormatProperties::bufferFeatures returned by vkGetPhysicalDeviceFormatProperties'
00696	N	Unknown	vkCreateBufferView	'sType must be VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO'
00697	N	Unknown	vkCreateBufferView	'pNext must be NULL'
00698	N	Unknown	vkCreateBufferView	'flags must be 0'
00699	Y	None	vkCreateBufferView	'buffer must be a valid VkBuffer handle'
00700	U	Unknown	vkCreateBufferView	'format must be a valid VkFormat value'
00701	Y	BufferViewInUseDestroyedSignaled	vkDestroyBufferView	'All submitted commands that refer to bufferView must have completed execution'
00702	Y	Unknown	vkDestroyBufferView	'If VkAllocationCallbacks were provided when bufferView was created, a compatible set of callbacks must be provided here'
00703	Y	Unknown	vkDestroyBufferView	'If no VkAllocationCallbacks were provided when bufferView was created, pAllocator must be NULL'
00704	Y	None	vkDestroyBufferView	'device must be a valid VkDevice handle'
00705	Y	None	vkDestroyBufferView	'If bufferView is not VK_NULL_HANDLE, bufferView must be a valid VkBufferView handle'
00706	U	Unknown	vkDestroyBufferView	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00707	U	Unknown	vkDestroyBufferView	'If bufferView is a valid handle, it must have been created, allocated, or retrieved from device'
00708	U	Unknown	vkCreateImage	'If the flags member of pCreateInfo includes VK_IMAGE_CREATE_SPARSE_BINDING_BIT, creating this VkImage must not cause the total required sparse memory for all currently valid sparse resources on the device to exceed VkPhysicalDeviceLimits::sparseAddressSpaceSize'
00709	Y	None	vkCreateImage	'device must be a valid VkDevice handle'
00710	U	Unknown	vkCreateImage	'pCreateInfo must be a pointer to a valid VkImageCreateInfo structure'
00711	U	Unknown	vkCreateImage	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00712	U	Unknown	vkCreateImage	'pImage must be a pointer to a VkImage handle'
00713	U	Unknown	vkCreateImage	'If sharingMode is VK_SHARING_MODE_CONCURRENT, pQueueFamilyIndices must be a pointer to an array of queueFamilyIndexCount uint32_t values'
00714	U	Unknown	vkCreateImage	'If sharingMode is VK_SHARING_MODE_CONCURRENT, queueFamilyIndexCount must be greater than 1'
00715	U	Unknown	vkCreateImage	'format must not be VK_FORMAT_UNDEFINED'
00716	U	Unknown	vkCreateImage	'The width, height, and depth members of extent must all be greater than 0'
00717	U	Unknown	vkCreateImage	'mipLevels must be greater than 0'
00718	U	Unknown	vkCreateImage	'arrayLayers must be greater than 0'
00719	U	Unknown	vkCreateImage	'If flags contains VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT, imageType must be VK_IMAGE_TYPE_2D'
00720	U	Unknown	vkCreateImage	'If imageType is VK_IMAGE_TYPE_1D, extent.width must be less than or equal to VkPhysicalDeviceLimits::maxImageDimension1D, or VkImageFormatProperties::maxExtent.width (as returned by vkGetPhysicalDeviceImageFormatProperties with format, type, tiling, usage, and flags equal to those in this structure) - whichever is higher'
00721	N	Unknown	vkCreateImage	'sType must be VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO'
00722	N	Unknown	vkCreateImage	'pNext must be NULL, or a pointer to a valid instance of VkDedicatedAllocationImageCreateInfoNV'
00723	N	Unknown	vkCreateImage	'flags must be a valid combination of VkImageCreateFlagBits values'
00724	U	Unknown	vkCreateImage	'imageType must be a valid VkImageType value'
00725	U	Unknown	vkCreateImage	'format must be a valid VkFormat value'
00726	U	Unknown	vkCreateImage	'samples must be a valid VkSampleCountFlagBits value'
00727	U	Unknown	vkCreateImage	'tiling must be a valid VkImageTiling value'
00728	U	Unknown	vkCreateImage	'usage must be a valid combination of VkImageUsageFlagBits values'
00729	U	Unknown	vkCreateImage	'usage must not be 0'
00730	U	Unknown	vkCreateImage	'sharingMode must be a valid VkSharingMode value'
00731	U	Unknown	vkCreateImage	'initialLayout must be a valid VkImageLayout value'
00732	U	Unknown	vkGetImageSubresourceLayout	'image must have been created with tiling equal to VK_IMAGE_TILING_LINEAR'
00733	U	Unknown	vkGetImageSubresourceLayout	'The aspectMask member of pSubresource must only have a single bit set'
00734	Y	None	vkGetImageSubresourceLayout	'device must be a valid VkDevice handle'
00735	Y	None	vkGetImageSubresourceLayout	'image must be a valid VkImage handle'
00736	U	Unknown	vkGetImageSubresourceLayout	'pSubresource must be a pointer to a valid VkImageSubresource structure'
00737	U	Unknown	vkGetImageSubresourceLayout	'pLayout must be a pointer to a VkSubresourceLayout structure'
00738	U	Unknown	vkGetImageSubresourceLayout	'image must have been created, allocated, or retrieved from device'
00739	U	Unknown	vkGetImageSubresourceLayout	'mipLevel must be less than the mipLevels specified in VkImageCreateInfo when the image was created'
00740	U	Unknown	vkGetImageSubresourceLayout	'arrayLayer must be less than the arrayLayers specified in VkImageCreateInfo when the image was created'
00741	Y	InvalidImageViewAspect	vkGetImageSubresourceLayout	'aspectMask must be a valid combination of VkImageAspectFlagBits values'
00742	U	Unknown	vkGetImageSubresourceLayout	'aspectMask must not be 0'
00743	Y	FramebufferImageInUseDestroyedSignaled	vkDestroyImage	'All submitted commands that refer to image, either directly or via a VkImageView, must have completed execution'
00744	Y	Unknown	vkDestroyImage	'If VkAllocationCallbacks were provided when image was created, a compatible set of callbacks must be provided here'
00745	Y	Unknown	vkDestroyImage	'If no VkAllocationCallbacks were provided when image was created, pAllocator must be NULL'
00746	Y	None	vkDestroyImage	'device must be a valid VkDevice handle'
00747	Y	None	vkDestroyImage	'If image is not VK_NULL_HANDLE, image must be a valid VkImage handle'
00748	U	Unknown	vkDestroyImage	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00749	U	Unknown	vkDestroyImage	'If image is a valid handle, it must have been created, allocated, or retrieved from device'
00750	Y	None	vkCreateImageView	'device must be a valid VkDevice handle'
00751	U	Unknown	vkCreateImageView	'pCreateInfo must be a pointer to a valid VkImageViewCreateInfo structure'
00752	U	Unknown	vkCreateImageView	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00753	U	Unknown	vkCreateImageView	'pView must be a pointer to a VkImageView handle'
00754	U	Unknown	vkCreateImageView	'If image was not created with VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT then viewType must not be VK_IMAGE_VIEW_TYPE_CUBE or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY'
00755	U	Unknown	vkCreateImageView	'If the image cubemap arrays feature is not enabled, viewType must not be VK_IMAGE_VIEW_TYPE_CUBE_ARRAY'
00756	U	Unknown	vkCreateImageView	'If the ETC2 texture compression feature is not enabled, format must not be VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK, VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK, VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK, VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK, VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK, VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK, VK_FORMAT_EAC_R11_UNORM_BLOCK, VK_FORMAT_EAC_R11_SNORM_BLOCK, VK_FORMAT_EAC_R11G11_UNORM_BLOCK, or VK_FORMAT_EAC_R11G11_SNORM_BLOCK'
00757	U	Unknown	vkCreateImageView	'If the ASTC LDR texture compression feature is not enabled, format must not be VK_FORMAT_ASTC_4x4_UNORM_BLOCK, VK_FORMAT_ASTC_4x4_SRGB_BLOCK, VK_FORMAT_ASTC_5x4_UNORM_BLOCK, VK_FORMAT_ASTC_5x4_SRGB_BLOCK, VK_FORMAT_ASTC_5x5_UNORM_BLOCK, VK_FORMAT_ASTC_5x5_SRGB_BLOCK, VK_FORMAT_ASTC_6x5_UNORM_BLOCK, VK_FORMAT_ASTC_6x5_SRGB_BLOCK, VK_FORMAT_ASTC_6x6_UNORM_BLOCK, VK_FORMAT_ASTC_6x6_SRGB_BLOCK, VK_FORMAT_ASTC_8x5_UNORM_BLOCK, VK_FORMAT_ASTC_8x5_SRGB_BLOCK, VK_FORMAT_ASTC_8x6_UNORM_BLOCK, VK_FORMAT_ASTC_8x6_SRGB_BLOCK, VK_FORMAT_ASTC_8x8_UNORM_BLOCK, VK_FORMAT_ASTC_8x8_SRGB_BLOCK, VK_FORMAT_ASTC_10x5_UNORM_BLOCK, VK_FORMAT_ASTC_10x5_SRGB_BLOCK, VK_FORMAT_ASTC_10x6_UNORM_BLOCK, VK_FORMAT_ASTC_10x6_SRGB_BLOCK, VK_FORMAT_ASTC_10x8_UNORM_BLOCK, VK_FORMAT_ASTC_10x8_SRGB_BLOCK, VK_FORMAT_ASTC_10x10_UNORM_BLOCK, VK_FORMAT_ASTC_10x10_SRGB_BLOCK, VK_FORMAT_ASTC_12x10_UNORM_BLOCK, VK_FORMAT_ASTC_12x10_SRGB_BLOCK, VK_FORMAT_ASTC_12x12_UNORM_BLOCK, or VK_FORMAT_ASTC_12x12_SRGB_BLOCK'
00758	U	Unknown	vkCreateImageView	'If the BC texture compression feature is not enabled, format must not be VK_FORMAT_BC1_RGB_UNORM_BLOCK, VK_FORMAT_BC1_RGB_SRGB_BLOCK, VK_FORMAT_BC1_RGBA_UNORM_BLOCK, VK_FORMAT_BC1_RGBA_SRGB_BLOCK, VK_FORMAT_BC2_UNORM_BLOCK, VK_FORMAT_BC2_SRGB_BLOCK, VK_FORMAT_BC3_UNORM_BLOCK, VK_FORMAT_BC3_SRGB_BLOCK, VK_FORMAT_BC4_UNORM_BLOCK, VK_FORMAT_BC4_SNORM_BLOCK, VK_FORMAT_BC5_UNORM_BLOCK, VK_FORMAT_BC5_SNORM_BLOCK, VK_FORMAT_BC6H_UFLOAT_BLOCK, VK_FORMAT_BC6H_SFLOAT_BLOCK, VK_FORMAT_BC7_UNORM_BLOCK, or VK_FORMAT_BC7_SRGB_BLOCK'
00759	U	Unknown	vkCreateImageView	'If image was created with VK_IMAGE_TILING_LINEAR, format must be format that has at least one supported feature bit present in the value of VkFormatProperties::linearTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format'
00760	N	Unknown	vkCreateImageView	'sType must be VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO'
00761	N	Unknown	vkCreateImageView	'pNext must be NULL'
00762	N	Unknown	vkCreateImageView	'flags must be 0'
00763	Y	None	vkCreateImageView	'image must be a valid VkImage handle'
00764	U	Unknown	vkCreateImageView	'viewType must be a valid VkImageViewType value'
00765	U	Unknown	vkCreateImageView	'format must be a valid VkFormat value'
00766	U	Unknown	vkCreateImageView	'components must be a valid VkComponentMapping structure'
00767	U	Unknown	vkCreateImageView	'subresourceRange must be a valid VkImageSubresourceRange structure'
00768	Y	InvalidImageView,ImageLayerViewTests	vkCreateImageView	'If levelCount is not VK_REMAINING_MIP_LEVELS, levelCount must be non-zero and (baseMipLevel + levelCount) must be less than or equal to the mipLevels specified in VkImageCreateInfo when the image was created'
00769	Y	ImageLayerViewTests	vkCreateImageView	'If layerCount is not VK_REMAINING_ARRAY_LAYERS, layerCount must be non-zero and (baseArrayLayer + layerCount) must be less than or equal to the arrayLayers specified in VkImageCreateInfo when the image was created'
00770	U	Unknown	vkCreateImageView	'aspectMask must be a valid combination of VkImageAspectFlagBits values'
00771	U	Unknown	vkCreateImageView	'aspectMask must not be 0'
00772	U	Unknown	vkCreateImageView	'r must be a valid VkComponentSwizzle value'
00773	U	Unknown	vkCreateImageView	'g must be a valid VkComponentSwizzle value'
00774	U	Unknown	vkCreateImageView	'b must be a valid VkComponentSwizzle value'
00775	U	Unknown	vkCreateImageView	'a must be a valid VkComponentSwizzle value'
00776	Y	ImageViewInUseDestroyedSignaled	vkDestroyImageView	'All submitted commands that refer to imageView must have completed execution'
00777	Y	Unknown	vkDestroyImageView	'If VkAllocationCallbacks were provided when imageView was created, a compatible set of callbacks must be provided here'
00778	Y	Unknown	vkDestroyImageView	'If no VkAllocationCallbacks were provided when imageView was created, pAllocator must be NULL'
00779	Y	None	vkDestroyImageView	'device must be a valid VkDevice handle'
00780	Y	None	vkDestroyImageView	'If imageView is not VK_NULL_HANDLE, imageView must be a valid VkImageView handle'
00781	U	Unknown	vkDestroyImageView	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00782	U	Unknown	vkDestroyImageView	'If imageView is a valid handle, it must have been created, allocated, or retrieved from device'
00783	Y	None	vkGetBufferMemoryRequirements	'device must be a valid VkDevice handle'
00784	Y	None	vkGetBufferMemoryRequirements	'buffer must be a valid VkBuffer handle'
00785	U	Unknown	vkGetBufferMemoryRequirements	'pMemoryRequirements must be a pointer to a VkMemoryRequirements structure'
00786	U	Unknown	vkGetBufferMemoryRequirements	'buffer must have been created, allocated, or retrieved from device'
00787	Y	None	vkGetImageMemoryRequirements	'device must be a valid VkDevice handle'
00788	Y	CreateUnknownObject	vkGetImageMemoryRequirements	'image must be a valid VkImage handle'
00789	U	Unknown	vkGetImageMemoryRequirements	'pMemoryRequirements must be a pointer to a VkMemoryRequirements structure'
00790	U	Unknown	vkGetImageMemoryRequirements	'image must have been created, allocated, or retrieved from device'
00791	U	Unknown	vkBindBufferMemory	'buffer must not already be backed by a memory object'
00792	U	Unknown	vkBindBufferMemory	'buffer must not have been created with any sparse memory binding flags'
00793	U	Unknown	vkBindBufferMemory	'memoryOffset must be less than the size of memory'
00794	U	Unknown	vkBindBufferMemory	'If buffer was created with the VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT or VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT, memoryOffset must be a multiple of VkPhysicalDeviceLimits::minTexelBufferOffsetAlignment'
00795	U	Unknown	vkBindBufferMemory	'If buffer was created with the VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT, memoryOffset must be a multiple of VkPhysicalDeviceLimits::minUniformBufferOffsetAlignment'
00796	U	Unknown	vkBindBufferMemory	'If buffer was created with the VK_BUFFER_USAGE_STORAGE_BUFFER_BIT, memoryOffset must be a multiple of VkPhysicalDeviceLimits::minStorageBufferOffsetAlignment'
00797	U	Unknown	vkBindBufferMemory	'memory must have been allocated using one of the memory types allowed in the memoryTypeBits member of the VkMemoryRequirements structure returned from a call to vkGetBufferMemoryRequirements with buffer'
00798	Y	None	vkBindBufferMemory	'device must be a valid VkDevice handle'
00799	Y	VertexBufferInvalid	vkBindBufferMemory	'buffer must be a valid VkBuffer handle'
00800	Y	VertexBufferInvalid	vkBindBufferMemory	'memory must be a valid VkDeviceMemory handle'
00801	U	Unknown	vkBindBufferMemory	'buffer must have been created, allocated, or retrieved from device'
00802	U	Unknown	vkBindBufferMemory	'memory must have been created, allocated, or retrieved from device'
00803	U	Unknown	vkBindImageMemory	'image must not already be backed by a memory object'
00804	U	Unknown	vkBindImageMemory	'image must not have been created with any sparse memory binding flags'
00805	U	Unknown	vkBindImageMemory	'memoryOffset must be less than the size of memory'
00806	U	Unknown	vkBindImageMemory	'memory must have been allocated using one of the memory types allowed in the memoryTypeBits member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements with image'
00807	Y	None	vkBindImageMemory	'device must be a valid VkDevice handle'
00808	Y	BindMemoryToDestroyedObject	vkBindImageMemory	'image must be a valid VkImage handle'
00809	Y	BindInvalidMemory	vkBindImageMemory	'memory must be a valid VkDeviceMemory handle'
00810	U	Unknown	vkBindImageMemory	'image must have been created, allocated, or retrieved from device'
00811	U	Unknown	vkBindImageMemory	'memory must have been created, allocated, or retrieved from device'
00812	Y	None	vkCreateSampler	'device must be a valid VkDevice handle'
00813	U	Unknown	vkCreateSampler	'pCreateInfo must be a pointer to a valid VkSamplerCreateInfo structure'
00814	U	Unknown	vkCreateSampler	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00815	U	Unknown	vkCreateSampler	'pSampler must be a pointer to a VkSampler handle'
00816	U	Unknown	vkCreateSampler	'The absolute value of mipLodBias must be less than or equal to VkPhysicalDeviceLimits::maxSamplerLodBias'
00817	U	Unknown	vkCreateSampler	'If the anisotropic sampling feature is not enabled, anisotropyEnable must be VK_FALSE'
00818	U	Unknown	vkCreateSampler	'If anisotropyEnable is VK_TRUE, maxAnisotropy must be between 1.0 and VkPhysicalDeviceLimits::maxSamplerAnisotropy, inclusive'
00819	U	Unknown	vkCreateSampler	'If unnormalizedCoordinates is VK_TRUE, minFilter and magFilter must be equal'
00820	U	Unknown	vkCreateSampler	'If unnormalizedCoordinates is VK_TRUE, mipmapMode must be VK_SAMPLER_MIPMAP_MODE_NEAREST'
00821	U	Unknown	vkCreateSampler	'If unnormalizedCoordinates is VK_TRUE, minLod and maxLod must be zero'
00822	U	Unknown	vkCreateSampler	'If unnormalizedCoordinates is VK_TRUE, addressModeU and addressModeV must each be either VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE or VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER'
00823	U	Unknown	vkCreateSampler	'If unnormalizedCoordinates is VK_TRUE, anisotropyEnable must be VK_FALSE'
00824	U	Unknown	vkCreateSampler	'If unnormalizedCoordinates is VK_TRUE, compareEnable must be VK_FALSE'
00825	U	Unknown	vkCreateSampler	'If any of addressModeU, addressModeV or addressModeW are VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER, borderColor must be a valid VkBorderColor value'
00826	U	Unknown	vkCreateSampler	'If the VK_KHR_sampler_mirror_clamp_to_edge extension is not enabled, addressModeU, addressModeV and addressModeW must not be VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE'
00827	U	Unknown	vkCreateSampler	'If compareEnable is VK_TRUE, compareOp must be a valid VkCompareOp value'
00828	N	Unknown	vkCreateSampler	'sType must be VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO'
00829	N	Unknown	vkCreateSampler	'pNext must be NULL'
00830	N	Unknown	vkCreateSampler	'flags must be 0'
00831	U	Unknown	vkCreateSampler	'magFilter must be a valid VkFilter value'
00832	U	Unknown	vkCreateSampler	'minFilter must be a valid VkFilter value'
00833	U	Unknown	vkCreateSampler	'mipmapMode must be a valid VkSamplerMipmapMode value'
00834	U	Unknown	vkCreateSampler	'addressModeU must be a valid VkSamplerAddressMode value'
00835	U	Unknown	vkCreateSampler	'addressModeV must be a valid VkSamplerAddressMode value'
00836	U	Unknown	vkCreateSampler	'addressModeW must be a valid VkSamplerAddressMode value'
00837	Y	SamplerInUseDestroyedSignaled	vkDestroySampler	'All submitted commands that refer to sampler must have completed execution'
00838	Y	Unknown	vkDestroySampler	'If VkAllocationCallbacks were provided when sampler was created, a compatible set of callbacks must be provided here'
00839	Y	Unknown	vkDestroySampler	'If no VkAllocationCallbacks were provided when sampler was created, pAllocator must be NULL'
00840	Y	None	vkDestroySampler	'device must be a valid VkDevice handle'
00841	Y	None	vkDestroySampler	'If sampler is not VK_NULL_HANDLE, sampler must be a valid VkSampler handle'
00842	U	Unknown	vkDestroySampler	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00843	U	Unknown	vkDestroySampler	'If sampler is a valid handle, it must have been created, allocated, or retrieved from device'
00844	Y	None	vkCreateDescriptorSetLayout	'device must be a valid VkDevice handle'
00845	U	Unknown	vkCreateDescriptorSetLayout	'pCreateInfo must be a pointer to a valid VkDescriptorSetLayoutCreateInfo structure'
00846	U	Unknown	vkCreateDescriptorSetLayout	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00847	U	Unknown	vkCreateDescriptorSetLayout	'pSetLayout must be a pointer to a VkDescriptorSetLayout handle'
00848	N	Unknown	vkCreateDescriptorSetLayout	'sType must be VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO'
00849	N	Unknown	vkCreateDescriptorSetLayout	'pNext must be NULL'
00850	N	Unknown	vkCreateDescriptorSetLayout	'flags must be 0'
00851	U	Unknown	vkCreateDescriptorSetLayout	'If bindingCount is not 0, pBindings must be a pointer to an array of bindingCount valid VkDescriptorSetLayoutBinding structures'
00852	Y	None	vkCreateDescriptorSetLayout	'If descriptorType is VK_DESCRIPTOR_TYPE_SAMPLER or VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, and descriptorCount is not 0 and pImmutableSamplers is not NULL, pImmutableSamplers must be a pointer to an array of descriptorCount valid VkSampler handles'
00853	U	Unknown	vkCreateDescriptorSetLayout	'If descriptorCount is not 0, stageFlags must be a valid combination of VkShaderStageFlagBits values'
00854	U	Unknown	vkCreateDescriptorSetLayout	'descriptorType must be a valid VkDescriptorType value'
00855	Y	Unknown	vkDestroyDescriptorSetLayout	'If VkAllocationCallbacks were provided when descriptorSetLayout was created, a compatible set of callbacks must be provided here'
00856	Y	Unknown	vkDestroyDescriptorSetLayout	'If no VkAllocationCallbacks were provided when descriptorSetLayout was created, pAllocator must be NULL'
00857	Y	None	vkDestroyDescriptorSetLayout	'device must be a valid VkDevice handle'
00858	Y	None	vkDestroyDescriptorSetLayout	'If descriptorSetLayout is not VK_NULL_HANDLE, descriptorSetLayout must be a valid VkDescriptorSetLayout handle'
00859	U	Unknown	vkDestroyDescriptorSetLayout	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00860	U	Unknown	vkDestroyDescriptorSetLayout	'If descriptorSetLayout is a valid handle, it must have been created, allocated, or retrieved from device'
00861	Y	None	vkCreatePipelineLayout	'device must be a valid VkDevice handle'
00862	U	Unknown	vkCreatePipelineLayout	'pCreateInfo must be a pointer to a valid VkPipelineLayoutCreateInfo structure'
00863	U	Unknown	vkCreatePipelineLayout	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00864	U	Unknown	vkCreatePipelineLayout	'pPipelineLayout must be a pointer to a VkPipelineLayout handle'
00865	N	None	vkCreatePipelineLayout	'setLayoutCount must be less than or equal to VkPhysicalDeviceLimits::maxBoundDescriptorSets'
00866	N	None	vkCreatePipelineLayout	'The total number of descriptors of the type VK_DESCRIPTOR_TYPE_SAMPLER and VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorSamplers'
00867	N	None	vkCreatePipelineLayout	'The total number of descriptors of the type VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER and VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorUniformBuffers'
00868	N	None	vkCreatePipelineLayout	'The total number of descriptors of the type VK_DESCRIPTOR_TYPE_STORAGE_BUFFER and VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorStorageBuffers'
00869	N	None	vkCreatePipelineLayout	'The total number of descriptors of the type VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, and VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorSampledImages'
00870	N	None	vkCreatePipelineLayout	'The total number of descriptors of the type VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, and VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorStorageImages'
00871	N	None	vkCreatePipelineLayout	'Any two elements of pPushConstantRanges must not include the same stage in stageFlags'
00872	N	Unknown	vkCreatePipelineLayout	'sType must be VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO'
00873	N	Unknown	vkCreatePipelineLayout	'pNext must be NULL'
00874	N	Unknown	vkCreatePipelineLayout	'flags must be 0'
00875	Y	InvalidDescriptorSetLayout	vkCreatePipelineLayout	'If setLayoutCount is not 0, pSetLayouts must be a pointer to an array of setLayoutCount valid VkDescriptorSetLayout handles'
00876	U	Unknown	vkCreatePipelineLayout	'If pushConstantRangeCount is not 0, pPushConstantRanges must be a pointer to an array of pushConstantRangeCount valid VkPushConstantRange structures'
00877	Y	InvalidPushConstants	vkCreatePipelineLayout	'offset must be less than VkPhysicalDeviceLimits::maxPushConstantsSize'
00878	Y	InvalidPushConstants	vkCreatePipelineLayout	'size must be greater than 0'
00879	Y	InvalidPushConstants	vkCreatePipelineLayout	'size must be a multiple of 4'
00880	Y	InvalidPushConstants	vkCreatePipelineLayout	'size must be less than or equal to VkPhysicalDeviceLimits::maxPushConstantsSize minus offset'
00881	U	Unknown	vkCreatePipelineLayout	'stageFlags must be a valid combination of VkShaderStageFlagBits values'
00882	U	Unknown	vkCreatePipelineLayout	'stageFlags must not be 0'
00883	Y	Unknown	vkDestroyPipelineLayout	'If VkAllocationCallbacks were provided when pipelineLayout was created, a compatible set of callbacks must be provided here'
00884	Y	Unknown	vkDestroyPipelineLayout	'If no VkAllocationCallbacks were provided when pipelineLayout was created, pAllocator must be NULL'
00885	Y	None	vkDestroyPipelineLayout	'device must be a valid VkDevice handle'
00886	Y	None	vkDestroyPipelineLayout	'If pipelineLayout is not VK_NULL_HANDLE, pipelineLayout must be a valid VkPipelineLayout handle'
00887	U	Unknown	vkDestroyPipelineLayout	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00888	U	Unknown	vkDestroyPipelineLayout	'If pipelineLayout is a valid handle, it must have been created, allocated, or retrieved from device'
00889	Y	None	vkCreateDescriptorPool	'device must be a valid VkDevice handle'
00890	U	Unknown	vkCreateDescriptorPool	'pCreateInfo must be a pointer to a valid VkDescriptorPoolCreateInfo structure'
00891	U	Unknown	vkCreateDescriptorPool	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00892	U	Unknown	vkCreateDescriptorPool	'pDescriptorPool must be a pointer to a VkDescriptorPool handle'
00893	U	Unknown	vkCreateDescriptorPool	'maxSets must be greater than 0'
00894	N	Unknown	vkCreateDescriptorPool	'sType must be VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO'
00895	N	Unknown	vkCreateDescriptorPool	'pNext must be NULL'
00896	N	Unknown	vkCreateDescriptorPool	'flags must be a valid combination of VkDescriptorPoolCreateFlagBits values'
00897	U	Unknown	vkCreateDescriptorPool	'pPoolSizes must be a pointer to an array of poolSizeCount valid VkDescriptorPoolSize structures'
00898	U	Unknown	vkCreateDescriptorPool	'poolSizeCount must be greater than 0'
00899	U	Unknown	vkCreateDescriptorPool	'descriptorCount must be greater than 0'
00900	U	Unknown	vkCreateDescriptorPool	'type must be a valid VkDescriptorType value'
00901	Y	None	vkDestroyDescriptorPool	'All submitted commands that refer to descriptorPool (via any allocated descriptor sets) must have completed execution'
00902	Y	Unknown	vkDestroyDescriptorPool	'If VkAllocationCallbacks were provided when descriptorPool was created, a compatible set of callbacks must be provided here'
00903	Y	Unknown	vkDestroyDescriptorPool	'If no VkAllocationCallbacks were provided when descriptorPool was created, pAllocator must be NULL'
00904	Y	None	vkDestroyDescriptorPool	'device must be a valid VkDevice handle'
00905	Y	None	vkDestroyDescriptorPool	'If descriptorPool is not VK_NULL_HANDLE, descriptorPool must be a valid VkDescriptorPool handle'
00906	U	Unknown	vkDestroyDescriptorPool	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
00907	U	Unknown	vkDestroyDescriptorPool	'If descriptorPool is a valid handle, it must have been created, allocated, or retrieved from device'
00908	Y	None	vkAllocateDescriptorSets	'device must be a valid VkDevice handle'
00909	U	Unknown	vkAllocateDescriptorSets	'pAllocateInfo must be a pointer to a valid VkDescriptorSetAllocateInfo structure'
00910	U	Unknown	vkAllocateDescriptorSets	'pDescriptorSets must be a pointer to an array of pAllocateInfo::descriptorSetCount VkDescriptorSet handles'
00911	Y	AllocDescriptorFromEmptyPool	vkAllocateDescriptorSets	'descriptorSetCount must not be greater than the number of sets that are currently available for allocation in descriptorPool'
00912	Y	AllocDescriptorFromEmptyPool	vkAllocateDescriptorSets	'descriptorPool must have enough free descriptor capacity remaining to allocate the descriptor sets of the specified layouts'
00913	N	Unknown	vkAllocateDescriptorSets	'sType must be VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO'
00914	N	Unknown	vkAllocateDescriptorSets	'pNext must be NULL'
00915	Y	None	vkAllocateDescriptorSets	'descriptorPool must be a valid VkDescriptorPool handle'
00916	Y	None	vkAllocateDescriptorSets	'pSetLayouts must be a pointer to an array of descriptorSetCount valid VkDescriptorSetLayout handles'
00917	U	Unknown	vkAllocateDescriptorSets	'descriptorSetCount must be greater than 0'
00918	U	Unknown	vkAllocateDescriptorSets	'Both of descriptorPool, and the elements of pSetLayouts must have been created, allocated, or retrieved from the same VkDevice'
00919	Y	InvalidCmdBufferDescriptorSetImageSamplerDestroyed	vkFreeDescriptorSets	'All submitted commands that refer to any element of pDescriptorSets must have completed execution'
00920	Y	Unknown	vkFreeDescriptorSets	'pDescriptorSets must be a pointer to an array of descriptorSetCount VkDescriptorSet handles, each element of which must either be a valid handle or VK_NULL_HANDLE'
00921	U	Unknown	vkFreeDescriptorSets	'Each valid handle in pDescriptorSets must have been allocated from descriptorPool'
00922	Y	FreeDescriptorFromOneShotPool	vkFreeDescriptorSets	'descriptorPool must have been created with the VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT flag'
00923	Y	None	vkFreeDescriptorSets	'device must be a valid VkDevice handle'
00924	Y	None	vkFreeDescriptorSets	'descriptorPool must be a valid VkDescriptorPool handle'
00925	U	Unknown	vkFreeDescriptorSets	'descriptorSetCount must be greater than 0'
00926	U	Unknown	vkFreeDescriptorSets	'descriptorPool must have been created, allocated, or retrieved from device'
00927	Y	Unknown	vkFreeDescriptorSets	'Each element of pDescriptorSets that is a valid handle must have been created, allocated, or retrieved from descriptorPool'
00928	U	Unknown	vkResetDescriptorPool	'All uses of descriptorPool (via any allocated descriptor sets) must have completed execution'
00929	Y	None	vkResetDescriptorPool	'device must be a valid VkDevice handle'
00930	Y	InvalidDescriptorPool	vkResetDescriptorPool	'descriptorPool must be a valid VkDescriptorPool handle'
00931	N	Unknown	vkResetDescriptorPool	'flags must be 0'
00932	U	Unknown	vkResetDescriptorPool	'descriptorPool must have been created, allocated, or retrieved from device'
00933	Y	None	vkUpdateDescriptorSets	'device must be a valid VkDevice handle'
00934	U	Unknown	vkUpdateDescriptorSets	'If descriptorWriteCount is not 0, pDescriptorWrites must be a pointer to an array of descriptorWriteCount valid VkWriteDescriptorSet structures'
00935	U	Unknown	vkUpdateDescriptorSets	'If descriptorCopyCount is not 0, pDescriptorCopies must be a pointer to an array of descriptorCopyCount valid VkCopyDescriptorSet structures'
00936	Y	InvalidDSUpdateIndex	vkUpdateDescriptorSets	'dstBinding must be less than or equal to the maximum value of binding of all VkDescriptorSetLayoutBinding structures specified when dstSets descriptor set layout was created'
00937	Y	Unknown	vkUpdateDescriptorSets	'descriptorType must match the type of dstBinding within dstSet'
00938	Y	WriteDescriptorSetIntegrityCheck,DSUpdateOutOfBounds	vkUpdateDescriptorSets	'The sum of dstArrayElement and descriptorCount must be less than or equal to the number of array elements in the descriptor set binding specified by dstBinding, and all applicable consecutive bindings, as described by consecutive binding updates'
00939	U	Unknown	vkUpdateDescriptorSets	'If descriptorType is VK_DESCRIPTOR_TYPE_SAMPLER, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, or VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, pImageInfo must be a pointer to an array of descriptorCount valid VkDescriptorImageInfo structures'
00940	Y	InvalidBufferViewObject	vkUpdateDescriptorSets	'If descriptorType is VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER or VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER, pTexelBufferView must be a pointer to an array of descriptorCount valid VkBufferView handles'
00941	U	Unknown	vkUpdateDescriptorSets	'If descriptorType is VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, pBufferInfo must be a pointer to an array of descriptorCount valid VkDescriptorBufferInfo structures'
00942	Y	SampleDescriptorUpdateError	vkUpdateDescriptorSets	'If descriptorType is VK_DESCRIPTOR_TYPE_SAMPLER or VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, and dstSet was not allocated with a layout that included immutable samplers for dstBinding with descriptorType, the sampler member of any given element of pImageInfo must be a valid VkSampler object'
00943	Y	ImageViewDescriptorUpdateError	vkUpdateDescriptorSets	'If descriptorType is VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, or VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, the imageView and imageLayout members of any given element of pImageInfo must be a valid VkImageView and VkImageLayout, respectively'
00944	N	None	vkUpdateDescriptorSets	'If descriptorType is VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER or VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, the offset member of any given element of pBufferInfo must be a multiple of VkPhysicalDeviceLimits::minUniformBufferOffsetAlignment'
00945	N	None	vkUpdateDescriptorSets	'If descriptorType is VK_DESCRIPTOR_TYPE_STORAGE_BUFFER or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, the offset member of any given element of pBufferInfo must be a multiple of VkPhysicalDeviceLimits::minStorageBufferOffsetAlignment'
00946	Y	DSUsageBitsErrors	vkUpdateDescriptorSets	'If descriptorType is VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER or VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, the buffer member of any given element of pBufferInfo must have been created with VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT set'
00947	Y	DSUsageBitsErrors	vkUpdateDescriptorSets	'If descriptorType is VK_DESCRIPTOR_TYPE_STORAGE_BUFFER or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, the buffer member of any given element of pBufferInfo must have been created with VK_BUFFER_USAGE_STORAGE_BUFFER_BIT set'
00948	N	None	vkUpdateDescriptorSets	'If descriptorType is VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER or VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, the range member of any given element of pBufferInfo, or the effective range if range is VK_WHOLE_SIZE, must be less than or equal to VkPhysicalDeviceLimits::maxUniformBufferRange'
00949	N	None	vkUpdateDescriptorSets	'If descriptorType is VK_DESCRIPTOR_TYPE_STORAGE_BUFFER or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, the range member of any given element of pBufferInfo, or the effective range if range is VK_WHOLE_SIZE, must be less than or equal to VkPhysicalDeviceLimits::maxStorageBufferRange'
00950	Y	DSUsageBitsErrors	vkUpdateDescriptorSets	'If descriptorType is VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER, the VkBuffer that any given element of pTexelBufferView was created from must have been created with VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT set'
00951	Y	DSUsageBitsErrors	vkUpdateDescriptorSets	'If descriptorType is VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER, the VkBuffer that any given element of pTexelBufferView was created from must have been created with VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT set'
00952	N	None	vkUpdateDescriptorSets	'If descriptorType is VK_DESCRIPTOR_TYPE_STORAGE_IMAGE or VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, the imageView member of any given element of pImageInfo must have been created with the identity swizzle'
00953	N	Unknown	vkUpdateDescriptorSets	'sType must be VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET'
00954	N	Unknown	vkUpdateDescriptorSets	'pNext must be NULL'
00955	Y	None	vkUpdateDescriptorSets	'dstSet must be a valid VkDescriptorSet handle'
00956	U	Unknown	vkUpdateDescriptorSets	'descriptorType must be a valid VkDescriptorType value'
00957	U	Unknown	vkUpdateDescriptorSets	'descriptorCount must be greater than 0'
00958	U	Unknown	vkUpdateDescriptorSets	'Both of dstSet, and the elements of pTexelBufferView that are valid handles must have been created, allocated, or retrieved from the same VkDevice'
00959	Y	DSBufferInfoErrors	vkUpdateDescriptorSets	'offset must be less than the size of buffer'
00960	Y	DSBufferInfoErrors	vkUpdateDescriptorSets	'If range is not equal to VK_WHOLE_SIZE, range must be greater than 0'
00961	Y	DSBufferInfoErrors	vkUpdateDescriptorSets	'If range is not equal to VK_WHOLE_SIZE, range must be less than or equal to the size of buffer minus offset'
00962	Y	WriteDescriptorSetIntegrityCheck	vkUpdateDescriptorSets	'buffer must be a valid VkBuffer handle'
00963	U	Unknown	vkUpdateDescriptorSets	'Both of imageView, and sampler that are valid handles must have been created, allocated, or retrieved from the same VkDevice'
00964	Y	Unknown	vkUpdateDescriptorSets	'srcBinding must be a valid binding within srcSet'
00965	Y	Unknown	vkUpdateDescriptorSets	'The sum of srcArrayElement and descriptorCount must be less than or equal to the number of array elements in the descriptor set binding specified by srcBinding, and all applicable consecutive bindings, as described by consecutive binding updates'
00966	Y	Unknown	vkUpdateDescriptorSets	'dstBinding must be a valid binding within dstSet'
00967	Y	Unknown	vkUpdateDescriptorSets	'The sum of dstArrayElement and descriptorCount must be less than or equal to the number of array elements in the descriptor set binding specified by dstBinding, and all applicable consecutive bindings, as described by consecutive binding updates'
00968	Y	Unknown	vkUpdateDescriptorSets	'If srcSet is equal to dstSet, then the source and destination ranges of descriptors must not overlap, where the ranges may include array elements from consecutive bindings as described by consecutive binding updates'
00969	N	Unknown	vkUpdateDescriptorSets	'sType must be VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET'
00970	N	Unknown	vkUpdateDescriptorSets	'pNext must be NULL'
00971	Y	None	vkUpdateDescriptorSets	'srcSet must be a valid VkDescriptorSet handle'
00972	Y	None	vkUpdateDescriptorSets	'dstSet must be a valid VkDescriptorSet handle'
00973	U	Unknown	vkUpdateDescriptorSets	'Both of dstSet, and srcSet must have been created, allocated, or retrieved from the same VkDevice'
00974	U	Unknown	vkCmdBindDescriptorSets	'Any given element of pDescriptorSets must have been allocated with a VkDescriptorSetLayout that matches (is the same as, or defined identically to) the VkDescriptorSetLayout at set n in layout, where n is the sum of firstSet and the index into pDescriptorSets'
00975	U	Unknown	vkCmdBindDescriptorSets	'dynamicOffsetCount must be equal to the total number of dynamic descriptors in pDescriptorSets'
00976	U	Unknown	vkCmdBindDescriptorSets	'The sum of firstSet and descriptorSetCount must be less than or equal to VkPipelineLayoutCreateInfo::setLayoutCount provided when layout was created'
00977	U	Unknown	vkCmdBindDescriptorSets	'pipelineBindPoint must be supported by the commandBuffers parent VkCommandPools queue family'
00978	U	Unknown	vkCmdBindDescriptorSets	'Any given element of pDynamicOffsets must satisfy the required alignment for the corresponding descriptor bindings descriptor type'
00979	Y	None	vkCmdBindDescriptorSets	'commandBuffer must be a valid VkCommandBuffer handle'
00980	U	Unknown	vkCmdBindDescriptorSets	'pipelineBindPoint must be a valid VkPipelineBindPoint value'
00981	Y	DescriptorSetCompatibility	vkCmdBindDescriptorSets	'layout must be a valid VkPipelineLayout handle'
00982	Y	InvalidDescriptorSet	vkCmdBindDescriptorSets	'pDescriptorSets must be a pointer to an array of descriptorSetCount valid VkDescriptorSet handles'
00983	U	Unknown	vkCmdBindDescriptorSets	'If dynamicOffsetCount is not 0, pDynamicOffsets must be a pointer to an array of dynamicOffsetCount uint32_t values'
00984	U	Unknown	vkCmdBindDescriptorSets	'commandBuffer must be in the recording state'
00985	U	Unknown	vkCmdBindDescriptorSets	'The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations'
00986	U	Unknown	vkCmdBindDescriptorSets	'descriptorSetCount must be greater than 0'
00987	U	Unknown	vkCmdBindDescriptorSets	'Each of commandBuffer, layout, and the elements of pDescriptorSets must have been created, allocated, or retrieved from the same VkDevice'
00988	U	Unknown	vkCmdPushConstants	'stageFlags must match exactly the shader stages used in layout for the range specified by offset and size'
00989	U	Unknown	vkCmdPushConstants	'offset must be a multiple of 4'
00990	U	Unknown	vkCmdPushConstants	'size must be a multiple of 4'
00991	U	Unknown	vkCmdPushConstants	'offset must be less than VkPhysicalDeviceLimits::maxPushConstantsSize'
00992	U	Unknown	vkCmdPushConstants	'size must be less than or equal to VkPhysicalDeviceLimits::maxPushConstantsSize minus offset'
00993	Y	None	vkCmdPushConstants	'commandBuffer must be a valid VkCommandBuffer handle'
00994	Y	None	vkCmdPushConstants	'layout must be a valid VkPipelineLayout handle'
00995	U	Unknown	vkCmdPushConstants	'stageFlags must be a valid combination of VkShaderStageFlagBits values'
00996	U	Unknown	vkCmdPushConstants	'stageFlags must not be 0'
00997	U	Unknown	vkCmdPushConstants	'pValues must be a pointer to an array of size bytes'
00998	U	Unknown	vkCmdPushConstants	'commandBuffer must be in the recording state'
00999	U	Unknown	vkCmdPushConstants	'The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations'
01000	U	Unknown	vkCmdPushConstants	'size must be greater than 0'
01001	U	Unknown	vkCmdPushConstants	'Both of commandBuffer, and layout must have been created, allocated, or retrieved from the same VkDevice'
01002	Y	None	vkCreateQueryPool	'device must be a valid VkDevice handle'
01003	U	Unknown	vkCreateQueryPool	'pCreateInfo must be a pointer to a valid VkQueryPoolCreateInfo structure'
01004	U	Unknown	vkCreateQueryPool	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
01005	U	Unknown	vkCreateQueryPool	'pQueryPool must be a pointer to a VkQueryPool handle'
01006	Y	InvalidQueryPoolCreate	vkCreateQueryPool	'If the pipeline statistics queries feature is not enabled, queryType must not be VK_QUERY_TYPE_PIPELINE_STATISTICS'
01007	U	Unknown	vkCreateQueryPool	'If queryType is VK_QUERY_TYPE_PIPELINE_STATISTICS, pipelineStatistics must be a valid combination of VkQueryPipelineStatisticFlagBits values'
01008	N	Unknown	vkCreateQueryPool	'sType must be VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO'
01009	N	Unknown	vkCreateQueryPool	'pNext must be NULL'
01010	N	Unknown	vkCreateQueryPool	'flags must be 0'
01011	U	Unknown	vkCreateQueryPool	'queryType must be a valid VkQueryType value'
01012	Y	QueryPoolInUseDestroyedSignaled	vkDestroyQueryPool	'All submitted commands that refer to queryPool must have completed execution'
01013	Y	Unknown	vkDestroyQueryPool	'If VkAllocationCallbacks were provided when queryPool was created, a compatible set of callbacks must be provided here'
01014	Y	Unknown	vkDestroyQueryPool	'If no VkAllocationCallbacks were provided when queryPool was created, pAllocator must be NULL'
01015	Y	None	vkDestroyQueryPool	'device must be a valid VkDevice handle'
01016	Y	None	vkDestroyQueryPool	'If queryPool is not VK_NULL_HANDLE, queryPool must be a valid VkQueryPool handle'
01017	U	Unknown	vkDestroyQueryPool	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
01018	U	Unknown	vkDestroyQueryPool	'If queryPool is a valid handle, it must have been created, allocated, or retrieved from device'
01019	U	Unknown	vkCmdResetQueryPool	'firstQuery must be less than the number of queries in queryPool'
01020	U	Unknown	vkCmdResetQueryPool	'The sum of firstQuery and queryCount must be less than or equal to the number of queries in queryPool'
01021	Y	None	vkCmdResetQueryPool	'commandBuffer must be a valid VkCommandBuffer handle'
01022	Y	None	vkCmdResetQueryPool	'queryPool must be a valid VkQueryPool handle'
01023	U	Unknown	vkCmdResetQueryPool	'commandBuffer must be in the recording state'
01024	U	Unknown	vkCmdResetQueryPool	'The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations'
01025	U	Unknown	vkCmdResetQueryPool	'This command must only be called outside of a render pass instance'
01026	U	Unknown	vkCmdResetQueryPool	'Both of commandBuffer, and queryPool must have been created, allocated, or retrieved from the same VkDevice'
01027	U	Unknown	vkCmdBeginQuery	'The query identified by queryPool and query must currently not be active'
01028	U	Unknown	vkCmdBeginQuery	'The query identified by queryPool and query must be unavailable'
01029	U	Unknown	vkCmdBeginQuery	'If the precise occlusion queries feature is not enabled, or the queryType used to create queryPool was not VK_QUERY_TYPE_OCCLUSION, flags must not contain VK_QUERY_CONTROL_PRECISE_BIT'
01030	U	Unknown	vkCmdBeginQuery	'queryPool must have been created with a queryType that differs from that of any other queries that have been made active, and are currently still active within commandBuffer'
01031	U	Unknown	vkCmdBeginQuery	'query must be less than the number of queries in queryPool'
01032	U	Unknown	vkCmdBeginQuery	'If the queryType used to create queryPool was VK_QUERY_TYPE_OCCLUSION, the VkCommandPool that commandBuffer was allocated from must support graphics operations'
01033	U	Unknown	vkCmdBeginQuery	'If the queryType used to create queryPool was VK_QUERY_TYPE_PIPELINE_STATISTICS and any of the pipelineStatistics indicate graphics operations, the VkCommandPool that commandBuffer was allocated from must support graphics operations'
01034	U	Unknown	vkCmdBeginQuery	'If the queryType used to create queryPool was VK_QUERY_TYPE_PIPELINE_STATISTICS and any of the pipelineStatistics indicate compute operations, the VkCommandPool that commandBuffer was allocated from must support compute operations'
01035	Y	None	vkCmdBeginQuery	'commandBuffer must be a valid VkCommandBuffer handle'
01036	Y	None	vkCmdBeginQuery	'queryPool must be a valid VkQueryPool handle'
01037	N	Unknown	vkCmdBeginQuery	'flags must be a valid combination of VkQueryControlFlagBits values'
01038	U	Unknown	vkCmdBeginQuery	'commandBuffer must be in the recording state'
01039	U	Unknown	vkCmdBeginQuery	'The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations'
01040	U	Unknown	vkCmdBeginQuery	'Both of commandBuffer, and queryPool must have been created, allocated, or retrieved from the same VkDevice'
01041	U	Unknown	vkCmdEndQuery	'The query identified by queryPool and query must currently be active'
01042	U	Unknown	vkCmdEndQuery	'query must be less than the number of queries in queryPool'
01043	Y	None	vkCmdEndQuery	'commandBuffer must be a valid VkCommandBuffer handle'
01044	Y	None	vkCmdEndQuery	'queryPool must be a valid VkQueryPool handle'
01045	U	Unknown	vkCmdEndQuery	'commandBuffer must be in the recording state'
01046	U	Unknown	vkCmdEndQuery	'The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations'
01047	U	Unknown	vkCmdEndQuery	'Both of commandBuffer, and queryPool must have been created, allocated, or retrieved from the same VkDevice'
01048	U	Unknown	vkGetQueryPoolResults	'firstQuery must be less than the number of queries in queryPool'
01049	U	Unknown	vkGetQueryPoolResults	'If VK_QUERY_RESULT_64_BIT is not set in flags then pData and stride must be multiples of 4'
01050	U	Unknown	vkGetQueryPoolResults	'If VK_QUERY_RESULT_64_BIT is set in flags then pData and stride must be multiples of 8'
01051	U	Unknown	vkGetQueryPoolResults	'The sum of firstQuery and queryCount must be less than or equal to the number of queries in queryPool'
01052	U	Unknown	vkGetQueryPoolResults	'dataSize must be large enough to contain the result of each query, as described here'
01053	U	Unknown	vkGetQueryPoolResults	'If the queryType used to create queryPool was VK_QUERY_TYPE_TIMESTAMP, flags must not contain VK_QUERY_RESULT_PARTIAL_BIT'
01054	Y	None	vkGetQueryPoolResults	'device must be a valid VkDevice handle'
01055	Y	None	vkGetQueryPoolResults	'queryPool must be a valid VkQueryPool handle'
01056	U	Unknown	vkGetQueryPoolResults	'pData must be a pointer to an array of dataSize bytes'
01057	N	Unknown	vkGetQueryPoolResults	'flags must be a valid combination of VkQueryResultFlagBits values'
01058	U	Unknown	vkGetQueryPoolResults	'dataSize must be greater than 0'
01059	U	Unknown	vkGetQueryPoolResults	'queryPool must have been created, allocated, or retrieved from device'
01060	U	Unknown	vkCmdCopyQueryPoolResults	'dstOffset must be less than the size of dstBuffer'
01061	U	Unknown	vkCmdCopyQueryPoolResults	'firstQuery must be less than the number of queries in queryPool'
01062	U	Unknown	vkCmdCopyQueryPoolResults	'The sum of firstQuery and queryCount must be less than or equal to the number of queries in queryPool'
01063	U	Unknown	vkCmdCopyQueryPoolResults	'If VK_QUERY_RESULT_64_BIT is not set in flags then dstOffset and stride must be multiples of 4'
01064	U	Unknown	vkCmdCopyQueryPoolResults	'If VK_QUERY_RESULT_64_BIT is set in flags then dstOffset and stride must be multiples of 8'
01065	U	Unknown	vkCmdCopyQueryPoolResults	'dstBuffer must have enough storage, from dstOffset, to contain the result of each query, as described here'
01066	Y	None	vkCmdCopyQueryPoolResults	'dstBuffer must have been created with VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag'
01067	U	Unknown	vkCmdCopyQueryPoolResults	'If the queryType used to create queryPool was VK_QUERY_TYPE_TIMESTAMP, flags must not contain VK_QUERY_RESULT_PARTIAL_BIT'
01068	Y	None	vkCmdCopyQueryPoolResults	'commandBuffer must be a valid VkCommandBuffer handle'
01069	Y	None	vkCmdCopyQueryPoolResults	'queryPool must be a valid VkQueryPool handle'
01070	Y	None	vkCmdCopyQueryPoolResults	'dstBuffer must be a valid VkBuffer handle'
01071	N	Unknown	vkCmdCopyQueryPoolResults	'flags must be a valid combination of VkQueryResultFlagBits values'
01072	U	Unknown	vkCmdCopyQueryPoolResults	'commandBuffer must be in the recording state'
01073	U	Unknown	vkCmdCopyQueryPoolResults	'The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations'
01074	U	Unknown	vkCmdCopyQueryPoolResults	'This command must only be called outside of a render pass instance'
01075	U	Unknown	vkCmdCopyQueryPoolResults	'Each of commandBuffer, dstBuffer, and queryPool must have been created, allocated, or retrieved from the same VkDevice'
01076	U	Unknown	vkCmdWriteTimestamp	'The query identified by queryPool and query must be unavailable'
01077	U	Unknown	vkCmdWriteTimestamp	'The command pools queue family must support a non-zero timestampValidBits'
01078	Y	None	vkCmdWriteTimestamp	'commandBuffer must be a valid VkCommandBuffer handle'
01079	U	Unknown	vkCmdWriteTimestamp	'pipelineStage must be a valid VkPipelineStageFlagBits value'
01080	Y	None	vkCmdWriteTimestamp	'queryPool must be a valid VkQueryPool handle'
01081	U	Unknown	vkCmdWriteTimestamp	'commandBuffer must be in the recording state'
01082	U	Unknown	vkCmdWriteTimestamp	'The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations'
01083	U	Unknown	vkCmdWriteTimestamp	'Both of commandBuffer, and queryPool must have been created, allocated, or retrieved from the same VkDevice'
01084	U	Unknown	vkCmdClearColorImage	'image must have been created with VK_IMAGE_USAGE_TRANSFER_DST_BIT usage flag'
01085	Y	InvalidImageLayout	vkCmdClearColorImage	'imageLayout must specify the layout of the image subresource ranges of image specified in pRanges at the time this command is executed on a VkDevice'
01086	Y	InvalidImageLayout	vkCmdClearColorImage	'imageLayout must be either of VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL'
01087	U	Unknown	vkCmdClearColorImage	'The image range of any given element of pRanges must be an image subresource range that is contained within image'
01088	U	Unknown	vkCmdClearColorImage	'image must not have a compressed or depth/stencil format'
01089	Y	None	vkCmdClearColorImage	'commandBuffer must be a valid VkCommandBuffer handle'
01090	Y	None	vkCmdClearColorImage	'image must be a valid VkImage handle'
01091	U	Unknown	vkCmdClearColorImage	'imageLayout must be a valid VkImageLayout value'
01092	U	Unknown	vkCmdClearColorImage	'pColor must be a pointer to a valid VkClearColorValue union'
01093	U	Unknown	vkCmdClearColorImage	'pRanges must be a pointer to an array of rangeCount valid VkImageSubresourceRange structures'
01094	U	Unknown	vkCmdClearColorImage	'commandBuffer must be in the recording state'
01095	U	Unknown	vkCmdClearColorImage	'The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations'
01096	U	Unknown	vkCmdClearColorImage	'This command must only be called outside of a render pass instance'
01097	U	Unknown	vkCmdClearColorImage	'rangeCount must be greater than 0'
01098	U	Unknown	vkCmdClearColorImage	'Both of commandBuffer, and image must have been created, allocated, or retrieved from the same VkDevice'
01099	U	Unknown	vkCmdClearDepthStencilImage	'image must have been created with VK_IMAGE_USAGE_TRANSFER_DST_BIT usage flag'
01100	Y	InvalidImageLayout	vkCmdClearDepthStencilImage	'imageLayout must specify the layout of the image subresource ranges of image specified in pRanges at the time this command is executed on a VkDevice'
01101	Y	InvalidImageLayout	vkCmdClearDepthStencilImage	'imageLayout must be either of VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL'
01102	U	Unknown	vkCmdClearDepthStencilImage	'The image range of any given element of pRanges must be an image subresource range that is contained within image'
01103	U	Unknown	vkCmdClearDepthStencilImage	'image must have a depth/stencil format'
01104	Y	None	vkCmdClearDepthStencilImage	'commandBuffer must be a valid VkCommandBuffer handle'
01105	Y	None	vkCmdClearDepthStencilImage	'image must be a valid VkImage handle'
01106	U	Unknown	vkCmdClearDepthStencilImage	'imageLayout must be a valid VkImageLayout value'
01107	U	Unknown	vkCmdClearDepthStencilImage	'pDepthStencil must be a pointer to a valid VkClearDepthStencilValue structure'
01108	U	Unknown	vkCmdClearDepthStencilImage	'pRanges must be a pointer to an array of rangeCount valid VkImageSubresourceRange structures'
01109	U	Unknown	vkCmdClearDepthStencilImage	'commandBuffer must be in the recording state'
01110	U	Unknown	vkCmdClearDepthStencilImage	'The VkCommandPool that commandBuffer was allocated from must support graphics operations'
01111	U	Unknown	vkCmdClearDepthStencilImage	'This command must only be called outside of a render pass instance'
01112	U	Unknown	vkCmdClearDepthStencilImage	'rangeCount must be greater than 0'
01113	U	Unknown	vkCmdClearDepthStencilImage	'Both of commandBuffer, and image must have been created, allocated, or retrieved from the same VkDevice'
01114	Y	MissingClearAttachment	vkCmdClearAttachments	'If the aspectMask member of any given element of pAttachments contains VK_IMAGE_ASPECT_COLOR_BIT, the colorAttachment member of those elements must refer to a valid color attachment in the current subpass'
01115	U	Unknown	vkCmdClearAttachments	'The rectangular region specified by a given element of pRects must be contained within the render area of the current render pass instance'
01116	U	Unknown	vkCmdClearAttachments	'The layers specified by a given element of pRects must be contained within every attachment that pAttachments refers to'
01117	Y	None	vkCmdClearAttachments	'commandBuffer must be a valid VkCommandBuffer handle'
01118	U	Unknown	vkCmdClearAttachments	'pAttachments must be a pointer to an array of attachmentCount valid VkClearAttachment structures'
01119	U	Unknown	vkCmdClearAttachments	'pRects must be a pointer to an array of rectCount VkClearRect structures'
01120	U	Unknown	vkCmdClearAttachments	'commandBuffer must be in the recording state'
01121	U	Unknown	vkCmdClearAttachments	'The VkCommandPool that commandBuffer was allocated from must support graphics operations'
01122	U	Unknown	vkCmdClearAttachments	'This command must only be called inside of a render pass instance'
01123	U	Unknown	vkCmdClearAttachments	'attachmentCount must be greater than 0'
01124	U	Unknown	vkCmdClearAttachments	'rectCount must be greater than 0'
01125	Y	None	vkCmdClearAttachments	'If aspectMask includes VK_IMAGE_ASPECT_COLOR_BIT, it must not include VK_IMAGE_ASPECT_DEPTH_BIT or VK_IMAGE_ASPECT_STENCIL_BIT'
01126	U	Unknown	vkCmdClearAttachments	'aspectMask must not include VK_IMAGE_ASPECT_METADATA_BIT'
01127	U	Unknown	vkCmdClearAttachments	'aspectMask must be a valid combination of VkImageAspectFlagBits values'
01128	U	Unknown	vkCmdClearAttachments	'aspectMask must not be 0'
01129	U	Unknown	vkCmdClearAttachments	'clearValue must be a valid VkClearValue union'
01130	U	Unknown	vkCmdClearAttachments	'depth must be between 0.0 and 1.0, inclusive'
01131	U	Unknown	vkCmdClearAttachments	'depthStencil must be a valid VkClearDepthStencilValue structure'
01132	U	Unknown	vkCmdFillBuffer	'dstOffset must be less than the size of dstBuffer'
01133	U	Unknown	vkCmdFillBuffer	'dstOffset must be a multiple of 4'
01134	U	Unknown	vkCmdFillBuffer	'If size is not equal to VK_WHOLE_SIZE, size must be greater than 0'
01135	U	Unknown	vkCmdFillBuffer	'If size is not equal to VK_WHOLE_SIZE, size must be less than or equal to the size of dstBuffer minus dstOffset'
01136	U	Unknown	vkCmdFillBuffer	'If size is not equal to VK_WHOLE_SIZE, size must be a multiple of 4'
01137	Y	None	vkCmdFillBuffer	'dstBuffer must have been created with VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag'
01138	Y	None	vkCmdFillBuffer	'commandBuffer must be a valid VkCommandBuffer handle'
01139	Y	None	vkCmdFillBuffer	'dstBuffer must be a valid VkBuffer handle'
01140	U	Unknown	vkCmdFillBuffer	'commandBuffer must be in the recording state'
01141	U	Unknown	vkCmdFillBuffer	'The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations'
01142	U	Unknown	vkCmdFillBuffer	'This command must only be called outside of a render pass instance'
01143	U	Unknown	vkCmdFillBuffer	'Both of commandBuffer, and dstBuffer must have been created, allocated, or retrieved from the same VkDevice'
01144	U	Unknown	vkCmdUpdateBuffer	'dstOffset must be less than the size of dstBuffer'
01145	U	Unknown	vkCmdUpdateBuffer	'dataSize must be less than or equal to the size of dstBuffer minus dstOffset'
01146	Y	None	vkCmdUpdateBuffer	'dstBuffer must have been created with VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag'
01147	U	Unknown	vkCmdUpdateBuffer	'dstOffset must be a multiple of 4'
01148	U	Unknown	vkCmdUpdateBuffer	'dataSize must be less than or equal to 65536'
01149	U	Unknown	vkCmdUpdateBuffer	'dataSize must be a multiple of 4'
01150	Y	None	vkCmdUpdateBuffer	'commandBuffer must be a valid VkCommandBuffer handle'
01151	Y	None	vkCmdUpdateBuffer	'dstBuffer must be a valid VkBuffer handle'
01152	U	Unknown	vkCmdUpdateBuffer	'pData must be a pointer to an array of dataSize bytes'
01153	U	Unknown	vkCmdUpdateBuffer	'commandBuffer must be in the recording state'
01154	U	Unknown	vkCmdUpdateBuffer	'The VkCommandPool that commandBuffer was allocated from must support transfer, graphics, or compute operations'
01155	U	Unknown	vkCmdUpdateBuffer	'This command must only be called outside of a render pass instance'
01156	U	Unknown	vkCmdUpdateBuffer	'dataSize must be greater than 0'
01157	U	Unknown	vkCmdUpdateBuffer	'Both of commandBuffer, and dstBuffer must have been created, allocated, or retrieved from the same VkDevice'
01158	U	Unknown	vkCmdCopyBuffer	'The size member of a given element of pRegions must be greater than 0'
01159	U	Unknown	vkCmdCopyBuffer	'The srcOffset member of a given element of pRegions must be less than the size of srcBuffer'
01160	U	Unknown	vkCmdCopyBuffer	'The dstOffset member of a given element of pRegions must be less than the size of dstBuffer'
01161	U	Unknown	vkCmdCopyBuffer	'The size member of a given element of pRegions must be less than or equal to the size of srcBuffer minus srcOffset'
01162	U	Unknown	vkCmdCopyBuffer	'The size member of a given element of pRegions must be less than or equal to the size of dstBuffer minus dstOffset'
01163	U	Unknown	vkCmdCopyBuffer	'The union of the source regions, and the union of the destination regions, specified by the elements of pRegions, must not overlap in memory'
01164	Y	None	vkCmdCopyBuffer	'srcBuffer must have been created with VK_BUFFER_USAGE_TRANSFER_SRC_BIT usage flag'
01165	Y	None	vkCmdCopyBuffer	'dstBuffer must have been created with VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag'
01166	Y	None	vkCmdCopyBuffer	'commandBuffer must be a valid VkCommandBuffer handle'
01167	Y	None	vkCmdCopyBuffer	'srcBuffer must be a valid VkBuffer handle'
01168	Y	None	vkCmdCopyBuffer	'dstBuffer must be a valid VkBuffer handle'
01169	U	Unknown	vkCmdCopyBuffer	'pRegions must be a pointer to an array of regionCount VkBufferCopy structures'
01170	U	Unknown	vkCmdCopyBuffer	'commandBuffer must be in the recording state'
01171	U	Unknown	vkCmdCopyBuffer	'The VkCommandPool that commandBuffer was allocated from must support transfer, graphics, or compute operations'
01172	U	Unknown	vkCmdCopyBuffer	'This command must only be called outside of a render pass instance'
01173	U	Unknown	vkCmdCopyBuffer	'regionCount must be greater than 0'
01174	U	Unknown	vkCmdCopyBuffer	'Each of commandBuffer, dstBuffer, and srcBuffer must have been created, allocated, or retrieved from the same VkDevice'
01175	Y	CopyImageSrcSizeExceeded	vkCmdCopyImage	'The source region specified by a given element of pRegions must be a region that is contained within srcImage'
01176	Y	CopyImageDstSizeExceeded	vkCmdCopyImage	'The destination region specified by a given element of pRegions must be a region that is contained within dstImage'
01177	U	Unknown	vkCmdCopyImage	'The union of all source regions, and the union of all destination regions, specified by the elements of pRegions, must not overlap in memory'
01178	Y	None	vkCmdCopyImage	'srcImage must have been created with VK_IMAGE_USAGE_TRANSFER_SRC_BIT usage flag'
01179	U	Unknown	vkCmdCopyImage	'srcImageLayout must specify the layout of the image subresources of srcImage specified in pRegions at the time this command is executed on a VkDevice'
01180	U	Unknown	vkCmdCopyImage	'srcImageLayout must be either of VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL'
01181	Y	None	vkCmdCopyImage	'dstImage must have been created with VK_IMAGE_USAGE_TRANSFER_DST_BIT usage flag'
01182	U	Unknown	vkCmdCopyImage	'dstImageLayout must specify the layout of the image subresources of dstImage specified in pRegions at the time this command is executed on a VkDevice'
01183	U	Unknown	vkCmdCopyImage	'dstImageLayout must be either of VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL'
01184	Y	CopyImageFormatSizeMismatch	vkCmdCopyImage	'The VkFormat of each of srcImage and dstImage must be compatible, as defined below'
01185	U	Unknown	vkCmdCopyImage	'The sample count of srcImage and dstImage must match'
01186	Y	None	vkCmdCopyImage	'commandBuffer must be a valid VkCommandBuffer handle'
01187	Y	None	vkCmdCopyImage	'srcImage must be a valid VkImage handle'
01188	U	Unknown	vkCmdCopyImage	'srcImageLayout must be a valid VkImageLayout value'
01189	Y	None	vkCmdCopyImage	'dstImage must be a valid VkImage handle'
01190	U	Unknown	vkCmdCopyImage	'dstImageLayout must be a valid VkImageLayout value'
01191	U	Unknown	vkCmdCopyImage	'pRegions must be a pointer to an array of regionCount valid VkImageCopy structures'
01192	U	Unknown	vkCmdCopyImage	'commandBuffer must be in the recording state'
01193	U	Unknown	vkCmdCopyImage	'The VkCommandPool that commandBuffer was allocated from must support transfer, graphics, or compute operations'
01194	U	Unknown	vkCmdCopyImage	'This command must only be called outside of a render pass instance'
01195	U	Unknown	vkCmdCopyImage	'regionCount must be greater than 0'
01196	U	Unknown	vkCmdCopyImage	'Each of commandBuffer, dstImage, and srcImage must have been created, allocated, or retrieved from the same VkDevice'
01197	U	Unknown	vkCmdCopyImage	'The aspectMask member of srcSubresource and dstSubresource must match'
01198	Y	CopyImageLayerCountMismatch	vkCmdCopyImage	'The layerCount member of srcSubresource and dstSubresource must match'
01199	U	Unknown	vkCmdCopyImage	'If either of the calling commands srcImage or dstImage parameters are of VkImageType VK_IMAGE_TYPE_3D, the baseArrayLayer and layerCount members of both srcSubresource and dstSubresource must be 0 and 1, respectively'
01200	U	Unknown	vkCmdCopyImage	'The aspectMask member of srcSubresource must specify aspects present in the calling commands srcImage'
01201	U	Unknown	vkCmdCopyImage	'The aspectMask member of dstSubresource must specify aspects present in the calling commands dstImage'
01202	U	Unknown	vkCmdCopyImage	'srcOffset.x and (extent.width + srcOffset.x) must both be greater than or equal to 0 and less than or equal to the source image subresource width'
01203	U	Unknown	vkCmdCopyImage	'srcOffset.y and (extent.height + srcOffset.y) must both be greater than or equal to 0 and less than or equal to the source image subresource height'
01204	U	Unknown	vkCmdCopyImage	'srcOffset.z and (extent.depth + srcOffset.z) must both be greater than or equal to 0 and less than or equal to the source image subresource depth'
01205	U	Unknown	vkCmdCopyImage	'dstOffset.x and (extent.width + dstOffset.x) must both be greater than or equal to 0 and less than or equal to the destination image subresource width'
01206	U	Unknown	vkCmdCopyImage	'dstOffset.y and (extent.height + dstOffset.y) must both be greater than or equal to 0 and less than or equal to the destination image subresource height'
01207	U	Unknown	vkCmdCopyImage	'dstOffset.z and (extent.depth + dstOffset.z) must both be greater than or equal to 0 and less than or equal to the destination image subresource depth'
01208	U	Unknown	vkCmdCopyImage	'If the calling commands srcImage is a compressed format image:all members of srcOffset must be a multiple of the corresponding dimensions of the compressed texel blockextent.width must be a multiple of the compressed texel block width or (extent.width + srcOffset.x) must equal the source image subresource widthextent.height must be a multiple of the compressed texel block height or (extent.height + srcOffset.y) must equal the source image subresource heightextent.depth must be a multiple of the compressed texel block depth or (extent.depth + srcOffset.z) must equal the source image subresource depth'
01209	U	Unknown	vkCmdCopyImage	'all members of srcOffset must be a multiple of the corresponding dimensions of the compressed texel block'
01210	U	Unknown	vkCmdCopyImage	'extent.width must be a multiple of the compressed texel block width or (extent.width + srcOffset.x) must equal the source image subresource width'
01211	U	Unknown	vkCmdCopyImage	'extent.height must be a multiple of the compressed texel block height or (extent.height + srcOffset.y) must equal the source image subresource height'
01212	U	Unknown	vkCmdCopyImage	'extent.depth must be a multiple of the compressed texel block depth or (extent.depth + srcOffset.z) must equal the source image subresource depth'
01213	U	Unknown	vkCmdCopyImage	'If the calling commands dstImage is a compressed format image:all members of dstOffset must be a multiple of the corresponding dimensions of the compressed texel blockextent.width must be a multiple of the compressed texel block width or (extent.width + dstOffset.x) must equal the destination image subresource widthextent.height must be a multiple of the compressed texel block height or (extent.height + dstOffset.y) must equal the destination image subresource heightextent.depth must be a multiple of the compressed texel block depth or (extent.depth + dstOffset.z) must equal the destination image subresource depth'
01214	U	Unknown	vkCmdCopyImage	'all members of dstOffset must be a multiple of the corresponding dimensions of the compressed texel block'
01215	U	Unknown	vkCmdCopyImage	'extent.width must be a multiple of the compressed texel block width or (extent.width + dstOffset.x) must equal the destination image subresource width'
01216	U	Unknown	vkCmdCopyImage	'extent.height must be a multiple of the compressed texel block height or (extent.height + dstOffset.y) must equal the destination image subresource height'
01217	U	Unknown	vkCmdCopyImage	'extent.depth must be a multiple of the compressed texel block depth or (extent.depth + dstOffset.z) must equal the destination image subresource depth'
01218	U	Unknown	vkCmdCopyImage	'srcOffset, dstOffset, and extent must respect the image transfer granularity requirements of the queue family that it will be submitted against, as described in Physical Device Enumeration'
01219	U	Unknown	vkCmdCopyImage	'srcSubresource must be a valid VkImageSubresourceLayers structure'
01220	U	Unknown	vkCmdCopyImage	'dstSubresource must be a valid VkImageSubresourceLayers structure'
01221	U	Unknown	vkCmdCopyImage	'If aspectMask contains VK_IMAGE_ASPECT_COLOR_BIT, it must not contain either of VK_IMAGE_ASPECT_DEPTH_BIT or VK_IMAGE_ASPECT_STENCIL_BIT'
01222	U	Unknown	vkCmdCopyImage	'aspectMask must not contain VK_IMAGE_ASPECT_METADATA_BIT'
01223	U	Unknown	vkCmdCopyImage	'mipLevel must be less than the mipLevels specified in VkImageCreateInfo when the image was created'
01224	U	Unknown	vkCmdCopyImage	'(baseArrayLayer + layerCount) must be less than or equal to the arrayLayers specified in VkImageCreateInfo when the image was created'
01225	U	Unknown	vkCmdCopyImage	'aspectMask must be a valid combination of VkImageAspectFlagBits values'
01226	U	Unknown	vkCmdCopyImage	'aspectMask must not be 0'
01227	U	Unknown	vkCmdCopyBufferToImage	'The buffer region specified by a given element of pRegions must be a region that is contained within srcBuffer'
01228	U	Unknown	vkCmdCopyBufferToImage	'The image region specified by a given element of pRegions must be a region that is contained within dstImage'
01229	U	Unknown	vkCmdCopyBufferToImage	'The union of all source regions, and the union of all destination regions, specified by the elements of pRegions, must not overlap in memory'
01230	Y	None	vkCmdCopyBufferToImage	'srcBuffer must have been created with VK_BUFFER_USAGE_TRANSFER_SRC_BIT usage flag'
01231	Y	None	vkCmdCopyBufferToImage	'dstImage must have been created with VK_IMAGE_USAGE_TRANSFER_DST_BIT usage flag'
01232	U	Unknown	vkCmdCopyBufferToImage	'dstImage must have a sample count equal to VK_SAMPLE_COUNT_1_BIT'
01233	U	Unknown	vkCmdCopyBufferToImage	'dstImageLayout must specify the layout of the image subresources of dstImage specified in pRegions at the time this command is executed on a VkDevice'
01234	U	Unknown	vkCmdCopyBufferToImage	'dstImageLayout must be either of VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL'
01235	Y	None	vkCmdCopyBufferToImage	'commandBuffer must be a valid VkCommandBuffer handle'
01236	Y	None	vkCmdCopyBufferToImage	'srcBuffer must be a valid VkBuffer handle'
01237	Y	None	vkCmdCopyBufferToImage	'dstImage must be a valid VkImage handle'
01238	U	Unknown	vkCmdCopyBufferToImage	'dstImageLayout must be a valid VkImageLayout value'
01239	U	Unknown	vkCmdCopyBufferToImage	'pRegions must be a pointer to an array of regionCount valid VkBufferImageCopy structures'
01240	U	Unknown	vkCmdCopyBufferToImage	'commandBuffer must be in the recording state'
01241	U	Unknown	vkCmdCopyBufferToImage	'The VkCommandPool that commandBuffer was allocated from must support transfer, graphics, or compute operations'
01242	U	Unknown	vkCmdCopyBufferToImage	'This command must only be called outside of a render pass instance'
01243	U	Unknown	vkCmdCopyBufferToImage	'regionCount must be greater than 0'
01244	U	Unknown	vkCmdCopyBufferToImage	'Each of commandBuffer, dstImage, and srcBuffer must have been created, allocated, or retrieved from the same VkDevice'
01245	U	Unknown	vkCmdCopyImageToBuffer	'The image region specified by a given element of pRegions must be a region that is contained within srcImage'
01246	U	Unknown	vkCmdCopyImageToBuffer	'The buffer region specified by a given element of pRegions must be a region that is contained within dstBuffer'
01247	U	Unknown	vkCmdCopyImageToBuffer	'The union of all source regions, and the union of all destination regions, specified by the elements of pRegions, must not overlap in memory'
01248	Y	None	vkCmdCopyImageToBuffer	'srcImage must have been created with VK_IMAGE_USAGE_TRANSFER_SRC_BIT usage flag'
01249	U	Unknown	vkCmdCopyImageToBuffer	'srcImage must have a sample count equal to VK_SAMPLE_COUNT_1_BIT'
01250	U	Unknown	vkCmdCopyImageToBuffer	'srcImageLayout must specify the layout of the image subresources of srcImage specified in pRegions at the time this command is executed on a VkDevice'
01251	U	Unknown	vkCmdCopyImageToBuffer	'srcImageLayout must be either of VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL'
01252	Y	None	vkCmdCopyImageToBuffer	'dstBuffer must have been created with VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag'
01253	Y	None	vkCmdCopyImageToBuffer	'commandBuffer must be a valid VkCommandBuffer handle'
01254	Y	None	vkCmdCopyImageToBuffer	'srcImage must be a valid VkImage handle'
01255	U	Unknown	vkCmdCopyImageToBuffer	'srcImageLayout must be a valid VkImageLayout value'
01256	Y	None	vkCmdCopyImageToBuffer	'dstBuffer must be a valid VkBuffer handle'
01257	U	Unknown	vkCmdCopyImageToBuffer	'pRegions must be a pointer to an array of regionCount valid VkBufferImageCopy structures'
01258	U	Unknown	vkCmdCopyImageToBuffer	'commandBuffer must be in the recording state'
01259	U	Unknown	vkCmdCopyImageToBuffer	'The VkCommandPool that commandBuffer was allocated from must support transfer, graphics, or compute operations'
01260	U	Unknown	vkCmdCopyImageToBuffer	'This command must only be called outside of a render pass instance'
01261	U	Unknown	vkCmdCopyImageToBuffer	'regionCount must be greater than 0'
01262	U	Unknown	vkCmdCopyImageToBuffer	'Each of commandBuffer, dstBuffer, and srcImage must have been created, allocated, or retrieved from the same VkDevice'
01263	Y	MiscImageLayerTests	vkCmdCopyImageToBuffer	'bufferOffset must be a multiple of the calling commands VkImage parameters formats element size'
01264	Y	MiscImageLayerTests	vkCmdCopyImageToBuffer	'bufferOffset must be a multiple of 4'
01265	Y	MiscImageLayerTests	vkCmdCopyImageToBuffer	'bufferRowLength must be 0, or greater than or equal to the width member of imageExtent'
01266	Y	MiscImageLayerTests	vkCmdCopyImageToBuffer	'bufferImageHeight must be 0, or greater than or equal to the height member of imageExtent'
01267	U	Unknown	vkCmdCopyImageToBuffer	'imageOffset.x and (imageExtent.width + imageOffset.x) must both be greater than or equal to 0 and less than or equal to the image subresource width'
01268	U	Unknown	vkCmdCopyImageToBuffer	'imageOffset.y and (imageExtent.height + imageOffset.y) must both be greater than or equal to 0 and less than or equal to the image subresource height'
01269	Y	MiscImageLayerTests	vkCmdCopyImageToBuffer	'imageOffset.z and (imageExtent.depth + imageOffset.z) must both be greater than or equal to 0 and less than or equal to the image subresource depth'
01270	U	Unknown	vkCmdCopyImageToBuffer	'If the calling commands VkImage parameter is a compressed format image:bufferRowLength must be a multiple of the compressed texel block widthbufferImageHeight must be a multiple of the compressed texel block heightall members of imageOffset must be a multiple of the corresponding dimensions of the compressed texel blockbufferOffset must be a multiple of the compressed texel block size in bytesimageExtent.width must be a multiple of the compressed texel block width or (imageExtent.width + imageOffset.x) must equal the image subresource widthimageExtent.height must be a multiple of the compressed texel block height or (imageExtent.height + imageOffset.y) must equal the image subresource heightimageExtent.depth must be a multiple of the compressed texel block depth or (imageExtent.depth + imageOffset.z) must equal the image subresource depth'
01271	U	Unknown	vkCmdCopyImageToBuffer	'bufferRowLength must be a multiple of the compressed texel block width'
01272	U	Unknown	vkCmdCopyImageToBuffer	'bufferImageHeight must be a multiple of the compressed texel block height'
01273	U	Unknown	vkCmdCopyImageToBuffer	'all members of imageOffset must be a multiple of the corresponding dimensions of the compressed texel block'
01274	U	Unknown	vkCmdCopyImageToBuffer	'bufferOffset must be a multiple of the compressed texel block size in bytes'
01275	U	Unknown	vkCmdCopyImageToBuffer	'imageExtent.width must be a multiple of the compressed texel block width or (imageExtent.width + imageOffset.x) must equal the image subresource width'
01276	U	Unknown	vkCmdCopyImageToBuffer	'imageExtent.height must be a multiple of the compressed texel block height or (imageExtent.height + imageOffset.y) must equal the image subresource height'
01277	U	Unknown	vkCmdCopyImageToBuffer	'imageExtent.depth must be a multiple of the compressed texel block depth or (imageExtent.depth + imageOffset.z) must equal the image subresource depth'
01278	U	Unknown	vkCmdCopyImageToBuffer	'bufferOffset, bufferRowLength, bufferImageHeight and all members of imageOffset and imageExtent must respect the image transfer granularity requirements of the queue family that it will be submitted against, as described in Physical Device Enumeration'
01279	U	Unknown	vkCmdCopyImageToBuffer	'The aspectMask member of imageSubresource must specify aspects present in the calling commands VkImage parameter'
01280	Y	None	vkCmdCopyImageToBuffer	'The aspectMask member of imageSubresource must only have a single bit set'
01281	U	Unknown	vkCmdCopyImageToBuffer	'If the calling commands VkImage parameter is of VkImageType VK_IMAGE_TYPE_3D, the baseArrayLayer and layerCount members of imageSubresource must be 0 and 1, respectively'
01282	U	Unknown	vkCmdCopyImageToBuffer	'When copying to the depth aspect of an image subresource, the data in the source buffer must be in the range [0,1]'
01283	U	Unknown	vkCmdCopyImageToBuffer	'imageSubresource must be a valid VkImageSubresourceLayers structure'
01287	U	Unknown	vkCmdBlitImage	'The source region specified by a given element of pRegions must be a region that is contained within srcImage'
01288	U	Unknown	vkCmdBlitImage	'The destination region specified by a given element of pRegions must be a region that is contained within dstImage'
01289	U	Unknown	vkCmdBlitImage	'The union of all destination regions, specified by the elements of pRegions, must not overlap in memory with any texel that may be sampled during the blit operation'
01290	U	Unknown	vkCmdBlitImage	'srcImage must use a format that supports VK_FORMAT_FEATURE_BLIT_SRC_BIT, which is indicated by VkFormatProperties::linearTilingFeatures (for linear tiled images) or VkFormatProperties::optimalTilingFeatures (for optimally tiled images) - as returned by vkGetPhysicalDeviceFormatProperties'
01291	Y	None	vkCmdBlitImage	'commandBuffer must be a valid VkCommandBuffer handle'
01292	Y	None	vkCmdBlitImage	'srcImage must be a valid VkImage handle'
01293	U	Unknown	vkCmdBlitImage	'srcImageLayout must be a valid VkImageLayout value'
01294	Y	None	vkCmdBlitImage	'dstImage must be a valid VkImage handle'
01295	U	Unknown	vkCmdBlitImage	'dstImageLayout must be a valid VkImageLayout value'
01296	U	Unknown	vkCmdBlitImage	'pRegions must be a pointer to an array of regionCount valid VkImageBlit structures'
01297	U	Unknown	vkCmdBlitImage	'filter must be a valid VkFilter value'
01298	U	Unknown	vkCmdBlitImage	'commandBuffer must be in the recording state'
01299	U	Unknown	vkCmdBlitImage	'The VkCommandPool that commandBuffer was allocated from must support graphics operations'
01300	U	Unknown	vkCmdBlitImage	'This command must only be called outside of a render pass instance'
01301	U	Unknown	vkCmdBlitImage	'regionCount must be greater than 0'
01302	U	Unknown	vkCmdBlitImage	'Each of commandBuffer, dstImage, and srcImage must have been created, allocated, or retrieved from the same VkDevice'
01303	U	Unknown	vkCmdBlitImage	'The aspectMask member of srcSubresource and dstSubresource must match'
01304	U	Unknown	vkCmdBlitImage	'The layerCount member of srcSubresource and dstSubresource must match'
01305	U	Unknown	vkCmdBlitImage	'If either of the calling commands srcImage or dstImage parameters are of VkImageType VK_IMAGE_TYPE_3D, the baseArrayLayer and layerCount members of both srcSubresource and dstSubresource must be 0 and 1, respectively'
01306	U	Unknown	vkCmdBlitImage	'The aspectMask member of srcSubresource must specify aspects present in the calling commands srcImage'
01307	U	Unknown	vkCmdBlitImage	'The aspectMask member of dstSubresource must specify aspects present in the calling commands dstImage'
01308	U	Unknown	vkCmdBlitImage	'The layerCount member of dstSubresource must be equal to the layerCount member of srcSubresource'
01309	U	Unknown	vkCmdBlitImage	'srcOffset[0].x and srcOffset[1].x must both be greater than or equal to 0 and less than or equal to the source image subresource width'
01310	U	Unknown	vkCmdBlitImage	'srcOffset[0].y and srcOffset[1].y must both be greater than or equal to 0 and less than or equal to the source image subresource height'
01311	U	Unknown	vkCmdBlitImage	'srcOffset[0].z and srcOffset[1].z must both be greater than or equal to 0 and less than or equal to the source image subresource depth'
01312	U	Unknown	vkCmdBlitImage	'dstOffset[0].x and dstOffset[1].x must both be greater than or equal to 0 and less than or equal to the destination image subresource width'
01313	U	Unknown	vkCmdBlitImage	'dstOffset[0].y and dstOffset[1].y must both be greater than or equal to 0 and less than or equal to the destination image subresource height'
01314	U	Unknown	vkCmdBlitImage	'dstOffset[0].z and dstOffset[1].z must both be greater than or equal to 0 and less than or equal to the destination image subresource depth'
01315	U	Unknown	vkCmdBlitImage	'srcSubresource must be a valid VkImageSubresourceLayers structure'
01316	U	Unknown	vkCmdBlitImage	'dstSubresource must be a valid VkImageSubresourceLayers structure'
01317	U	Unknown	vkCmdResolveImage	'The source region specified by a given element of pRegions must be a region that is contained within srcImage'
01318	U	Unknown	vkCmdResolveImage	'The destination region specified by a given element of pRegions must be a region that is contained within dstImage'
01319	U	Unknown	vkCmdResolveImage	'The union of all source regions, and the union of all destination regions, specified by the elements of pRegions, must not overlap in memory'
01320	U	Unknown	vkCmdResolveImage	'srcImage must have a sample count equal to any valid sample count value other than VK_SAMPLE_COUNT_1_BIT'
01321	U	Unknown	vkCmdResolveImage	'dstImage must have a sample count equal to VK_SAMPLE_COUNT_1_BIT'
01322	U	Unknown	vkCmdResolveImage	'srcImageLayout must specify the layout of the image subresources of srcImage specified in pRegions at the time this command is executed on a VkDevice'
01323	U	Unknown	vkCmdResolveImage	'srcImageLayout must be either of VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL'
01324	U	Unknown	vkCmdResolveImage	'dstImageLayout must specify the layout of the image subresources of dstImage specified in pRegions at the time this command is executed on a VkDevice'
01325	U	Unknown	vkCmdResolveImage	'dstImageLayout must be either of VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL'
01326	U	Unknown	vkCmdResolveImage	'If dstImage was created with tiling equal to VK_IMAGE_TILING_LINEAR, dstImage must have been created with a format that supports being a color attachment, as specified by the VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT flag in VkFormatProperties::linearTilingFeatures returned by vkGetPhysicalDeviceFormatProperties'
01327	Y	None	vkCmdResolveImage	'commandBuffer must be a valid VkCommandBuffer handle'
01328	Y	None	vkCmdResolveImage	'srcImage must be a valid VkImage handle'
01329	U	Unknown	vkCmdResolveImage	'srcImageLayout must be a valid VkImageLayout value'
01330	Y	None	vkCmdResolveImage	'dstImage must be a valid VkImage handle'
01331	U	Unknown	vkCmdResolveImage	'dstImageLayout must be a valid VkImageLayout value'
01332	U	Unknown	vkCmdResolveImage	'pRegions must be a pointer to an array of regionCount valid VkImageResolve structures'
01333	U	Unknown	vkCmdResolveImage	'commandBuffer must be in the recording state'
01334	U	Unknown	vkCmdResolveImage	'The VkCommandPool that commandBuffer was allocated from must support graphics operations'
01335	U	Unknown	vkCmdResolveImage	'This command must only be called outside of a render pass instance'
01336	U	Unknown	vkCmdResolveImage	'regionCount must be greater than 0'
01337	U	Unknown	vkCmdResolveImage	'Each of commandBuffer, dstImage, and srcImage must have been created, allocated, or retrieved from the same VkDevice'
01338	U	Unknown	vkCmdResolveImage	'The aspectMask member of srcSubresource and dstSubresource must only contain VK_IMAGE_ASPECT_COLOR_BIT'
01339	U	Unknown	vkCmdResolveImage	'The layerCount member of srcSubresource and dstSubresource must match'
01340	U	Unknown	vkCmdResolveImage	'If either of the calling commands srcImage or dstImage parameters are of VkImageType VK_IMAGE_TYPE_3D, the baseArrayLayer and layerCount members of both srcSubresource and dstSubresource must be 0 and 1, respectively'
01341	U	Unknown	vkCmdResolveImage	'srcSubresource must be a valid VkImageSubresourceLayers structure'
01342	U	Unknown	vkCmdResolveImage	'dstSubresource must be a valid VkImageSubresourceLayers structure'
01343	U	Unknown	vkCmdResolveImage	'If topology is VK_PRIMITIVE_TOPOLOGY_POINT_LIST, VK_PRIMITIVE_TOPOLOGY_LINE_LIST, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST, VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY or VK_PRIMITIVE_TOPOLOGY_PATCH_LIST, primitiveRestartEnable must be VK_FALSE'
01344	U	Unknown	vkCmdResolveImage	'If the geometry shaders feature is not enabled, topology must not be any of VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY, VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY, VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY or VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY'
01345	U	Unknown	vkCmdResolveImage	'If the tessellation shaders feature is not enabled, topology must not be VK_PRIMITIVE_TOPOLOGY_PATCH_LIST'
01346	N	Unknown	vkCmdResolveImage	'sType must be VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO'
01347	N	Unknown	vkCmdResolveImage	'pNext must be NULL'
01348	N	Unknown	vkCmdResolveImage	'flags must be 0'
01349	U	Unknown	vkCmdResolveImage	'topology must be a valid VkPrimitiveTopology value'
01350	U	Unknown	vkCmdBindIndexBuffer	'offset must be less than the size of buffer'
01351	U	Unknown	vkCmdBindIndexBuffer	'The sum of offset and the address of the range of VkDeviceMemory object that is backing buffer, must be a multiple of the type indicated by indexType'
01352	U	Unknown	vkCmdBindIndexBuffer	'buffer must have been created with the VK_BUFFER_USAGE_INDEX_BUFFER_BIT flag'
01353	Y	None	vkCmdBindIndexBuffer	'commandBuffer must be a valid VkCommandBuffer handle'
01354	Y	None	vkCmdBindIndexBuffer	'buffer must be a valid VkBuffer handle'
01355	U	Unknown	vkCmdBindIndexBuffer	'indexType must be a valid VkIndexType value'
01356	U	Unknown	vkCmdBindIndexBuffer	'commandBuffer must be in the recording state'
01357	U	Unknown	vkCmdBindIndexBuffer	'The VkCommandPool that commandBuffer was allocated from must support graphics operations'
01358	U	Unknown	vkCmdBindIndexBuffer	'Both of buffer, and commandBuffer must have been created, allocated, or retrieved from the same VkDevice'
01359	U	Unknown	vkCmdDraw	'For each set n that is statically used by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in the section called Pipeline Layout Compatibility'
01360	U	Unknown	vkCmdDraw	'For each push constant that is statically used by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must have been set for VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for push constants, with the VkPipelineLayout used to create the current VkPipeline, as described in the section called Pipeline Layout Compatibility'
01361	U	Unknown	vkCmdDraw	'Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the currently bound VkPipeline object, specified via vkCmdBindPipeline'
01362	Y	None	vkCmdDraw	'commandBuffer must be a valid VkCommandBuffer handle'
01363	U	Unknown	vkCmdDraw	'commandBuffer must be in the recording state'
01364	U	Unknown	vkCmdDraw	'The VkCommandPool that commandBuffer was allocated from must support graphics operations'
01365	U	Unknown	vkCmdDraw	'This command must only be called inside of a render pass instance'
01366	U	Unknown	vkCmdDrawIndexed	'For each set n that is statically used by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in the section called Pipeline Layout Compatibility'
01367	U	Unknown	vkCmdDrawIndexed	'For each push constant that is statically used by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must have been set for VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for push constants, with the VkPipelineLayout used to create the current VkPipeline, as described in the section called Pipeline Layout Compatibility'
01368	U	Unknown	vkCmdDrawIndexed	'Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the currently bound VkPipeline object, specified via vkCmdBindPipeline'
01369	Y	None	vkCmdDrawIndexed	'commandBuffer must be a valid VkCommandBuffer handle'
01370	U	Unknown	vkCmdDrawIndexed	'commandBuffer must be in the recording state'
01371	U	Unknown	vkCmdDrawIndexed	'The VkCommandPool that commandBuffer was allocated from must support graphics operations'
01372	U	Unknown	vkCmdDrawIndexed	'This command must only be called inside of a render pass instance'
01373	U	Unknown	vkCmdDrawIndirect	'offset must be a multiple of 4'
01374	U	Unknown	vkCmdDrawIndirect	'If drawCount is greater than 1, stride must be a multiple of 4 and must be greater than or equal to sizeof(VkDrawIndirectCommand)'
01375	U	Unknown	vkCmdDrawIndirect	'If the multi-draw indirect feature is not enabled, drawCount must be 0 or 1'
01376	U	Unknown	vkCmdDrawIndirect	'If the drawIndirectFirstInstance feature is not enabled, all the firstInstance members of the VkDrawIndirectCommand structures accessed by this command must be 0'
01377	Y	None	vkCmdDrawIndirect	'commandBuffer must be a valid VkCommandBuffer handle'
01378	Y	None	vkCmdDrawIndirect	'buffer must be a valid VkBuffer handle'
01379	U	Unknown	vkCmdDrawIndirect	'commandBuffer must be in the recording state'
01380	U	Unknown	vkCmdDrawIndirect	'The VkCommandPool that commandBuffer was allocated from must support graphics operations'
01381	U	Unknown	vkCmdDrawIndirect	'This command must only be called inside of a render pass instance'
01382	U	Unknown	vkCmdDrawIndirect	'Both of buffer, and commandBuffer must have been created, allocated, or retrieved from the same VkDevice'
01383	U	Unknown	vkCmdDrawIndirect	'For a given vertex buffer binding, any attribute data fetched must be entirely contained within the corresponding vertex buffer binding, as described in Section 20.2, Vertex Input Description'
01384	U	Unknown	vkCmdDrawIndirect	'If the drawIndirectFirstInstance feature is not enabled, firstInstance must be 0'
01385	U	Unknown	vkCmdDrawIndexedIndirect	'offset must be a multiple of 4'
01386	U	Unknown	vkCmdDrawIndexedIndirect	'If drawCount is greater than 1, stride must be a multiple of 4 and must be greater than or equal to sizeof(VkDrawIndexedIndirectCommand)'
01387	U	Unknown	vkCmdDrawIndexedIndirect	'If the multi-draw indirect feature is not enabled, drawCount must be 0 or 1'
01388	U	Unknown	vkCmdDrawIndexedIndirect	'If the drawIndirectFirstInstance feature is not enabled, all the firstInstance members of the VkDrawIndexedIndirectCommand structures accessed by this command must be 0'
01389	Y	None	vkCmdDrawIndexedIndirect	'commandBuffer must be a valid VkCommandBuffer handle'
01390	Y	None	vkCmdDrawIndexedIndirect	'buffer must be a valid VkBuffer handle'
01391	U	Unknown	vkCmdDrawIndexedIndirect	'commandBuffer must be in the recording state'
01392	U	Unknown	vkCmdDrawIndexedIndirect	'The VkCommandPool that commandBuffer was allocated from must support graphics operations'
01393	U	Unknown	vkCmdDrawIndexedIndirect	'This command must only be called inside of a render pass instance'
01394	U	Unknown	vkCmdDrawIndexedIndirect	'Both of buffer, and commandBuffer must have been created, allocated, or retrieved from the same VkDevice'
01395	U	Unknown	vkCmdDrawIndexedIndirect	'For a given vertex buffer binding, any attribute data fetched must be entirely contained within the corresponding vertex buffer binding, as described in Section 20.2, Vertex Input Description'
01396	U	Unknown	vkCmdDrawIndexedIndirect	'(indexSize * (firstIndex + indexCount) + offset) must be less than or equal to the size of the currently bound index buffer, with indexSize being based on the type specified by indexType, where the index buffer, indexType, and offset are specified via vkCmdBindIndexBuffer'
01397	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'vertexBindingDescriptionCount must be less than or equal to VkPhysicalDeviceLimits::maxVertexInputBindings'
01398	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'vertexAttributeDescriptionCount must be less than or equal to VkPhysicalDeviceLimits::maxVertexInputAttributes'
01399	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'For every binding specified by any given element of pVertexAttributeDescriptions, a VkVertexInputBindingDescription must exist in pVertexBindingDescriptions with the same value of binding'
01400	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'All elements of pVertexBindingDescriptions must describe distinct binding numbers'
01401	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'All elements of pVertexAttributeDescriptions must describe distinct attribute locations'
01402	N	Unknown	vkCmdDrawIndexedIndirectCountAMD	'sType must be VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO'
01403	N	Unknown	vkCmdDrawIndexedIndirectCountAMD	'pNext must be NULL'
01404	N	Unknown	vkCmdDrawIndexedIndirectCountAMD	'flags must be 0'
01405	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'If vertexBindingDescriptionCount is not 0, pVertexBindingDescriptions must be a pointer to an array of vertexBindingDescriptionCount valid VkVertexInputBindingDescription structures'
01406	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'If vertexAttributeDescriptionCount is not 0, pVertexAttributeDescriptions must be a pointer to an array of vertexAttributeDescriptionCount valid VkVertexInputAttributeDescription structures'
01407	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'binding must be less than VkPhysicalDeviceLimits::maxVertexInputBindings'
01408	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'stride must be less than or equal to VkPhysicalDeviceLimits::maxVertexInputBindingStride'
01409	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'inputRate must be a valid VkVertexInputRate value'
01410	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'location must be less than VkPhysicalDeviceLimits::maxVertexInputAttributes'
01411	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'binding must be less than VkPhysicalDeviceLimits::maxVertexInputBindings'
01412	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'offset must be less than or equal to VkPhysicalDeviceLimits::maxVertexInputAttributeOffset'
01413	Y	CreatePipelineBadVertexAttributeFormat	vkCmdDrawIndexedIndirectCountAMD	'format must be allowed as a vertex buffer format, as specified by the VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT flag in VkFormatProperties::bufferFeatures returned by vkGetPhysicalDeviceFormatProperties'
01414	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'format must be a valid VkFormat value'
01415	U	Unknown	vkCmdBindVertexBuffers	'firstBinding must be less than VkPhysicalDeviceLimits::maxVertexInputBindings'
01416	U	Unknown	vkCmdBindVertexBuffers	'The sum of firstBinding and bindingCount must be less than or equal to VkPhysicalDeviceLimits::maxVertexInputBindings'
01417	U	Unknown	vkCmdBindVertexBuffers	'All elements of pOffsets must be less than the size of the corresponding element in pBuffers'
01418	U	Unknown	vkCmdBindVertexBuffers	'All elements of pBuffers must have been created with the VK_BUFFER_USAGE_VERTEX_BUFFER_BIT flag'
01419	Y	None	vkCmdBindVertexBuffers	'commandBuffer must be a valid VkCommandBuffer handle'
01420	Y	None	vkCmdBindVertexBuffers	'pBuffers must be a pointer to an array of bindingCount valid VkBuffer handles'
01421	U	Unknown	vkCmdBindVertexBuffers	'pOffsets must be a pointer to an array of bindingCount VkDeviceSize values'
01422	U	Unknown	vkCmdBindVertexBuffers	'commandBuffer must be in the recording state'
01423	U	Unknown	vkCmdBindVertexBuffers	'The VkCommandPool that commandBuffer was allocated from must support graphics operations'
01424	U	Unknown	vkCmdBindVertexBuffers	'bindingCount must be greater than 0'
01425	U	Unknown	vkCmdBindVertexBuffers	'Both of commandBuffer, and the elements of pBuffers must have been created, allocated, or retrieved from the same VkDevice'
01426	U	Unknown	vkCmdBindVertexBuffers	'patchControlPoints must be greater than zero and less than or equal to VkPhysicalDeviceLimits::maxTessellationPatchSize'
01427	N	Unknown	vkCmdBindVertexBuffers	'sType must be VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO'
01428	N	Unknown	vkCmdBindVertexBuffers	'pNext must be NULL'
01429	N	Unknown	vkCmdBindVertexBuffers	'flags must be 0'
01430	U	Unknown	vkCmdBindVertexBuffers	'If the multiple viewports feature is not enabled, viewportCount must be 1'
01431	U	Unknown	vkCmdBindVertexBuffers	'If the multiple viewports feature is not enabled, scissorCount must be 1'
01432	U	Unknown	vkCmdBindVertexBuffers	'viewportCount must be between 1 and VkPhysicalDeviceLimits::maxViewports, inclusive'
01433	U	Unknown	vkCmdBindVertexBuffers	'scissorCount must be between 1 and VkPhysicalDeviceLimits::maxViewports, inclusive'
01434	U	Unknown	vkCmdBindVertexBuffers	'scissorCount and viewportCount must be identical'
01435	N	Unknown	vkCmdBindVertexBuffers	'sType must be VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO'
01436	N	Unknown	vkCmdBindVertexBuffers	'pNext must be NULL'
01437	N	Unknown	vkCmdBindVertexBuffers	'flags must be 0'
01438	U	Unknown	vkCmdBindVertexBuffers	'viewportCount must be greater than 0'
01439	U	Unknown	vkCmdBindVertexBuffers	'scissorCount must be greater than 0'
01440	U	Unknown	vkCmdSetViewport	'The currently bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_VIEWPORT dynamic state enabled'
01441	U	Unknown	vkCmdSetViewport	'firstViewport must be less than VkPhysicalDeviceLimits::maxViewports'
01442	U	Unknown	vkCmdSetViewport	'The sum of firstViewport and viewportCount must be between 1 and VkPhysicalDeviceLimits::maxViewports, inclusive'
01443	Y	None	vkCmdSetViewport	'commandBuffer must be a valid VkCommandBuffer handle'
01444	U	Unknown	vkCmdSetViewport	'pViewports must be a pointer to an array of viewportCount valid VkViewport structures'
01445	U	Unknown	vkCmdSetViewport	'commandBuffer must be in the recording state'
01446	U	Unknown	vkCmdSetViewport	'The VkCommandPool that commandBuffer was allocated from must support graphics operations'
01447	U	Unknown	vkCmdSetViewport	'viewportCount must be greater than 0'
01448	Y	ViewportAndScissorBoundsChecking	vkCmdSetViewport	'width must be greater than 0.0 and less than or equal to VkPhysicalDeviceLimits::maxViewportDimensions[0]'
01449	Y	ViewportAndScissorBoundsChecking	vkCmdSetViewport	'height must be greater than 0.0 and less than or equal to VkPhysicalDeviceLimits::maxViewportDimensions[1]'
01450	Y	ViewportAndScissorBoundsChecking	vkCmdSetViewport	'x and y must each be between viewportBoundsRange[0] and viewportBoundsRange[1], inclusive'
01451	Y	ViewportAndScissorBoundsChecking	vkCmdSetViewport	'x + width must be less than or equal to viewportBoundsRange[1]'
01452	Y	ViewportAndScissorBoundsChecking	vkCmdSetViewport	'y + height must be less than or equal to viewportBoundsRange[1]'
01453	U	Unknown	vkCmdSetViewport	'minDepth must be between 0.0 and 1.0, inclusive'
01454	U	Unknown	vkCmdSetViewport	'maxDepth must be between 0.0 and 1.0, inclusive'
01455	U	Unknown	vkCmdSetViewport	'If the depth clamping feature is not enabled, depthClampEnable must be VK_FALSE'
01456	U	Unknown	vkCmdSetViewport	'If the non-solid fill modes feature is not enabled, polygonMode must be VK_POLYGON_MODE_FILL'
01457	N	Unknown	vkCmdSetViewport	'sType must be VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO'
01458	N	Unknown	vkCmdSetViewport	'pNext must be NULL, or a pointer to a valid instance of VkPipelineRasterizationStateRasterizationOrderAMD'
01459	N	Unknown	vkCmdSetViewport	'flags must be 0'
01460	U	Unknown	vkCmdSetViewport	'polygonMode must be a valid VkPolygonMode value'
01461	U	Unknown	vkCmdSetViewport	'cullMode must be a valid combination of VkCullModeFlagBits values'
01462	U	Unknown	vkCmdSetViewport	'frontFace must be a valid VkFrontFace value'
01463	U	Unknown	vkCmdSetViewport	'If the sample rate shading feature is not enabled, sampleShadingEnable must be VK_FALSE'
01464	U	Unknown	vkCmdSetViewport	'If the alpha to one feature is not enabled, alphaToOneEnable must be VK_FALSE'
01465	U	Unknown	vkCmdSetViewport	'minSampleShading must be in the range [0,1]'
01466	N	Unknown	vkCmdSetViewport	'sType must be VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO'
01467	N	Unknown	vkCmdSetViewport	'pNext must be NULL'
01468	N	Unknown	vkCmdSetViewport	'flags must be 0'
01469	U	Unknown	vkCmdSetViewport	'rasterizationSamples must be a valid VkSampleCountFlagBits value'
01470	U	Unknown	vkCmdSetViewport	'If pSampleMask is not NULL, pSampleMask must be a pointer to an array of $/lceil{/mathit{rasterizationSamples} /over 32}/rceil$ VkSampleMask values'
01476	U	Unknown	vkCmdSetLineWidth	'The currently bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_LINE_WIDTH dynamic state enabled'
01477	U	Unknown	vkCmdSetLineWidth	'If the wide lines feature is not enabled, lineWidth must be 1.0'
01478	Y	None	vkCmdSetLineWidth	'commandBuffer must be a valid VkCommandBuffer handle'
01479	U	Unknown	vkCmdSetLineWidth	'commandBuffer must be in the recording state'
01480	U	Unknown	vkCmdSetLineWidth	'The VkCommandPool that commandBuffer was allocated from must support graphics operations'
01481	U	Unknown	vkCmdSetDepthBias	'The currently bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_DEPTH_BIAS dynamic state enabled'
01482	U	Unknown	vkCmdSetDepthBias	'If the depth bias clamping feature is not enabled, depthBiasClamp must be 0.0'
01483	Y	None	vkCmdSetDepthBias	'commandBuffer must be a valid VkCommandBuffer handle'
01484	U	Unknown	vkCmdSetDepthBias	'commandBuffer must be in the recording state'
01485	U	Unknown	vkCmdSetDepthBias	'The VkCommandPool that commandBuffer was allocated from must support graphics operations'
01486	U	Unknown	vkCmdSetScissor	'The currently bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_SCISSOR dynamic state enabled'
01487	U	Unknown	vkCmdSetScissor	'firstScissor must be less than VkPhysicalDeviceLimits::maxViewports'
01488	U	Unknown	vkCmdSetScissor	'The sum of firstScissor and scissorCount must be between 1 and VkPhysicalDeviceLimits::maxViewports, inclusive'
01489	Y	ViewportAndScissorBoundsChecking	vkCmdSetScissor	'The x and y members of offset must be greater than or equal to 0'
01490	Y	ViewportAndScissorBoundsChecking	vkCmdSetScissor	'Evaluation of (offset.x + extent.width) must not cause a signed integer addition overflow'
01491	Y	ViewportAndScissorBoundsChecking	vkCmdSetScissor	'Evaluation of (offset.y + extent.height) must not cause a signed integer addition overflow'
01492	Y	None	vkCmdSetScissor	'commandBuffer must be a valid VkCommandBuffer handle'
01493	U	Unknown	vkCmdSetScissor	'pScissors must be a pointer to an array of scissorCount VkRect2D structures'
01494	U	Unknown	vkCmdSetScissor	'commandBuffer must be in the recording state'
01495	U	Unknown	vkCmdSetScissor	'The VkCommandPool that commandBuffer was allocated from must support graphics operations'
01496	U	Unknown	vkCmdSetScissor	'scissorCount must be greater than 0'
01497	U	Unknown	vkCmdSetScissor	'If the depth bounds testing feature is not enabled, depthBoundsTestEnable must be VK_FALSE'
01498	N	Unknown	vkCmdSetScissor	'sType must be VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO'
01499	N	Unknown	vkCmdSetScissor	'pNext must be NULL'
01500	N	Unknown	vkCmdSetScissor	'flags must be 0'
01501	U	Unknown	vkCmdSetScissor	'depthCompareOp must be a valid VkCompareOp value'
01502	U	Unknown	vkCmdSetScissor	'front must be a valid VkStencilOpState structure'
01503	U	Unknown	vkCmdSetScissor	'back must be a valid VkStencilOpState structure'
01504	U	Unknown	vkCmdSetDepthBounds	'The currently bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_DEPTH_BOUNDS dynamic state enabled'
01505	U	Unknown	vkCmdSetDepthBounds	'minDepthBounds must be between 0.0 and 1.0, inclusive'
01506	U	Unknown	vkCmdSetDepthBounds	'maxDepthBounds must be between 0.0 and 1.0, inclusive'
01507	Y	None	vkCmdSetDepthBounds	'commandBuffer must be a valid VkCommandBuffer handle'
01508	U	Unknown	vkCmdSetDepthBounds	'commandBuffer must be in the recording state'
01509	U	Unknown	vkCmdSetDepthBounds	'The VkCommandPool that commandBuffer was allocated from must support graphics operations'
01510	U	Unknown	vkCmdSetDepthBounds	'failOp must be a valid VkStencilOp value'
01511	U	Unknown	vkCmdSetDepthBounds	'passOp must be a valid VkStencilOp value'
01512	U	Unknown	vkCmdSetDepthBounds	'depthFailOp must be a valid VkStencilOp value'
01513	U	Unknown	vkCmdSetDepthBounds	'compareOp must be a valid VkCompareOp value'
01514	U	Unknown	vkCmdSetStencilCompareMask	'The currently bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK dynamic state enabled'
01515	Y	None	vkCmdSetStencilCompareMask	'commandBuffer must be a valid VkCommandBuffer handle'
01516	U	Unknown	vkCmdSetStencilCompareMask	'faceMask must be a valid combination of VkStencilFaceFlagBits values'
01517	U	Unknown	vkCmdSetStencilCompareMask	'faceMask must not be 0'
01518	U	Unknown	vkCmdSetStencilCompareMask	'commandBuffer must be in the recording state'
01519	U	Unknown	vkCmdSetStencilCompareMask	'The VkCommandPool that commandBuffer was allocated from must support graphics operations'
01520	U	Unknown	vkCmdSetStencilWriteMask	'The currently bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_STENCIL_WRITE_MASK dynamic state enabled'
01521	Y	None	vkCmdSetStencilWriteMask	'commandBuffer must be a valid VkCommandBuffer handle'
01522	U	Unknown	vkCmdSetStencilWriteMask	'faceMask must be a valid combination of VkStencilFaceFlagBits values'
01523	U	Unknown	vkCmdSetStencilWriteMask	'faceMask must not be 0'
01524	U	Unknown	vkCmdSetStencilWriteMask	'commandBuffer must be in the recording state'
01525	U	Unknown	vkCmdSetStencilWriteMask	'The VkCommandPool that commandBuffer was allocated from must support graphics operations'
01526	U	Unknown	vkCmdSetStencilReference	'The currently bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_STENCIL_REFERENCE dynamic state enabled'
01527	Y	None	vkCmdSetStencilReference	'commandBuffer must be a valid VkCommandBuffer handle'
01528	U	Unknown	vkCmdSetStencilReference	'faceMask must be a valid combination of VkStencilFaceFlagBits values'
01529	U	Unknown	vkCmdSetStencilReference	'faceMask must not be 0'
01530	U	Unknown	vkCmdSetStencilReference	'commandBuffer must be in the recording state'
01531	U	Unknown	vkCmdSetStencilReference	'The VkCommandPool that commandBuffer was allocated from must support graphics operations'
01532	U	Unknown	vkCmdSetStencilReference	'If the independent blending feature is not enabled, all elements of pAttachments must be identical'
01533	U	Unknown	vkCmdSetStencilReference	'If the logic operations feature is not enabled, logicOpEnable must be VK_FALSE'
01534	U	Unknown	vkCmdSetStencilReference	'If logicOpEnable is VK_TRUE, logicOp must be a valid VkLogicOp value'
01535	N	Unknown	vkCmdSetStencilReference	'sType must be VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO'
01536	N	Unknown	vkCmdSetStencilReference	'pNext must be NULL'
01537	N	Unknown	vkCmdSetStencilReference	'flags must be 0'
01538	U	Unknown	vkCmdSetStencilReference	'If attachmentCount is not 0, pAttachments must be a pointer to an array of attachmentCount valid VkPipelineColorBlendAttachmentState structures'
01539	U	Unknown	vkCmdSetStencilReference	'If the dual source blending feature is not enabled, srcColorBlendFactor must not be VK_BLEND_FACTOR_SRC1_COLOR, VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR, VK_BLEND_FACTOR_SRC1_ALPHA, or VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA'
01540	U	Unknown	vkCmdSetStencilReference	'If the dual source blending feature is not enabled, dstColorBlendFactor must not be VK_BLEND_FACTOR_SRC1_COLOR, VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR, VK_BLEND_FACTOR_SRC1_ALPHA, or VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA'
01541	U	Unknown	vkCmdSetStencilReference	'If the dual source blending feature is not enabled, srcAlphaBlendFactor must not be VK_BLEND_FACTOR_SRC1_COLOR, VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR, VK_BLEND_FACTOR_SRC1_ALPHA, or VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA'
01542	U	Unknown	vkCmdSetStencilReference	'If the dual source blending feature is not enabled, dstAlphaBlendFactor must not be VK_BLEND_FACTOR_SRC1_COLOR, VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR, VK_BLEND_FACTOR_SRC1_ALPHA, or VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA'
01543	U	Unknown	vkCmdSetStencilReference	'srcColorBlendFactor must be a valid VkBlendFactor value'
01544	U	Unknown	vkCmdSetStencilReference	'dstColorBlendFactor must be a valid VkBlendFactor value'
01545	U	Unknown	vkCmdSetStencilReference	'colorBlendOp must be a valid VkBlendOp value'
01546	U	Unknown	vkCmdSetStencilReference	'srcAlphaBlendFactor must be a valid VkBlendFactor value'
01547	U	Unknown	vkCmdSetStencilReference	'dstAlphaBlendFactor must be a valid VkBlendFactor value'
01548	U	Unknown	vkCmdSetStencilReference	'alphaBlendOp must be a valid VkBlendOp value'
01549	U	Unknown	vkCmdSetStencilReference	'colorWriteMask must be a valid combination of VkColorComponentFlagBits values'
01550	U	Unknown	vkCmdSetBlendConstants	'The currently bound graphics pipeline must have been created with the VK_DYNAMIC_STATE_BLEND_CONSTANTS dynamic state enabled'
01551	Y	None	vkCmdSetBlendConstants	'commandBuffer must be a valid VkCommandBuffer handle'
01552	U	Unknown	vkCmdSetBlendConstants	'commandBuffer must be in the recording state'
01553	U	Unknown	vkCmdSetBlendConstants	'The VkCommandPool that commandBuffer was allocated from must support graphics operations'
01554	U	Unknown	vkCmdDispatch	'x must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[0]'
01555	U	Unknown	vkCmdDispatch	'y must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[1]'
01556	U	Unknown	vkCmdDispatch	'z must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[2]'
01557	U	Unknown	vkCmdDispatch	'For each set n that is statically used by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_COMPUTE, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_COMPUTE, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in the section called Pipeline Layout Compatibility'
01558	U	Unknown	vkCmdDispatch	'Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the currently bound VkPipeline object, specified via vkCmdBindPipeline'
01559	Y	None	vkCmdDispatch	'commandBuffer must be a valid VkCommandBuffer handle'
01560	U	Unknown	vkCmdDispatch	'commandBuffer must be in the recording state'
01561	U	Unknown	vkCmdDispatch	'The VkCommandPool that commandBuffer was allocated from must support compute operations'
01562	U	Unknown	vkCmdDispatch	'This command must only be called outside of a render pass instance'
01563	U	Unknown	vkCmdDispatchIndirect	'For each set n that is statically used by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_COMPUTE, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_COMPUTE, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in the section called Pipeline Layout Compatibility'
01564	U	Unknown	vkCmdDispatchIndirect	'Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the currently bound VkPipeline object, specified via vkCmdBindPipeline'
01565	Y	None	vkCmdDispatchIndirect	'commandBuffer must be a valid VkCommandBuffer handle'
01566	Y	None	vkCmdDispatchIndirect	'buffer must be a valid VkBuffer handle'
01567	U	Unknown	vkCmdDispatchIndirect	'commandBuffer must be in the recording state'
01568	U	Unknown	vkCmdDispatchIndirect	'The VkCommandPool that commandBuffer was allocated from must support compute operations'
01569	U	Unknown	vkCmdDispatchIndirect	'This command must only be called outside of a render pass instance'
01570	U	Unknown	vkCmdDispatchIndirect	'Both of buffer, and commandBuffer must have been created, allocated, or retrieved from the same VkDevice'
01571	U	Unknown	vkCmdDispatchIndirect	'x must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[0]'
01572	U	Unknown	vkCmdDispatchIndirect	'y must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[1]'
01573	U	Unknown	vkCmdDispatchIndirect	'z must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[2]'
01600	U	Unknown	vkGetPhysicalDeviceSparseImageFormatProperties	'samples must be a bit value that is set in VkImageFormatProperties::sampleCounts returned by vkGetPhysicalDeviceImageFormatProperties with format, type, tiling, and usage equal to those in this command and flags equal to the value that is set in VkImageCreateInfo::flags when the image is created'
01601	Y	None	vkGetPhysicalDeviceSparseImageFormatProperties	'physicalDevice must be a valid VkPhysicalDevice handle'
01602	U	Unknown	vkGetPhysicalDeviceSparseImageFormatProperties	'format must be a valid VkFormat value'
01603	U	Unknown	vkGetPhysicalDeviceSparseImageFormatProperties	'type must be a valid VkImageType value'
01604	U	Unknown	vkGetPhysicalDeviceSparseImageFormatProperties	'samples must be a valid VkSampleCountFlagBits value'
01605	U	Unknown	vkGetPhysicalDeviceSparseImageFormatProperties	'usage must be a valid combination of VkImageUsageFlagBits values'
01606	U	Unknown	vkGetPhysicalDeviceSparseImageFormatProperties	'usage must not be 0'
01607	U	Unknown	vkGetPhysicalDeviceSparseImageFormatProperties	'tiling must be a valid VkImageTiling value'
01608	U	Unknown	vkGetPhysicalDeviceSparseImageFormatProperties	'pPropertyCount must be a pointer to a uint32_t value'
01609	U	Unknown	vkGetPhysicalDeviceSparseImageFormatProperties	'If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a pointer to an array of pPropertyCount VkSparseImageFormatProperties structures'
01610	Y	None	vkGetImageSparseMemoryRequirements	'device must be a valid VkDevice handle'
01611	Y	None	vkGetImageSparseMemoryRequirements	'image must be a valid VkImage handle'
01612	U	Unknown	vkGetImageSparseMemoryRequirements	'pSparseMemoryRequirementCount must be a pointer to a uint32_t value'
01613	U	Unknown	vkGetImageSparseMemoryRequirements	'If the value referenced by pSparseMemoryRequirementCount is not 0, and pSparseMemoryRequirements is not NULL, pSparseMemoryRequirements must be a pointer to an array of pSparseMemoryRequirementCount VkSparseImageMemoryRequirements structures'
01614	U	Unknown	vkGetImageSparseMemoryRequirements	'image must have been created, allocated, or retrieved from device'
01615	U	Unknown	vkGetImageSparseMemoryRequirements	'If memory is not VK_NULL_HANDLE, memory and memoryOffset must match the memory requirements of the resource, as described in section Section 11.6, Resource Memory Association'
01616	U	Unknown	vkGetImageSparseMemoryRequirements	'If memory is not VK_NULL_HANDLE, memory must not have been created with a memory type that reports VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT bit set'
01617	U	Unknown	vkGetImageSparseMemoryRequirements	'size must be greater than 0'
01618	U	Unknown	vkGetImageSparseMemoryRequirements	'resourceOffset must be less than the size of the resource'
01619	U	Unknown	vkGetImageSparseMemoryRequirements	'size must be less than or equal to the size of the resource minus resourceOffset'
01620	U	Unknown	vkGetImageSparseMemoryRequirements	'memoryOffset must be less than the size of memory'
01621	U	Unknown	vkGetImageSparseMemoryRequirements	'size must be less than or equal to the size of memory minus memoryOffset'
01622	U	Unknown	vkGetImageSparseMemoryRequirements	'If memory is not VK_NULL_HANDLE, memory must be a valid VkDeviceMemory handle'
01623	N	Unknown	vkGetImageSparseMemoryRequirements	'flags must be a valid combination of VkSparseMemoryBindFlagBits values'
01624	U	Unknown	vkGetImageSparseMemoryRequirements	'buffer must be a valid VkBuffer handle'
01625	U	Unknown	vkGetImageSparseMemoryRequirements	'pBinds must be a pointer to an array of bindCount valid VkSparseMemoryBind structures'
01626	U	Unknown	vkGetImageSparseMemoryRequirements	'bindCount must be greater than 0'
01627	U	Unknown	vkGetImageSparseMemoryRequirements	'For any given element of pBinds, if the flags member of that element contains VK_SPARSE_MEMORY_BIND_METADATA_BIT, the binding range defined must be within the mip tail region of the metadata aspect of image'
01628	U	Unknown	vkGetImageSparseMemoryRequirements	'image must be a valid VkImage handle'
01629	U	Unknown	vkGetImageSparseMemoryRequirements	'pBinds must be a pointer to an array of bindCount valid VkSparseMemoryBind structures'
01630	U	Unknown	vkGetImageSparseMemoryRequirements	'bindCount must be greater than 0'
01631	U	Unknown	vkGetImageSparseMemoryRequirements	'image must be a valid VkImage handle'
01632	U	Unknown	vkGetImageSparseMemoryRequirements	'pBinds must be a pointer to an array of bindCount valid VkSparseImageMemoryBind structures'
01633	U	Unknown	vkGetImageSparseMemoryRequirements	'bindCount must be greater than 0'
01634	U	Unknown	vkGetImageSparseMemoryRequirements	'If the sparse aliased residency feature is not enabled, and if any other resources are bound to ranges of memory, the range of memory being bound must not overlap with those bound ranges'
01635	U	Unknown	vkGetImageSparseMemoryRequirements	'memory and memoryOffset must match the memory requirements of the calling commands image, as described in section Section 11.6, Resource Memory Association'
01636	U	Unknown	vkGetImageSparseMemoryRequirements	'subresource must be a valid image subresource for image (see Section 11.5, Image Views)'
01637	U	Unknown	vkGetImageSparseMemoryRequirements	'offset.x must be a multiple of the sparse image block width (VkSparseImageFormatProperties::imageGranularity.width) of the image'
01638	U	Unknown	vkGetImageSparseMemoryRequirements	'extent.width must either be a multiple of the sparse image block width of the image, or else extent.width + offset.x must equal the width of the image subresource'
01639	U	Unknown	vkGetImageSparseMemoryRequirements	'offset.y must be a multiple of the sparse image block height (VkSparseImageFormatProperties::imageGranularity.height) of the image'
01640	U	Unknown	vkGetImageSparseMemoryRequirements	'extent.height must either be a multiple of the sparse image block height of the image, or else extent.height + offset.y must equal the height of the image subresource'
01641	U	Unknown	vkGetImageSparseMemoryRequirements	'offset.z must be a multiple of the sparse image block depth (VkSparseImageFormatProperties::imageGranularity.depth) of the image'
01642	U	Unknown	vkGetImageSparseMemoryRequirements	'extent.depth must either be a multiple of the sparse image block depth of the image, or else extent.depth + offset.z must equal the depth of the image subresource'
01643	U	Unknown	vkGetImageSparseMemoryRequirements	'subresource must be a valid VkImageSubresource structure'
01644	U	Unknown	vkGetImageSparseMemoryRequirements	'If memory is not VK_NULL_HANDLE, memory must be a valid VkDeviceMemory handle'
01645	N	Unknown	vkGetImageSparseMemoryRequirements	'flags must be a valid combination of VkSparseMemoryBindFlagBits values'
01646	U	Unknown	vkQueueBindSparse	'fence must be unsignaled'
01647	U	Unknown	vkQueueBindSparse	'fence must not be associated with any other queue command that has not yet completed execution on that queue'
01648	U	Unknown	vkQueueBindSparse	'queue must be a valid VkQueue handle'
01649	U	Unknown	vkQueueBindSparse	'If bindInfoCount is not 0, pBindInfo must be a pointer to an array of bindInfoCount valid VkBindSparseInfo structures'
01650	U	Unknown	vkQueueBindSparse	'If fence is not VK_NULL_HANDLE, fence must be a valid VkFence handle'
01651	Y	Unknown	vkQueueBindSparse	'The queue must support sparse binding operations'
01652	U	Unknown	vkQueueBindSparse	'Both of fence, and queue that are valid handles must have been created, allocated, or retrieved from the same VkDevice'
01653	N	Unknown	vkQueueBindSparse	'sType must be VK_STRUCTURE_TYPE_BIND_SPARSE_INFO'
01654	N	Unknown	vkQueueBindSparse	'pNext must be NULL'
01655	U	Unknown	vkQueueBindSparse	'If waitSemaphoreCount is not 0, pWaitSemaphores must be a pointer to an array of waitSemaphoreCount valid VkSemaphore handles'
01656	Y	None	vkQueueBindSparse	'If bufferBindCount is not 0, pBufferBinds must be a pointer to an array of bufferBindCount valid VkSparseBufferMemoryBindInfo structures'
01657	Y	None	vkQueueBindSparse	'If imageOpaqueBindCount is not 0, pImageOpaqueBinds must be a pointer to an array of imageOpaqueBindCount valid VkSparseImageOpaqueMemoryBindInfo structures'
01658	Y	None	vkQueueBindSparse	'If imageBindCount is not 0, pImageBinds must be a pointer to an array of imageBindCount valid VkSparseImageMemoryBindInfo structures'
01659	U	Unknown	vkQueueBindSparse	'If signalSemaphoreCount is not 0, pSignalSemaphores must be a pointer to an array of signalSemaphoreCount valid VkSemaphore handles'
01660	U	Unknown	vkQueueBindSparse	'Both of the elements of pSignalSemaphores, and the elements of pWaitSemaphores that are valid handles must have been created, allocated, or retrieved from the same VkDevice'
01665	U	Unknown	vkEnumerateInstanceLayerProperties	'pPropertyCount must be a pointer to a uint32_t value'
01666	U	Unknown	vkEnumerateInstanceLayerProperties	'If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a pointer to an array of pPropertyCount VkLayerProperties structures'
01667	U	Unknown	vkEnumerateDeviceLayerProperties	'physicalDevice must be a valid VkPhysicalDevice handle'
01668	U	Unknown	vkEnumerateDeviceLayerProperties	'pPropertyCount must be a pointer to a uint32_t value'
01669	U	Unknown	vkEnumerateDeviceLayerProperties	'If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a pointer to an array of pPropertyCount VkLayerProperties structures'
01670	U	Unknown	vkEnumerateInstanceExtensionProperties	'If pLayerName is not NULL, it must be the name of a layer returned by vkEnumerateInstanceLayerProperties'
01671	U	Unknown	vkEnumerateInstanceExtensionProperties	'If pLayerName is not NULL, pLayerName must be a null-terminated string'
01672	U	Unknown	vkEnumerateInstanceExtensionProperties	'pPropertyCount must be a pointer to a uint32_t value'
01674	U	Unknown	vkEnumerateDeviceExtensionProperties	'If pLayerName is not NULL, it must be the name of a layer returned by vkEnumerateDeviceLayerProperties'
01675	U	Unknown	vkEnumerateDeviceExtensionProperties	'physicalDevice must be a valid VkPhysicalDevice handle'
01676	U	Unknown	vkEnumerateDeviceExtensionProperties	'If pLayerName is not NULL, pLayerName must be a null-terminated string'
01677	U	Unknown	vkEnumerateDeviceExtensionProperties	'pPropertyCount must be a pointer to a uint32_t value'
01679	Y	None	vkGetPhysicalDeviceFeatures	'pFeatures must be a pointer to a VkPhysicalDeviceFeatures structure'
01680	U	Unknown	vkGetPhysicalDeviceFeatures	'If any member of this structure is VK_FALSE, as returned by vkGetPhysicalDeviceFeatures, then it must be VK_FALSE when passed as part of the VkDeviceCreateInfo struct when creating a device'
01683	Y	None	vkGetPhysicalDeviceFormatProperties	'physicalDevice must be a valid VkPhysicalDevice handle'
01684	U	Unknown	vkGetPhysicalDeviceFormatProperties	'format must be a valid VkFormat value'
01685	U	Unknown	vkGetPhysicalDeviceFormatProperties	'pFormatProperties must be a pointer to a VkFormatProperties structure'
01686	Y	None	vkGetPhysicalDeviceImageFormatProperties	'physicalDevice must be a valid VkPhysicalDevice handle'
01687	U	Unknown	vkGetPhysicalDeviceImageFormatProperties	'format must be a valid VkFormat value'
01688	U	Unknown	vkGetPhysicalDeviceImageFormatProperties	'type must be a valid VkImageType value'
01689	U	Unknown	vkGetPhysicalDeviceImageFormatProperties	'tiling must be a valid VkImageTiling value'
01690	U	Unknown	vkGetPhysicalDeviceImageFormatProperties	'usage must be a valid combination of VkImageUsageFlagBits values'
01691	U	Unknown	vkGetPhysicalDeviceImageFormatProperties	'usage must not be 0'
01692	N	Unknown	vkGetPhysicalDeviceImageFormatProperties	'flags must be a valid combination of VkImageCreateFlagBits values'
01693	U	Unknown	vkGetPhysicalDeviceImageFormatProperties	'pImageFormatProperties must be a pointer to a VkImageFormatProperties structure'
01694	N	Unknown	vkQueueSubmit	'sType must be VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV'
01695	N	Unknown	vkQueueSubmit	'pNext must be NULL'
01696	U	Unknown	vkQueueSubmit	'If acquireCount is not 0, pAcquireSyncs must be a pointer to an array of acquireCount valid VkDeviceMemory handles'
01697	U	Unknown	vkQueueSubmit	'If acquireCount is not 0, pAcquireKeys must be a pointer to an array of acquireCount uint64_t values'
01698	U	Unknown	vkQueueSubmit	'If acquireCount is not 0, pAcquireTimeoutMilliseconds must be a pointer to an array of acquireCount uint32_t values'
01699	U	Unknown	vkQueueSubmit	'If releaseCount is not 0, pReleaseSyncs must be a pointer to an array of releaseCount valid VkDeviceMemory handles'
01700	U	Unknown	vkQueueSubmit	'If releaseCount is not 0, pReleaseKeys must be a pointer to an array of releaseCount uint64_t values'
01701	U	Unknown	vkQueueSubmit	'Both of the elements of pAcquireSyncs, and the elements of pReleaseSyncs that are valid handles must have been created, allocated, or retrieved from the same VkDevice'
01702	U	Unknown	vkCmdBeginRenderPass	'renderPass must be compatible with the renderPass member of the VkFramebufferCreateInfo structure specified when creating framebuffer.'
01703	U	Unknown	vkAllocateMemory	'At least one of image and buffer must be VK_NULL_HANDLE'
01704	U	Unknown	vkAllocateMemory	'If image is not VK_NULL_HANDLE, the image must have been created with VkDedicatedAllocationImageCreateInfoNV::dedicatedAllocation equal to VK_TRUE'
01705	U	Unknown	vkAllocateMemory	'If buffer is not VK_NULL_HANDLE, the buffer must have been created with VkDedicatedAllocationBufferCreateInfoNV::dedicatedAllocation equal to VK_TRUE'
01706	U	Unknown	vkAllocateMemory	'If image is not VK_NULL_HANDLE, VkMemoryAllocateInfo::allocationSize must equal the VkMemoryRequirements::size of the image'
01707	U	Unknown	vkAllocateMemory	'If buffer is not VK_NULL_HANDLE, VkMemoryAllocateInfo::allocationSize must equal the VkMemoryRequirements::size of the buffer'
01708	N	Unknown	vkAllocateMemory	'sType must be VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV'
01709	N	Unknown	vkAllocateMemory	'pNext must be NULL'
01710	U	Unknown	vkAllocateMemory	'If image is not VK_NULL_HANDLE, image must be a valid VkImage handle'
01711	U	Unknown	vkAllocateMemory	'If buffer is not VK_NULL_HANDLE, buffer must be a valid VkBuffer handle'
01712	U	Unknown	vkAllocateMemory	'Both of buffer, and image that are valid handles must have been created, allocated, or retrieved from the same VkDevice'
01713	N	Unknown	vkAllocateMemory	'sType must be VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV'
01714	N	Unknown	vkAllocateMemory	'pNext must be NULL'
01715	U	Unknown	vkAllocateMemory	'handleTypes must be a valid combination of VkExternalMemoryHandleTypeFlagBitsNV values'
01717	N	Unknown	vkAllocateMemory	'sType must be VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV'
01718	N	Unknown	vkAllocateMemory	'pNext must be NULL'
01719	U	Unknown	vkAllocateMemory	'If pAttributes is not NULL, pAttributes must be a pointer to a valid SECURITY_ATTRIBUTES value'
01720	N	Unknown	vkAllocateMemory	'sType must be VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV'
01721	N	Unknown	vkAllocateMemory	'pNext must be NULL'
01722	U	Unknown	vkAllocateMemory	'handleType must be a valid combination of VkExternalMemoryHandleTypeFlagBitsNV values'
01724	U	Unknown	vkGetMemoryWin32HandleNV	'handleType must be a flag specified in VkExportMemoryAllocateInfoNV::handleTypes when allocating memory'
01725	Y	None	vkGetMemoryWin32HandleNV	'device must be a valid VkDevice handle'
01726	Y	None	vkGetMemoryWin32HandleNV	'memory must be a valid VkDeviceMemory handle'
01727	U	Unknown	vkGetMemoryWin32HandleNV	'handleType must be a valid combination of VkExternalMemoryHandleTypeFlagBitsNV values'
01728	U	Unknown	vkGetMemoryWin32HandleNV	'handleType must not be 0'
01729	U	Unknown	vkGetMemoryWin32HandleNV	'pHandle must be a pointer to a HANDLE value'
01730	U	Unknown	vkGetMemoryWin32HandleNV	'memory must have been created, allocated, or retrieved from device'
01731	U	Unknown	vkCreateBuffer	'If dedicatedAllocation is VK_TRUE, VkBufferCreateInfo::flags must not include VK_BUFFER_CREATE_SPARSE_BINDING_BIT, VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT, or VK_BUFFER_CREATE_SPARSE_ALIASED_BIT'
01732	N	Unknown	vkCreateBuffer	'sType must be VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV'
01733	N	Unknown	vkCreateBuffer	'pNext must be NULL'
01734	U	Unknown	vkCreateImage	'If dedicatedAllocation is VK_TRUE, VkImageCreateInfo::flags must not include VK_IMAGE_CREATE_SPARSE_BINDING_BIT, VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT, or VK_IMAGE_CREATE_SPARSE_ALIASED_BIT'
01735	N	Unknown	vkCreateImage	'sType must be VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV'
01736	N	Unknown	vkCreateImage	'pNext must be NULL'
01737	N	Unknown	vkCreateImage	'sType must be VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV'
01738	N	Unknown	vkCreateImage	'pNext must be NULL'
01739	U	Unknown	vkCreateImage	'handleTypes must be a valid combination of VkExternalMemoryHandleTypeFlagBitsNV values'
01741	U	Unknown	vkCreateSampler	'If either magFilter or minFilter is VK_FILTER_CUBIC_IMG, anisotropyEnable must be VK_FALSE'
01742	U	Unknown	vkCmdCopyImage	'If the calling commands srcImage is of type VK_IMAGE_TYPE_1D, then srcOffset.y must be 0 and extent.height must be 1.'
01743	U	Unknown	vkCmdCopyImage	'If the calling commands srcImage is of type VK_IMAGE_TYPE_1D or VK_IMAGE_TYPE_2D, then srcOffset.z must be 0 and extent.depth must be 1.'
01744	U	Unknown	vkCmdCopyImage	'If the calling commands dstImage is of type VK_IMAGE_TYPE_1D, then dstOffset.y must be 0 and extent.height must be 1.'
01745	U	Unknown	vkCmdCopyImage	'If the calling commands dstImage is of type VK_IMAGE_TYPE_1D or VK_IMAGE_TYPE_2D, then dstOffset.z must be 0 and extent.depth must be 1.'
01746	U	Unknown	vkCmdCopyImageToBuffer	'If the calling commands srcImage (vkCmdCopyImageToBuffer) or dstImage (vkCmdCopyBufferToImage) is of type VK_IMAGE_TYPE_1D, then imageOffset.y must be 0 and imageExtent.height must be 1.'
01747	U	Unknown	vkCmdCopyImageToBuffer	'If the calling commands srcImage (vkCmdCopyImageToBuffer) or dstImage (vkCmdCopyBufferToImage) is of type VK_IMAGE_TYPE_1D or VK_IMAGE_TYPE_2D, then imageOffset.z must be 0 and imageExtent.depth must be 1.'
01748	U	Unknown	vkCmdBlitImage	'If the calling commands srcImage is of type VK_IMAGE_TYPE_1D, then srcOffset[0].y must be 0 and srcOffset[1].y must be 1.'
01749	U	Unknown	vkCmdBlitImage	'If the calling commands srcImage is of type VK_IMAGE_TYPE_1D or VK_IMAGE_TYPE_2D, then srcOffset[0].z must be 0 and srcOffset[1].z must be 1.'
01750	U	Unknown	vkCmdBlitImage	'If the calling commands dstImage is of type VK_IMAGE_TYPE_1D, then dstOffset[0].y must be 0 and dstOffset[1].y must be 1.'
01751	U	Unknown	vkCmdBlitImage	'If the calling commands dstImage is of type VK_IMAGE_TYPE_1D or VK_IMAGE_TYPE_2D, then dstOffset[0].z must be 0 and dstOffset[1].z must be 1.'
01752	U	Unknown	vkCmdResolveImage	'srcOffset.x and (extent.width + srcOffset.x) must both be greater than or equal to 0 and less than or equal to the source image subresource width'
01753	U	Unknown	vkCmdResolveImage	'srcOffset.y and (extent.height + srcOffset.y) must both be greater than or equal to 0 and less than or equal to the source image subresource height'
01754	U	Unknown	vkCmdResolveImage	'If the calling commands srcImage is of type VK_IMAGE_TYPE_1D, then srcOffset.y must be 0 and extent.height must be 1.'
01755	U	Unknown	vkCmdResolveImage	'srcOffset.z and (extent.depth + srcOffset.z) must both be greater than or equal to 0 and less than or equal to the source image subresource depth'
01756	U	Unknown	vkCmdResolveImage	'If the calling commands srcImage is of type VK_IMAGE_TYPE_1D or VK_IMAGE_TYPE_2D, then srcOffset.z must be 0 and extent.depth must be 1.'
01757	U	Unknown	vkCmdResolveImage	'dstOffset.x and (extent.width + dstOffset.x) must both be greater than or equal to 0 and less than or equal to the destination image subresource width'
01758	U	Unknown	vkCmdResolveImage	'dstOffset.y and (extent.height + dstOffset.y) must both be greater than or equal to 0 and less than or equal to the destination image subresource height'
01759	U	Unknown	vkCmdResolveImage	'If the calling commands dstImage is of type VK_IMAGE_TYPE_1D, then dstOffset.y must be 0 and extent.height must be 1.'
01760	U	Unknown	vkCmdResolveImage	'dstOffset.z and (extent.depth + dstOffset.z) must both be greater than or equal to 0 and less than or equal to the destination image subresource depth'
01761	U	Unknown	vkCmdResolveImage	'If the calling commands dstImage is of type VK_IMAGE_TYPE_1D or VK_IMAGE_TYPE_2D, then dstOffset.z must be 0 and extent.depth must be 1.'
01762	U	Unknown	vkCmdDraw	'The current render pass must be compatible with the renderPass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS.'
01763	U	Unknown	vkCmdDraw	'The subpass index of the current render pass must be equal to the subpass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS.'
01764	U	Unknown	vkCmdDrawIndexed	'The current render pass must be compatible with the renderPass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS.'
01765	U	Unknown	vkCmdDrawIndexed	'The subpass index of the current render pass must be equal to the subpass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS.'
01766	U	Unknown	vkCmdDrawIndirectCountAMD	'offset must be a multiple of 4'
01767	U	Unknown	vkCmdDrawIndirectCountAMD	'countBufferOffset must be a multiple of 4'
01768	U	Unknown	vkCmdDrawIndirectCountAMD	'stride must be a multiple of 4 and must be greater than or equal to sizeof(VkDrawIndirectCommand)'
01769	U	Unknown	vkCmdDrawIndirectCountAMD	'If maxDrawCount is greater than or equal to 1, (stride  (maxDrawCount - 1) + offset + sizeof(VkDrawIndirectCommand)) must be less than or equal to the size of buffer'
01770	U	Unknown	vkCmdDrawIndirectCountAMD	'If the drawIndirectFirstInstance feature is not enabled, all the firstInstance members of the VkDrawIndirectCommand structures accessed by this command must be 0'
01771	Y	None	vkCmdDrawIndirectCountAMD	'commandBuffer must be a valid VkCommandBuffer handle'
01772	Y	None	vkCmdDrawIndirectCountAMD	'buffer must be a valid VkBuffer handle'
01773	U	Unknown	vkCmdDrawIndirectCountAMD	'countBuffer must be a valid VkBuffer handle'
01774	U	Unknown	vkCmdDrawIndirectCountAMD	'commandBuffer must be in the recording state'
01775	U	Unknown	vkCmdDrawIndirectCountAMD	'The VkCommandPool that commandBuffer was allocated from must support graphics operations'
01776	U	Unknown	vkCmdDrawIndirectCountAMD	'This command must only be called inside of a render pass instance'
01777	U	Unknown	vkCmdDrawIndirectCountAMD	'Each of buffer, commandBuffer, and countBuffer must have been created, allocated, or retrieved from the same VkDevice'
01778	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'offset must be a multiple of 4'
01779	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'countBufferOffset must be a multiple of 4'
01780	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'stride must be a multiple of 4 and must be greater than or equal to sizeof(VkDrawIndirectCommand)'
01781	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'If maxDrawCount is greater than or equal to 1, (stride  (maxDrawCount - 1) + offset + sizeof(VkDrawIndirectCommand)) must be less than or equal to the size of buffer'
01782	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'If the drawIndirectFirstInstance feature is not enabled, all the firstInstance members of the VkDrawIndexedIndirectCommand structures accessed by this command must be 0'
01783	Y	None	vkCmdDrawIndexedIndirectCountAMD	'commandBuffer must be a valid VkCommandBuffer handle'
01784	Y	None	vkCmdDrawIndexedIndirectCountAMD	'buffer must be a valid VkBuffer handle'
01785	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'countBuffer must be a valid VkBuffer handle'
01786	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'commandBuffer must be in the recording state'
01787	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'The VkCommandPool that commandBuffer was allocated from must support graphics operations'
01788	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'This command must only be called inside of a render pass instance'
01789	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'Each of buffer, commandBuffer, and countBuffer must have been created, allocated, or retrieved from the same VkDevice'
01790	Y	ViewportAndScissorBoundsChecking	vkCmdSetViewport	'If the VK_AMD_negative_viewport_height extension is enabled, height can also be negative.'
01791	N	Unknown	vkCmdSetViewport	'sType must be VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD'
01792	N	Unknown	vkCmdSetViewport	'pNext must be NULL'
01793	U	Unknown	vkCmdSetViewport	'rasterizationOrder must be a valid VkRasterizationOrderAMD value'
01794	Y	None	vkCreateAndroidSurfaceKHR	'instance must be a valid VkInstance handle'
01795	U	Unknown	vkCreateAndroidSurfaceKHR	'pCreateInfo must be a pointer to a valid VkAndroidSurfaceCreateInfoKHR structure'
01796	U	Unknown	vkCreateAndroidSurfaceKHR	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
01797	U	Unknown	vkCreateAndroidSurfaceKHR	'pSurface must be a pointer to a VkSurfaceKHR handle'
01798	N	Unknown	vkCreateAndroidSurfaceKHR	'window must point to a valid Android ANativeWindow.'
01799	N	Unknown	vkCreateAndroidSurfaceKHR	'sType must be VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR'
01800	N	Unknown	vkCreateAndroidSurfaceKHR	'pNext must be NULL'
01801	U	Unknown	vkCreateAndroidSurfaceKHR	'flags must be 0'
01802	Y	None	vkCreateMirSurfaceKHR	'instance must be a valid VkInstance handle'
01803	U	Unknown	vkCreateMirSurfaceKHR	'pCreateInfo must be a pointer to a valid VkMirSurfaceCreateInfoKHR structure'
01804	U	Unknown	vkCreateMirSurfaceKHR	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
01805	U	Unknown	vkCreateMirSurfaceKHR	'pSurface must be a pointer to a VkSurfaceKHR handle'
01806	N	Unknown	vkCreateMirSurfaceKHR	'connection must point to a valid MirConnection.'
01807	N	Unknown	vkCreateMirSurfaceKHR	'surface must point to a valid MirSurface.'
01808	N	Unknown	vkCreateMirSurfaceKHR	'sType must be VK_STRUCTURE_TYPE_MIR_SURFACE_CREATE_INFO_KHR'
01809	U	Unknown	vkCreateMirSurfaceKHR	'pNext must be NULL'
01810	U	Unknown	vkCreateMirSurfaceKHR	'flags must be 0'
01811	Y	None	vkCreateWaylandSurfaceKHR	'instance must be a valid VkInstance handle'
01812	U	Unknown	vkCreateWaylandSurfaceKHR	'pCreateInfo must be a pointer to a valid VkWaylandSurfaceCreateInfoKHR structure'
01813	U	Unknown	vkCreateWaylandSurfaceKHR	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
01814	U	Unknown	vkCreateWaylandSurfaceKHR	'pSurface must be a pointer to a VkSurfaceKHR handle'
01815	N	Unknown	vkCreateWaylandSurfaceKHR	'display must point to a valid Wayland wl_display.'
01816	N	Unknown	vkCreateWaylandSurfaceKHR	'surface must point to a valid Wayland wl_surface.'
01817	N	Unknown	vkCreateWaylandSurfaceKHR	'sType must be VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR'
01818	U	Unknown	vkCreateWaylandSurfaceKHR	'pNext must be NULL'
01819	U	Unknown	vkCreateWaylandSurfaceKHR	'flags must be 0'
01820	Y	None	vkCreateWin32SurfaceKHR	'instance must be a valid VkInstance handle'
01821	U	Unknown	vkCreateWin32SurfaceKHR	'pCreateInfo must be a pointer to a valid VkWin32SurfaceCreateInfoKHR structure'
01822	U	Unknown	vkCreateWin32SurfaceKHR	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
01823	U	Unknown	vkCreateWin32SurfaceKHR	'pSurface must be a pointer to a VkSurfaceKHR handle'
01824	N	Unknown	vkCreateWin32SurfaceKHR	'sType must be VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR'
01825	N	Unknown	vkCreateWin32SurfaceKHR	'pNext must be NULL'
01826	N	Unknown	vkCreateWin32SurfaceKHR	'flags must be 0'
01827	Y	None	vkCreateXcbSurfaceKHR	'instance must be a valid VkInstance handle'
01828	U	Unknown	vkCreateXcbSurfaceKHR	'pCreateInfo must be a pointer to a valid VkXcbSurfaceCreateInfoKHR structure'
01829	U	Unknown	vkCreateXcbSurfaceKHR	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
01830	U	Unknown	vkCreateXcbSurfaceKHR	'pSurface must be a pointer to a VkSurfaceKHR handle'
01831	N	Unknown	vkCreateXcbSurfaceKHR	'sType must be VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR'
01832	N	Unknown	vkCreateXcbSurfaceKHR	'pNext must be NULL'
01833	N	Unknown	vkCreateXcbSurfaceKHR	'flags must be 0'
01834	U	Unknown	vkCreateXcbSurfaceKHR	'connection must point to a valid X11 xcb_connection_t.'
01836	Y	None	vkCreateXlibSurfaceKHR	'instance must be a valid VkInstance handle'
01837	U	Unknown	vkCreateXlibSurfaceKHR	'pCreateInfo must be a pointer to a valid VkXlibSurfaceCreateInfoKHR structure'
01838	U	Unknown	vkCreateXlibSurfaceKHR	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
01839	U	Unknown	vkCreateXlibSurfaceKHR	'pSurface must be a pointer to a VkSurfaceKHR handle'
01840	N	Unknown	vkCreateXlibSurfaceKHR	'sType must be VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR'
01841	N	Unknown	vkCreateXlibSurfaceKHR	'pNext must be NULL'
01842	N	Unknown	vkCreateXlibSurfaceKHR	'flags must be 0'
01843	U	Unknown	vkCreateXlibSurfaceKHR	'dpy must point to a valid Xlib Display.'
01844	U	Unknown	vkDestroySurfaceKHR	'All VkSwapchainKHR objects created for surface must have been destroyed prior to destroying surface'
01845	Y	Unknown	vkDestroySurfaceKHR	'If VkAllocationCallbacks were provided when surface was created, a compatible set of callbacks must be provided here'
01846	Y	Unknown	vkDestroySurfaceKHR	'If no VkAllocationCallbacks were provided when surface was created, pAllocator must be NULL'
01847	Y	None	vkDestroySurfaceKHR	'instance must be a valid VkInstance handle'
01848	Y	None	vkDestroySurfaceKHR	'If surface is not VK_NULL_HANDLE, surface must be a valid VkSurfaceKHR handle'
01849	U	Unknown	vkDestroySurfaceKHR	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
01850	U	Unknown	vkDestroySurfaceKHR	'If surface is a valid handle, it must have been created, allocated, or retrieved from instance'
01851	Y	Unknown	vkGetPhysicalDeviceDisplayPropertiesKHR	'physicalDevice must be a valid VkPhysicalDevice handle'
01852	U	Unknown	vkGetPhysicalDeviceDisplayPropertiesKHR	'pPropertyCount must be a pointer to a uint32_t value'
01853	U	Unknown	vkGetPhysicalDeviceDisplayPropertiesKHR	'If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a pointer to an array of pPropertyCount VkDisplayPropertiesKHR structures'
01854	Y	Unknown	vkGetPhysicalDeviceDisplayPlanePropertiesKHR	'physicalDevice must be a valid VkPhysicalDevice handle'
01855	U	Unknown	vkGetPhysicalDeviceDisplayPlanePropertiesKHR	'pPropertyCount must be a pointer to a uint32_t value'
01856	U	Unknown	vkGetPhysicalDeviceDisplayPlanePropertiesKHR	'If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a pointer to an array of pPropertyCount VkDisplayPlanePropertiesKHR structures'
01857	U	Unknown	vkGetDisplayPlaneSupportedDisplaysKHR	'planeIndex must be less than the number of display planes supported by the device as determined by calling vkGetPhysicalDeviceDisplayPlanePropertiesKHR'
01858	Y	Unknown	vkGetDisplayPlaneSupportedDisplaysKHR	'physicalDevice must be a valid VkPhysicalDevice handle'
01859	U	Unknown	vkGetDisplayPlaneSupportedDisplaysKHR	'pDisplayCount must be a pointer to a uint32_t value'
01860	U	Unknown	vkGetDisplayPlaneSupportedDisplaysKHR	'If the value referenced by pDisplayCount is not 0, and pDisplays is not NULL, pDisplays must be a pointer to an array of pDisplayCount VkDisplayKHR handles'
01861	Y	Unknown	vkGetDisplayModePropertiesKHR	'physicalDevice must be a valid VkPhysicalDevice handle'
01862	Y	Unknown	vkGetDisplayModePropertiesKHR	'display must be a valid VkDisplayKHR handle'
01863	U	Unknown	vkGetDisplayModePropertiesKHR	'pPropertyCount must be a pointer to a uint32_t value'
01864	U	Unknown	vkGetDisplayModePropertiesKHR	'If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a pointer to an array of pPropertyCount VkDisplayModePropertiesKHR structures'
01865	Y	Unknown	vkCreateDisplayModeKHR	'physicalDevice must be a valid VkPhysicalDevice handle'
01866	Y	Unknown	vkCreateDisplayModeKHR	'display must be a valid VkDisplayKHR handle'
01867	U	Unknown	vkCreateDisplayModeKHR	'pCreateInfo must be a pointer to a valid VkDisplayModeCreateInfoKHR structure'
01868	U	Unknown	vkCreateDisplayModeKHR	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
01869	U	Unknown	vkCreateDisplayModeKHR	'pMode must be a pointer to a VkDisplayModeKHR handle'
01870	U	Unknown	vkCreateDisplayModeKHR	'The width and height members of the visibleRegion member of parameters must be greater than 0'
01871	U	Unknown	vkCreateDisplayModeKHR	'The refreshRate member of parameters must be greater than 0'
01872	N	Unknown	vkCreateDisplayModeKHR	'sType must be VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR'
01873	N	Unknown	vkCreateDisplayModeKHR	'pNext must be NULL'
01874	N	Unknown	vkCreateDisplayModeKHR	'flags must be 0'
01875	Y	Unknown	vkGetDisplayPlaneCapabilitiesKHR	'physicalDevice must be a valid VkPhysicalDevice handle'
01876	Y	Unknown	vkGetDisplayPlaneCapabilitiesKHR	'mode must be a valid VkDisplayModeKHR handle'
01877	U	Unknown	vkGetDisplayPlaneCapabilitiesKHR	'pCapabilities must be a pointer to a VkDisplayPlaneCapabilitiesKHR structure'
01878	Y	None	vkCreateDisplayPlaneSurfaceKHR	'instance must be a valid VkInstance handle'
01879	U	Unknown	vkCreateDisplayPlaneSurfaceKHR	'pCreateInfo must be a pointer to a valid VkDisplaySurfaceCreateInfoKHR structure'
01880	U	Unknown	vkCreateDisplayPlaneSurfaceKHR	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
01881	U	Unknown	vkCreateDisplayPlaneSurfaceKHR	'pSurface must be a pointer to a VkSurfaceKHR handle'
01882	U	Unknown	vkCreateDisplayPlaneSurfaceKHR	'planeIndex must be less than the number of display planes supported by the device as determined by calling vkGetPhysicalDeviceDisplayPlanePropertiesKHR'
01883	N	Unknown	vkCreateDisplayPlaneSurfaceKHR	'sType must be VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR'
01884	N	Unknown	vkCreateDisplayPlaneSurfaceKHR	'pNext must be NULL'
01885	N	Unknown	vkCreateDisplayPlaneSurfaceKHR	'flags must be 0'
01886	U	Unknown	vkCreateDisplayPlaneSurfaceKHR	'displayMode must be a valid VkDisplayModeKHR handle'
01887	U	Unknown	vkCreateDisplayPlaneSurfaceKHR	'transform must be a valid VkSurfaceTransformFlagBitsKHR value'
01888	U	Unknown	vkCreateDisplayPlaneSurfaceKHR	'alphaMode must be a valid VkDisplayPlaneAlphaFlagBitsKHR value'
01889	U	Unknown	vkGetPhysicalDeviceSurfaceSupportKHR	'queueFamilyIndex must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties for the given physicalDevice'
01890	Y	None	vkGetPhysicalDeviceSurfaceSupportKHR	'physicalDevice must be a valid VkPhysicalDevice handle'
01891	Y	None	vkGetPhysicalDeviceSurfaceSupportKHR	'surface must be a valid VkSurfaceKHR handle'
01892	U	Unknown	vkGetPhysicalDeviceSurfaceSupportKHR	'pSupported must be a pointer to a VkBool32 value'
01893	U	Unknown	vkGetPhysicalDeviceMirPresentationSupportKHR	'queueFamilyIndex must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties for the given physicalDevice'
01894	Y	None	vkGetPhysicalDeviceMirPresentationSupportKHR	'physicalDevice must be a valid VkPhysicalDevice handle'
01895	U	Unknown	vkGetPhysicalDeviceMirPresentationSupportKHR	'connection must be a pointer to a MirConnection value'
01896	U	Unknown	vkGetPhysicalDeviceWaylandPresentationSupportKHR	'queueFamilyIndex must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties for the given physicalDevice'
01897	Y	None	vkGetPhysicalDeviceWaylandPresentationSupportKHR	'physicalDevice must be a valid VkPhysicalDevice handle'
01898	U	Unknown	vkGetPhysicalDeviceWaylandPresentationSupportKHR	'display must be a pointer to a wl_display value'
01899	U	Unknown	vkGetPhysicalDeviceWin32PresentationSupportKHR	'queueFamilyIndex must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties for the given physicalDevice'
01900	Y	None	vkGetPhysicalDeviceWin32PresentationSupportKHR	'physicalDevice must be a valid VkPhysicalDevice handle'
01901	U	Unknown	vkGetPhysicalDeviceXcbPresentationSupportKHR	'queueFamilyIndex must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties for the given physicalDevice'
01902	Y	None	vkGetPhysicalDeviceXcbPresentationSupportKHR	'physicalDevice must be a valid VkPhysicalDevice handle'
01903	U	Unknown	vkGetPhysicalDeviceXcbPresentationSupportKHR	'connection must be a pointer to a xcb_connection_t value'
01904	U	Unknown	vkGetPhysicalDeviceXlibPresentationSupportKHR	'queueFamilyIndex must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties for the given physicalDevice'
01905	Y	None	vkGetPhysicalDeviceXlibPresentationSupportKHR	'physicalDevice must be a valid VkPhysicalDevice handle'
01906	U	Unknown	vkGetPhysicalDeviceXlibPresentationSupportKHR	'dpy must be a pointer to a Display value'
01907	Y	None	vkGetPhysicalDeviceSurfaceCapabilitiesKHR	'physicalDevice must be a valid VkPhysicalDevice handle'
01908	Y	None	vkGetPhysicalDeviceSurfaceCapabilitiesKHR	'surface must be a valid VkSurfaceKHR handle'
01909	U	Unknown	vkGetPhysicalDeviceSurfaceCapabilitiesKHR	'pSurfaceCapabilities must be a pointer to a VkSurfaceCapabilitiesKHR structure'
01910	Y	None	vkGetPhysicalDeviceSurfaceFormatsKHR	'physicalDevice must be a valid VkPhysicalDevice handle'
01911	Y	None	vkGetPhysicalDeviceSurfaceFormatsKHR	'surface must be a valid VkSurfaceKHR handle'
01912	U	Unknown	vkGetPhysicalDeviceSurfaceFormatsKHR	'pSurfaceFormatCount must be a pointer to a uint32_t value'
01913	U	Unknown	vkGetPhysicalDeviceSurfaceFormatsKHR	'If the value referenced by pSurfaceFormatCount is not 0, and pSurfaceFormats is not NULL, pSurfaceFormats must be a pointer to an array of pSurfaceFormatCount VkSurfaceFormatKHR structures'
01914	Y	None	vkGetPhysicalDeviceSurfacePresentModesKHR	'physicalDevice must be a valid VkPhysicalDevice handle'
01915	Y	None	vkGetPhysicalDeviceSurfacePresentModesKHR	'surface must be a valid VkSurfaceKHR handle'
01916	U	Unknown	vkGetPhysicalDeviceSurfacePresentModesKHR	'pPresentModeCount must be a pointer to a uint32_t value'
01917	U	Unknown	vkGetPhysicalDeviceSurfacePresentModesKHR	'If the value referenced by pPresentModeCount is not 0, and pPresentModes is not NULL, pPresentModes must be a pointer to an array of pPresentModeCount VkPresentModeKHR values'
01918	Y	None	vkCreateSwapchainKHR	'device must be a valid VkDevice handle'
01919	U	Unknown	vkCreateSwapchainKHR	'pCreateInfo must be a pointer to a valid VkSwapchainCreateInfoKHR structure'
01920	U	Unknown	vkCreateSwapchainKHR	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
01921	U	Unknown	vkCreateSwapchainKHR	'pSwapchain must be a pointer to a VkSwapchainKHR handle'
01922	U	Unknown	vkCreateSwapchainKHR	'surface must be a surface that is supported by the device as determined using vkGetPhysicalDeviceSurfaceSupportKHR'
01923	N	Unknown	vkCreateSwapchainKHR	'sType must be VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR'
01924	N	Unknown	vkCreateSwapchainKHR	'pNext must be NULL'
01925	N	Unknown	vkCreateSwapchainKHR	'flags must be 0'
01926	Y	None	vkCreateSwapchainKHR	'surface must be a valid VkSurfaceKHR handle'
01927	U	Unknown	vkCreateSwapchainKHR	'imageFormat must be a valid VkFormat value'
01928	U	Unknown	vkCreateSwapchainKHR	'imageColorSpace must be a valid VkColorSpaceKHR value'
01929	U	Unknown	vkCreateSwapchainKHR	'imageUsage must be a valid combination of VkImageUsageFlagBits values'
01930	U	Unknown	vkCreateSwapchainKHR	'imageUsage must not be 0'
01931	U	Unknown	vkCreateSwapchainKHR	'imageSharingMode must be a valid VkSharingMode value'
01932	U	Unknown	vkCreateSwapchainKHR	'preTransform must be a valid VkSurfaceTransformFlagBitsKHR value'
01933	U	Unknown	vkCreateSwapchainKHR	'compositeAlpha must be a valid VkCompositeAlphaFlagBitsKHR value'
01934	U	Unknown	vkCreateSwapchainKHR	'presentMode must be a valid VkPresentModeKHR value'
01935	Y	None	vkCreateSwapchainKHR	'If oldSwapchain is not VK_NULL_HANDLE, oldSwapchain must be a valid VkSwapchainKHR handle'
01936	U	Unknown	vkCreateSwapchainKHR	'If oldSwapchain is a valid handle, it must have been created, allocated, or retrieved from surface'
01937	U	Unknown	vkDestroySwapchainKHR	'All uses of presentable images acquired from swapchain must have completed execution'
01938	Y	Unknown	vkDestroySwapchainKHR	'If VkAllocationCallbacks were provided when swapchain was created, a compatible set of callbacks must be provided here'
01939	Y	Unknown	vkDestroySwapchainKHR	'If no VkAllocationCallbacks were provided when swapchain was created, pAllocator must be NULL'
01940	U	Unknown	vkDestroySwapchainKHR	'device must be a valid VkDevice handle'
01941	U	Unknown	vkDestroySwapchainKHR	'If swapchain is not VK_NULL_HANDLE, swapchain must be a valid VkSwapchainKHR handle'
01942	U	Unknown	vkDestroySwapchainKHR	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
01943	Y	None	vkCreateSharedSwapchainsKHR	'device must be a valid VkDevice handle'
01944	U	Unknown	vkCreateSharedSwapchainsKHR	'pCreateInfos must be a pointer to an array of swapchainCount valid VkSwapchainCreateInfoKHR structures'
01945	U	Unknown	vkCreateSharedSwapchainsKHR	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
01946	U	Unknown	vkCreateSharedSwapchainsKHR	'pSwapchains must be a pointer to an array of swapchainCount VkSwapchainKHR handles'
01947	U	Unknown	vkCreateSharedSwapchainsKHR	'swapchainCount must be greater than 0'
01948	Y	None	vkGetSwapchainImagesKHR	'device must be a valid VkDevice handle'
01949	U	Unknown	vkGetSwapchainImagesKHR	'swapchain must be a valid VkSwapchainKHR handle'
01950	U	Unknown	vkGetSwapchainImagesKHR	'pSwapchainImageCount must be a pointer to a uint32_t value'
01951	U	Unknown	vkGetSwapchainImagesKHR	'If the value referenced by pSwapchainImageCount is not 0, and pSwapchainImages is not NULL, pSwapchainImages must be a pointer to an array of pSwapchainImageCount VkImage handles'
01952	Y	Unknown	vkAcquireNextImageKHR	'If semaphore is not VK_NULL_HANDLE it must be unsignaled'
01953	U	Unknown	vkAcquireNextImageKHR	'If fence is not VK_NULL_HANDLE it must be unsignaled and must not be associated with any other queue command that has not yet completed execution on that queue'
01954	Y	None	vkAcquireNextImageKHR	'device must be a valid VkDevice handle'
01955	Y	None	vkAcquireNextImageKHR	'swapchain must be a valid VkSwapchainKHR handle'
01956	Y	None	vkAcquireNextImageKHR	'If semaphore is not VK_NULL_HANDLE, semaphore must be a valid VkSemaphore handle'
01957	Y	None	vkAcquireNextImageKHR	'If fence is not VK_NULL_HANDLE, fence must be a valid VkFence handle'
01958	U	Unknown	vkAcquireNextImageKHR	'pImageIndex must be a pointer to a uint32_t value'
01959	U	Unknown	vkAcquireNextImageKHR	'If semaphore is a valid handle, it must have been created, allocated, or retrieved from device'
01960	U	Unknown	vkAcquireNextImageKHR	'If fence is a valid handle, it must have been created, allocated, or retrieved from device'
01961	Y	Unknown	vkQueuePresentKHR	'Any given element of pSwapchains member of pPresentInfo must be a swapchain that is created for a surface for which presentation is supported from queue as determined using a call to vkGetPhysicalDeviceSurfaceSupportKHR'
01962	Y	None	vkQueuePresentKHR	'queue must be a valid VkQueue handle'
01963	U	Unknown	vkQueuePresentKHR	'pPresentInfo must be a pointer to a valid VkPresentInfoKHR structure'
01964	Y	Unknown	vkQueuePresentKHR	'Any given element of pImageIndices must be the index of a presentable image acquired from the swapchain specified by the corresponding element of the pSwapchains array, and the presented image subresource must be in the VK_IMAGE_LAYOUT_PRESENT_SRC_KHR layout at the time the operation is executed on a VkDevice'
01965	U	Unknown	vkQueuePresentKHR	'Any given element of VkSemaphore in pWaitSemaphores must refer to a prior signal of that VkSemaphore that will not be consumed by any other wait on that semaphore'
01966	N	Unknown	vkQueuePresentKHR	'sType must be VK_STRUCTURE_TYPE_PRESENT_INFO_KHR'
01967	N	Unknown	vkQueuePresentKHR	'pNext must be NULL'
01968	Y	None	vkQueuePresentKHR	'If waitSemaphoreCount is not 0, and pWaitSemaphores is not NULL, pWaitSemaphores must be a pointer to an array of waitSemaphoreCount valid VkSemaphore handles'
01969	Y	None	vkQueuePresentKHR	'pSwapchains must be a pointer to an array of swapchainCount valid VkSwapchainKHR handles'
01970	U	Unknown	vkQueuePresentKHR	'pImageIndices must be a pointer to an array of swapchainCount uint32_t values'
01971	U	Unknown	vkQueuePresentKHR	'If pResults is not NULL, pResults must be a pointer to an array of swapchainCount VkResult values'
01972	U	Unknown	vkQueuePresentKHR	'swapchainCount must be greater than 0'
01973	U	Unknown	vkQueuePresentKHR	'srcRect must specify a rectangular region that is a subset of the image being presented'
01974	U	Unknown	vkQueuePresentKHR	'dstRect must specify a rectangular region that is a subset of the visibleRegion parameter of the display mode the swapchain being presented uses'
01975	U	Unknown	vkQueuePresentKHR	'If the persistentContent member of the VkDisplayPropertiesKHR structure returned by vkGetPhysicalDeviceDisplayPropertiesKHR for the display the present operation targets then persistent must be VK_FALSE'
01976	N	Unknown	vkQueuePresentKHR	'sType must be VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR'
01977	N	Unknown	vkQueuePresentKHR	'pNext must be NULL'
01978	U	Unknown	vkEnumerateInstanceExtensionProperties	'If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a pointer to an array of pPropertyCount VkExtensionProperties structures'
01979	U	Unknown	vkGetPhysicalDeviceFeatures	'physicalDevice must be a valid VkPhysicalDevice handle'
01980	Y	None	vkGetPhysicalDeviceExternalImageFormatPropertiesNV	'physicalDevice must be a valid VkPhysicalDevice handle'
01981	U	Unknown	vkGetPhysicalDeviceExternalImageFormatPropertiesNV	'format must be a valid VkFormat value'
01982	U	Unknown	vkGetPhysicalDeviceExternalImageFormatPropertiesNV	'type must be a valid VkImageType value'
01983	U	Unknown	vkGetPhysicalDeviceExternalImageFormatPropertiesNV	'tiling must be a valid VkImageTiling value'
01984	U	Unknown	vkGetPhysicalDeviceExternalImageFormatPropertiesNV	'usage must be a valid combination of VkImageUsageFlagBits values'
01985	U	Unknown	vkGetPhysicalDeviceExternalImageFormatPropertiesNV	'usage must not be 0'
01986	N	Unknown	vkGetPhysicalDeviceExternalImageFormatPropertiesNV	'flags must be a valid combination of VkImageCreateFlagBits values'
01988	U	Unknown	vkGetPhysicalDeviceExternalImageFormatPropertiesNV	'externalHandleType must be a valid combination of VkExternalMemoryHandleTypeFlagBitsNV values'
01990	U	Unknown	vkGetPhysicalDeviceExternalImageFormatPropertiesNV	'pExternalImageFormatProperties must be a pointer to a VkExternalImageFormatPropertiesNV structure'
01998	U	Unknown	vkDebugMarkerSetObjectNameEXT	'pNameInfo.object must be a Vulkan object'
01999	Y	None	vkDebugMarkerSetObjectNameEXT	'device must be a valid VkDevice handle'
02000	U	Unknown	vkDebugMarkerSetObjectNameEXT	'pNameInfo must be a pointer to a VkDebugMarkerObjectNameInfoEXT structure'
02001	N	Unknown	vkDebugMarkerSetObjectNameEXT	'sType must be VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT'
02002	N	Unknown	vkDebugMarkerSetObjectNameEXT	'pNext must be NULL'
02003	U	Unknown	vkDebugMarkerSetObjectNameEXT	'objectType must be a valid VkDebugReportObjectTypeEXT value'
02004	U	Unknown	vkDebugMarkerSetObjectNameEXT	'pObjectName must be a null-terminated string'
02005	U	Unknown	vkDebugMarkerSetObjectTagEXT	'pTagInfo.object must be a Vulkan object'
02006	U	Unknown	vkDebugMarkerSetObjectTagEXT	'pTagInfo.tagName must not be 0'
02007	Y	None	vkDebugMarkerSetObjectTagEXT	'device must be a valid VkDevice handle'
02008	U	Unknown	vkDebugMarkerSetObjectTagEXT	'pTagInfo must be a pointer to a VkDebugMarkerObjectTagInfoEXT structure'
02009	N	Unknown	vkDebugMarkerSetObjectTagEXT	'sType must be VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT'
02010	N	Unknown	vkDebugMarkerSetObjectTagEXT	'pNext must be NULL'
02011	U	Unknown	vkDebugMarkerSetObjectTagEXT	'objectType must be a valid VkDebugReportObjectTypeEXT value'
02012	U	Unknown	vkDebugMarkerSetObjectTagEXT	'pTag must be a pointer to an array of tagSize bytes'
02013	U	Unknown	vkDebugMarkerSetObjectTagEXT	'tagSize must be greater than 0'
02014	Y	None	vkCmdDebugMarkerBeginEXT	'commandBuffer must be a valid VkCommandBuffer handle'
02015	U	Unknown	vkCmdDebugMarkerBeginEXT	'pMarkerInfo must be a pointer to a VkDebugMarkerMarkerInfoEXT structure'
02016	U	Unknown	vkCmdDebugMarkerBeginEXT	'commandBuffer must be in the recording state'
02017	U	Unknown	vkCmdDebugMarkerBeginEXT	'The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations'
02018	N	Unknown	vkCmdDebugMarkerBeginEXT	'sType must be VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT'
02019	N	Unknown	vkCmdDebugMarkerBeginEXT	'pNext must be NULL'
02020	U	Unknown	vkCmdDebugMarkerBeginEXT	'pMarkerName must be a null-terminated string'
02021	U	Unknown	vkCmdDebugMarkerEndEXT	'There must be an outstanding vkCmdDebugMarkerBeginEXT command prior to the vkCmdDebugMarkerEndEXT on the queue that commandBuffer is submitted to'
02022	Y	None	vkCmdDebugMarkerEndEXT	'commandBuffer must be a valid VkCommandBuffer handle'
02023	U	Unknown	vkCmdDebugMarkerEndEXT	'commandBuffer must be in the recording state'
02024	U	Unknown	vkCmdDebugMarkerEndEXT	'The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations'
02025	Y	None	vkCmdDebugMarkerInsertEXT	'commandBuffer must be a valid VkCommandBuffer handle'
02026	U	Unknown	vkCmdDebugMarkerInsertEXT	'pMarkerInfo must be a pointer to a VkDebugMarkerMarkerInfoEXT structure'
02027	U	Unknown	vkCmdDebugMarkerInsertEXT	'commandBuffer must be in the recording state'
02028	U	Unknown	vkCmdDebugMarkerInsertEXT	'The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations'
02029	U	Unknown	vkCreateDebugReportCallbackEXT	'instance must be a valid VkInstance handle'
02030	U	Unknown	vkCreateDebugReportCallbackEXT	'pCreateInfo must be a pointer to a valid VkDebugReportCallbackCreateInfoEXT structure'
02031	U	Unknown	vkCreateDebugReportCallbackEXT	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
02032	U	Unknown	vkCreateDebugReportCallbackEXT	'pCallback must be a pointer to a VkDebugReportCallbackEXT handle'
02033	N	Unknown	vkCreateDebugReportCallbackEXT	'sType must be VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT'
02034	N	Unknown	vkCreateDebugReportCallbackEXT	'pNext must be NULL'
02035	N	Unknown	vkCreateDebugReportCallbackEXT	'flags must be a valid combination of VkDebugReportFlagBitsEXT values'
02036	U	Unknown	vkCreateDebugReportCallbackEXT	'flags must not be 0'
02040	U	Unknown	vkDebugReportMessageEXT	'object may be a Vulkan object'
02043	U	Unknown	vkDebugReportMessageEXT	'instance must be a valid VkInstance handle'
02044	N	Unknown	vkDebugReportMessageEXT	'flags must be a valid combination of VkDebugReportFlagBitsEXT values'
02045	U	Unknown	vkDebugReportMessageEXT	'flags must not be 0'
02046	U	Unknown	vkDebugReportMessageEXT	'objectType must be a valid VkDebugReportObjectTypeEXT value'
02047	U	Unknown	vkDebugReportMessageEXT	'pLayerPrefix must be a null-terminated string'
02048	U	Unknown	vkDebugReportMessageEXT	'pMessage must be a null-terminated string'
02049	Y	Unknown	vkDestroyDebugReportCallbackEXT	'If VkAllocationCallbacks were provided when instance was created, a compatible set of callbacks must be provided here'
02050	Y	Unknown	vkDestroyDebugReportCallbackEXT	'If no VkAllocationCallbacks were provided when instance was created, pAllocator must be NULL'
02051	U	Unknown	vkDestroyDebugReportCallbackEXT	'instance must be a valid VkInstance handle'
02052	U	Unknown	vkDestroyDebugReportCallbackEXT	'callback must be a valid VkDebugReportCallbackEXT handle'
02053	U	Unknown	vkDestroyDebugReportCallbackEXT	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
02054	U	Unknown	vkDestroyDebugReportCallbackEXT	'callback must have been created, allocated, or retrieved from instance'
02055	U	Unknown	vkDestroyDevice	'queueCount must be less than or equal to the queueCount member of the VkQueueFamilyProperties structure, as returned by vkGetPhysicalDeviceQueueFamilyProperties in the pQueueFamilyProperties[queueFamilyIndex]'
02056	U	Unknown	vkDestroyDevice	'Each element of pQueuePriorities must be between 0.0 and 1.0 inclusive'
02057	Y	Unknown	vkCmdExecuteCommands	'If vkCmdExecuteCommands is being called within a render pass instance, any given element of pCommandBuffers must have been recorded with the VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT'
02058	U	Unknown	vkCmdExecuteCommands	'If vkCmdExecuteCommands is being called within a render pass instance, any given element of pCommandBuffers must have been recorded with VkCommandBufferInheritanceInfo::subpass set to the index of the subpass which the given command buffer will be executed in'
02059	U	Unknown	vkCmdExecuteCommands	'If vkCmdExecuteCommands is being called within a render pass instance, the render passes specified in the pname::pBeginInfo::pInheritanceInfo::renderPass members of the vkBeginCommandBuffer commands used to begin recording each element of pCommandBuffers must be compatible with the current render pass.'
02060	U	Unknown	vkCmdExecuteCommands	'If vkCmdExecuteCommands is being called within a render pass instance, and any given element of pCommandBuffers was recorded with VkCommandBufferInheritanceInfo::framebuffer not equal to VK_NULL_HANDLE, that VkFramebuffer must match the VkFramebuffer used in the current render pass instance'
02061	U	Unknown	vkCmdExecuteCommands	'If vkCmdExecuteCommands is not being called within a render pass instance, any given element of pCommandBuffers must not have been recorded with the VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT'
02062	Y	Unknown	vkCmdExecuteCommands	'If the inherited queries feature is not enabled, commandBuffer must not have any queries active'
02063	U	Unknown	vkCmdExecuteCommands	'If commandBuffer has a VK_QUERY_TYPE_OCCLUSION query active, then each element of pCommandBuffers must have been recorded with VkCommandBufferInheritanceInfo::occlusionQueryEnable set to VK_TRUE'
02064	U	Unknown	vkCmdExecuteCommands	'If commandBuffer has a VK_QUERY_TYPE_OCCLUSION query active, then each element of pCommandBuffers must have been recorded with VkCommandBufferInheritanceInfo::queryFlags having all bits set that are set for the query'
02065	U	Unknown	vkCmdExecuteCommands	'If commandBuffer has a VK_QUERY_TYPE_PIPELINE_STATISTICS query active, then each element of pCommandBuffers must have been recorded with VkCommandBufferInheritanceInfo::pipelineStatistics having all bits set that are set in the VkQueryPool the query uses'
02066	U	Unknown	vkCmdExecuteCommands	'Any given element of pCommandBuffers must not begin any query types that are active in commandBuffer'
02067	U	Unknown	vkCmdWaitEvents	'If the geometry shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT'
02068	U	Unknown	vkCmdWaitEvents	'If the geometry shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT'
02069	U	Unknown	vkCmdWaitEvents	'If the tessellation shaders feature is not enabled, srcStageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT'
02070	U	Unknown	vkCmdWaitEvents	'If the tessellation shaders feature is not enabled, dstStageMask must not contain VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT or VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT'
02071	U	Unknown	vkCmdWaitEvents	'If pEvents includes one or more events that will be signaled by vkSetEvent after commandBuffer has been submitted to a queue, then vkCmdWaitEvents must not be called inside a render pass instance'
02072	U	Unknown	vkCmdPipelineBarrier	'srcStageMask must contain a subset of the bit values in the srcStageMask member of that instance of VkSubpassDependency'
02073	U	Unknown	vkCmdPipelineBarrier	'dstStageMask must contain a subset of the bit values in the dstStageMask member of that instance of VkSubpassDependency'
02074	U	Unknown	vkCmdPipelineBarrier	'The srcAccessMask of any element of pMemoryBarriers or pImageMemoryBarriers must contain a subset of the bit values the srcAccessMask member of that instance of VkSubpassDependency'
02075	U	Unknown	vkCmdPipelineBarrier	'The dstAccessMask of any element of pMemoryBarriers or pImageMemoryBarriers must contain a subset of the bit values the dstAccessMask member of that instance of VkSubpassDependency'
02076	U	Unknown	vkCmdPipelineBarrier	'dependencyFlags must be equal to the dependencyFlags member of that instance of VkSubpassDependency'
02077	U	Unknown	vkCmdPipelineBarrier	'If vkCmdPipelineBarrier is called within a render pass instance, bufferMemoryBarrierCount must be 0'
02078	U	Unknown	vkCmdPipelineBarrier	'If vkCmdPipelineBarrier is called within a render pass instance, the image member of any element of pImageMemoryBarriers must be equal to one of the elements of pAttachments that the current framebuffer was created with, that is also referred to by one of the elements of the pColorAttachments, pResolveAttachments or pDepthStencilAttachment members of the VkSubpassDescription instance that the current subpass was created with'
02079	U	Unknown	vkCmdPipelineBarrier	'If vkCmdPipelineBarrier is called within a render pass instance, the oldLayout and newLayout members of any element of pImageMemoryBarriers must be equal to the layout member of an element of the pColorAttachments, pResolveAttachments or pDepthStencilAttachment members of the VkSubpassDescription instance that the current subpass was created with, that refers to the same image'
02080	U	Unknown	vkCmdPipelineBarrier	'If vkCmdPipelineBarrier is called within a render pass instance, the oldLayout and newLayout members of an element of pImageMemoryBarriers must be equal'
02081	U	Unknown	vkCmdPipelineBarrier	'If vkCmdPipelineBarrier is called within a render pass instance, the srcQueueFamilyIndex and dstQueueFamilyIndex members of any element of pImageMemoryBarriers must be VK_QUEUE_FAMILY_IGNORED'
02082	U	Unknown	vkCreateShaderModule	'pCode must not declare any capability that is not supported by the API, as described by the Capabilities section of the SPIR-V Environment appendix'
02083	U	Unknown	vkCreateShaderModule	'If pCode declares any of the capabilities that are listed as not required by the implementation, the relevant feature must be enabled, as listed in the SPIR-V Environment appendix'
02084	U	Unknown	vkCreateComputePipelines	'If the identified entry point includes any variable in its interface that is declared with the ClipDistance BuiltIn decoration, that variable must not have an array size greater than VkPhysicalDeviceLimits::maxClipDistances'
02085	U	Unknown	vkCreateComputePipelines	'If the identified entry point includes any variable in its interface that is declared with the CullDistance BuiltIn decoration, that variable must not have an array size greater than VkPhysicalDeviceLimits::maxCullDistances'
02086	U	Unknown	vkCreateComputePipelines	'If the identified entry point includes any variables in its interface that are declared with the ClipDistance or CullDistance BuiltIn decoration, those variables must not have array sizes which sum to more than VkPhysicalDeviceLimits::maxCombinedClipAndCullDistances'
02087	U	Unknown	vkCreateComputePipelines	'If the identified entry point includes any variable in its interface that is declared with the SampleMask BuiltIn decoration, that variable must not have an array size greater than VkPhysicalDeviceLimits::maxSampleMaskWords'
02088	U	Unknown	vkCreateComputePipelines	'If stage is VK_SHADER_STAGE_VERTEX_BIT, the identified entry point must not include any input variable in its interface that is decorated with CullDistance'
02089	U	Unknown	vkCreateComputePipelines	'If stage is VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT or VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT, and the identified entry point has an OpExecutionMode instruction that specifies a patch size with OutputVertices, the patch size must be greater than 0 and less than or equal to VkPhysicalDeviceLimits::maxTessellationPatchSize'
02090	U	Unknown	vkCreateComputePipelines	'If stage is VK_SHADER_STAGE_GEOMETRY_BIT, the identified entry point must have an OpExecutionMode instruction that specifies a maximum output vertex count that is greater than 0 and less than or equal to VkPhysicalDeviceLimits::maxGeometryOutputVertices'
02091	U	Unknown	vkCreateComputePipelines	'If stage is VK_SHADER_STAGE_GEOMETRY_BIT, the identified entry point must have an OpExecutionMode instruction that specifies an invocation count that is greater than 0 and less than or equal to VkPhysicalDeviceLimits::maxGeometryShaderInvocations'
02092	U	Unknown	vkCreateComputePipelines	'If stage is VK_SHADER_STAGE_GEOMETRY_BIT, and the identified entry point writes to Layer for any primitive, it must write the same value to Layer for all vertices of a given primitive'
02093	U	Unknown	vkCreateComputePipelines	'If stage is VK_SHADER_STAGE_GEOMETRY_BIT, and the identified entry point writes to ViewportIndex for any primitive, it must write the same value to ViewportIndex for all vertices of a given primitive'
02094	U	Unknown	vkCreateComputePipelines	'If stage is VK_SHADER_STAGE_FRAGMENT_BIT, the identified entry point must not include any output variables in its interface decorated with CullDistance'
02095	U	Unknown	vkCreateComputePipelines	'If stage is VK_SHADER_STAGE_FRAGMENT_BIT, and the identified entry point writes to FragDepth in any execution path, it must write to FragDepth in all execution paths'
02096	U	Unknown	vkCreateGraphicsPipelines	'If pStages includes tessellation shader stages, and the shader code of both stages contain an OpExecutionMode instruction that specifies the type of subdivision in the pipeline, they must both specify the same subdivision mode'
02097	U	Unknown	vkCreateGraphicsPipelines	'If pStages includes tessellation shader stages, the shader code of at least one stage must contain an OpExecutionMode instruction that specifies the output patch size in the pipeline'
02098	U	Unknown	vkCreateGraphicsPipelines	'If pStages includes tessellation shader stages, and the shader code of both contain an OpExecutionMode instruction that specifies the out patch size in the pipeline, they must both specify the same patch size'
02099	U	Unknown	vkCreateGraphicsPipelines	'If pStages includes tessellation shader stages, the topology member of pInputAssembly must be VK_PRIMITIVE_TOPOLOGY_PATCH_LIST'
02100	U	Unknown	vkCreateGraphicsPipelines	'If the topology member of pInputAssembly is VK_PRIMITIVE_TOPOLOGY_PATCH_LIST, pStages must include tessellation shader stages'
02101	U	Unknown	vkCreateGraphicsPipelines	'If pStages includes a geometry shader stage, and does not include any tessellation shader stages, its shader code must contain an OpExecutionMode instruction that specifies an input primitive type that is compatible with the primitive topology specified in pInputAssembly'
02102	U	Unknown	vkCreateGraphicsPipelines	'If pStages includes a geometry shader stage, and also includes tessellation shader stages, its shader code must contain an OpExecutionMode instruction that specifies an input primitive type that is compatible with the primitive topology that is output by the tessellation stages'
02103	U	Unknown	vkCreateGraphicsPipelines	'If pStages includes a fragment shader stage and a geometry shader stage, and the fragment shader code reads from an input variable that is decorated with PrimitiveID, then the geometry shader code must write to a matching output variable, decorated with PrimitiveID, in all execution paths'
02104	U	Unknown	vkCreateGraphicsPipelines	'If pStages includes a fragment shader stage, its shader code must not read from any input attachment that is defined as VK_ATTACHMENT_UNUSED in subpass'
02105	U	Unknown	vkCreateGraphicsPipelines	'The shader code for the entry points identified by pStages, and the rest of the state identified by this structure must adhere to the pipeline linking rules described in the Shader Interfaces chapter'
02106	U	Unknown	vkCreateGraphicsPipelines	'If subpass uses a depth/stencil attachment in renderpass that has a layout of VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL in the VkAttachmentReference defined by subpass, and pDepthStencilState is not NULL, the depthWriteEnable member of pDepthStencilState must be VK_FALSE'
02107	U	Unknown	vkCreateGraphicsPipelines	'If subpass uses a depth/stencil attachment in renderpass that has a layout of VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL in the VkAttachmentReference defined by subpass, and pDepthStencilState is not NULL, the failOp, passOp and depthFailOp members of each of the front and back members of pDepthStencilState must be VK_STENCIL_OP_KEEP'
02108	U	Unknown	vkCreateGraphicsPipelines	'If pColorBlendState is not NULL, the blendEnable member of each element of the pAttachment member of pColorBlendState must be VK_FALSE if the format of the attachment referred to in subpass of renderPass does not support color blend operations, as specified by the VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT flag in VkFormatProperties::linearTilingFeatures or VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties'
02109	U	Unknown	vkCreateGraphicsPipelines	'If pColorBlendState is not NULL, The attachmentCount member of pColorBlendState must be equal to the colorAttachmentCount used to create subpass'
02110	Y	Unknown	vkCreateGraphicsPipelines	'If no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_VIEWPORT, the pViewports member of pViewportState must be a pointer to an array of pViewportState::viewportCount VkViewport structures'
02111	Y	Unknown	vkCreateGraphicsPipelines	'If no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_SCISSOR, the pScissors member of pViewportState must be a pointer to an array of pViewportState::scissorCount VkRect2D structures'
02112	U	Unknown	vkCreateGraphicsPipelines	'If the wide lines feature is not enabled, and no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_LINE_WIDTH, the lineWidth member of pRasterizationState must be 1.0'
02113	Y	Unknown	vkCreateGraphicsPipelines	'If the rasterizerDiscardEnable member of pRasterizationState is VK_FALSE, pViewportState must be a pointer to a valid VkPipelineViewportStateCreateInfo structure'
02114	Y	Unknown	vkCreateGraphicsPipelines	'If the rasterizerDiscardEnable member of pRasterizationState is VK_FALSE, pMultisampleState must be a pointer to a valid VkPipelineMultisampleStateCreateInfo structure'
02115	U	Unknown	vkCreateGraphicsPipelines	'If the rasterizerDiscardEnable member of pRasterizationState is VK_FALSE, and subpass uses a depth/stencil attachment, pDepthStencilState must be a pointer to a valid VkPipelineDepthStencilStateCreateInfo structure'
02116	U	Unknown	vkCreateGraphicsPipelines	'If the rasterizerDiscardEnable member of pRasterizationState is VK_FALSE, and subpass uses color attachments, pColorBlendState must be a pointer to a valid VkPipelineColorBlendStateCreateInfo structure'
02117	U	Unknown	vkCreateGraphicsPipelines	'If the depth bias clamping feature is not enabled, no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_DEPTH_BIAS, and the depthBiasEnable member of pDepthStencil is VK_TRUE, the depthBiasClamp member of pDepthStencil must be 0.0'
02118	U	Unknown	vkCreateGraphicsPipelines	'If no element of the pDynamicStates member of pDynamicState is VK_DYNAMIC_STATE_DEPTH_BOUNDS, and the depthBoundsTestEnable member of pDepthStencil is VK_TRUE, the minDepthBounds and maxDepthBounds members of pDepthStencil must be between 0.0 and 1.0, inclusive'
02119	U	Unknown	vkCreateGraphicsPipelines	'layout must be consistent with all shaders specified in pStages'
02120	U	Unknown	vkCreateGraphicsPipelines	'If subpass uses color and/or depth/stencil attachments, then the rasterizationSamples member of pMultisampleState must be the same as the sample count for those subpass attachments'
02121	U	Unknown	vkCreateGraphicsPipelines	'If subpass does not use any color and/or depth/stencil attachments, then the rasterizationSamples member of pMultisampleState must follow the rules for a zero-attachment subpass'
02122	U	Unknown	vkCreateGraphicsPipelines	'subpass must be a valid subpass within renderpass'
02123	U	Unknown	vkCreatePipelineCache	'If initialDataSize is not 0, pInitialData must have been retrieved from a previous call to vkGetPipelineCacheData'
02124	U	Unknown	vkCreateBufferView	'If buffer was created with usage containing VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT, format must be supported for storage texel buffers, as specified by the VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT flag in VkFormatProperties::bufferFeatures returned by vkGetPhysicalDeviceFormatProperties'
02125	U	Unknown	vkCreateImage	'If imageType is VK_IMAGE_TYPE_2D and flags does not contain VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT, extent.width and extent.height must be less than or equal to VkPhysicalDeviceLimits::maxImageDimension2D, or VkImageFormatProperties::maxExtent.width/height (as returned by vkGetPhysicalDeviceImageFormatProperties with format, type, tiling, usage, and flags equal to those in this structure) - whichever is higher'
02126	U	Unknown	vkCreateImage	'If imageType is VK_IMAGE_TYPE_2D and flags contains VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT, extent.width and extent.height must be less than or equal to VkPhysicalDeviceLimits::maxImageDimensionCube, or VkImageFormatProperties::maxExtent.width/height (as returned by vkGetPhysicalDeviceImageFormatProperties with format, type, tiling, usage, and flags equal to those in this structure) - whichever is higher'
02127	U	Unknown	vkCreateImage	'If imageType is VK_IMAGE_TYPE_2D and flags contains VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT, extent.width and extent.height must be equal and arrayLayers must be greater than or equal to 6'
02128	U	Unknown	vkCreateImage	'If imageType is VK_IMAGE_TYPE_3D, extent.width, extent.height and extent.depth must be less than or equal to VkPhysicalDeviceLimits::maxImageDimension3D, or VkImageFormatProperties::maxExtent.width/height/depth (as returned by vkGetPhysicalDeviceImageFormatProperties with format, type, tiling, usage, and flags equal to those in this structure) - whichever is higher'
02129	U	Unknown	vkCreateImage	'If imageType is VK_IMAGE_TYPE_1D, both extent.height and extent.depth must be 1'
02130	U	Unknown	vkCreateImage	'If imageType is VK_IMAGE_TYPE_2D, extent.depth must be 1'
02131	U	Unknown	vkCreateImage	'mipLevels must be less than or equal to log2(max(extent.width, extent.height, extent.depth)) + 1.'
02132	U	Unknown	vkCreateImage	'If any of extent.width, extent.height, or extent.depth are greater than the equivalently named members of VkPhysicalDeviceLimits::maxImageDimension3D, mipLevels must be less than or equal to VkImageFormatProperties::maxMipLevels (as returned by vkGetPhysicalDeviceImageFormatProperties with format, type, tiling, usage, and flags equal to those in this structure)'
02133	U	Unknown	vkCreateImage	'arrayLayers must be less than or equal to VkImageFormatProperties::maxArrayLayers (as returned by vkGetPhysicalDeviceImageFormatProperties with format, type, tiling, usage, and flags equal to those in this structure)'
02134	U	Unknown	vkCreateImage	'If samples is not VK_SAMPLE_COUNT_1_BIT, imageType must be VK_IMAGE_TYPE_2D, flags must not contain VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT, tiling must be VK_IMAGE_TILING_OPTIMAL, and mipLevels must be equal to 1'
02135	U	Unknown	vkCreateImage	'If usage includes VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT, then bits other than VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, and VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT must not be set'
02136	U	Unknown	vkCreateImage	'If usage includes VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT, or VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT, extent.width must be less than or equal to VkPhysicalDeviceLimits::maxFramebufferWidth'
02137	U	Unknown	vkCreateImage	'If usage includes VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT, or VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT, extent.height must be less than or equal to VkPhysicalDeviceLimits::maxFramebufferHeight'
02138	U	Unknown	vkCreateImage	'samples must be a bit value that is set in VkImageFormatProperties::sampleCounts returned by vkGetPhysicalDeviceImageFormatProperties with format, type, tiling, usage, and flags equal to those in this structure'
02139	U	Unknown	vkCreateImage	'If the ETC2 texture compression feature is not enabled, format must not be VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK, VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK, VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK, VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK, VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK, VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK, VK_FORMAT_EAC_R11_UNORM_BLOCK, VK_FORMAT_EAC_R11_SNORM_BLOCK, VK_FORMAT_EAC_R11G11_UNORM_BLOCK, or VK_FORMAT_EAC_R11G11_SNORM_BLOCK'
02140	U	Unknown	vkCreateImage	'If the ASTC LDR texture compression feature is not enabled, format must not be VK_FORMAT_ASTC_4x4_UNORM_BLOCK, VK_FORMAT_ASTC_4x4_SRGB_BLOCK, VK_FORMAT_ASTC_5x4_UNORM_BLOCK, VK_FORMAT_ASTC_5x4_SRGB_BLOCK, VK_FORMAT_ASTC_5x5_UNORM_BLOCK, VK_FORMAT_ASTC_5x5_SRGB_BLOCK, VK_FORMAT_ASTC_6x5_UNORM_BLOCK, VK_FORMAT_ASTC_6x5_SRGB_BLOCK, VK_FORMAT_ASTC_6x6_UNORM_BLOCK, VK_FORMAT_ASTC_6x6_SRGB_BLOCK, VK_FORMAT_ASTC_8x5_UNORM_BLOCK, VK_FORMAT_ASTC_8x5_SRGB_BLOCK, VK_FORMAT_ASTC_8x6_UNORM_BLOCK, VK_FORMAT_ASTC_8x6_SRGB_BLOCK, VK_FORMAT_ASTC_8x8_UNORM_BLOCK, VK_FORMAT_ASTC_8x8_SRGB_BLOCK, VK_FORMAT_ASTC_10x5_UNORM_BLOCK, VK_FORMAT_ASTC_10x5_SRGB_BLOCK, VK_FORMAT_ASTC_10x6_UNORM_BLOCK, VK_FORMAT_ASTC_10x6_SRGB_BLOCK, VK_FORMAT_ASTC_10x8_UNORM_BLOCK, VK_FORMAT_ASTC_10x8_SRGB_BLOCK, VK_FORMAT_ASTC_10x10_UNORM_BLOCK, VK_FORMAT_ASTC_10x10_SRGB_BLOCK, VK_FORMAT_ASTC_12x10_UNORM_BLOCK, VK_FORMAT_ASTC_12x10_SRGB_BLOCK, VK_FORMAT_ASTC_12x12_UNORM_BLOCK, or VK_FORMAT_ASTC_12x12_SRGB_BLOCK'
02141	U	Unknown	vkCreateImage	'If the BC texture compression feature is not enabled, format must not be VK_FORMAT_BC1_RGB_UNORM_BLOCK, VK_FORMAT_BC1_RGB_SRGB_BLOCK, VK_FORMAT_BC1_RGBA_UNORM_BLOCK, VK_FORMAT_BC1_RGBA_SRGB_BLOCK, VK_FORMAT_BC2_UNORM_BLOCK, VK_FORMAT_BC2_SRGB_BLOCK, VK_FORMAT_BC3_UNORM_BLOCK, VK_FORMAT_BC3_SRGB_BLOCK, VK_FORMAT_BC4_UNORM_BLOCK, VK_FORMAT_BC4_SNORM_BLOCK, VK_FORMAT_BC5_UNORM_BLOCK, VK_FORMAT_BC5_SNORM_BLOCK, VK_FORMAT_BC6H_UFLOAT_BLOCK, VK_FORMAT_BC6H_SFLOAT_BLOCK, VK_FORMAT_BC7_UNORM_BLOCK, or VK_FORMAT_BC7_SRGB_BLOCK'
02142	U	Unknown	vkCreateImage	'If the multisampled storage images feature is not enabled, and usage contains VK_IMAGE_USAGE_STORAGE_BIT, samples must be VK_SAMPLE_COUNT_1_BIT'
02143	U	Unknown	vkCreateImage	'If the sparse bindings feature is not enabled, flags must not contain VK_IMAGE_CREATE_SPARSE_BINDING_BIT'
02144	U	Unknown	vkCreateImage	'If the sparse residency for 2D images feature is not enabled, and imageType is VK_IMAGE_TYPE_2D, flags must not contain VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT'
02145	U	Unknown	vkCreateImage	'If the sparse residency for 3D images feature is not enabled, and imageType is VK_IMAGE_TYPE_3D, flags must not contain VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT'
02146	U	Unknown	vkCreateImage	'If the sparse residency for images with 2 samples feature is not enabled, imageType is VK_IMAGE_TYPE_2D, and samples is VK_SAMPLE_COUNT_2_BIT, flags must not contain VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT'
02147	U	Unknown	vkCreateImage	'If the sparse residency for images with 4 samples feature is not enabled, imageType is VK_IMAGE_TYPE_2D, and samples is VK_SAMPLE_COUNT_4_BIT, flags must not contain VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT'
02148	U	Unknown	vkCreateImage	'If the sparse residency for images with 8 samples feature is not enabled, imageType is VK_IMAGE_TYPE_2D, and samples is VK_SAMPLE_COUNT_8_BIT, flags must not contain VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT'
02149	U	Unknown	vkCreateImage	'If the sparse residency for images with 16 samples feature is not enabled, imageType is VK_IMAGE_TYPE_2D, and samples is VK_SAMPLE_COUNT_16_BIT, flags must not contain VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT'
02150	U	Unknown	vkCreateImage	'If tiling is VK_IMAGE_TILING_LINEAR, format must be a format that has at least one supported feature bit present in the value of VkFormatProperties::linearTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format'
02151	U	Unknown	vkCreateImage	'If tiling is VK_IMAGE_TILING_LINEAR, and VkFormatProperties::linearTilingFeatures (as returned by vkGetPhysicalDeviceFormatProperties with the same value of format) does not include VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT, usage must not contain VK_IMAGE_USAGE_SAMPLED_BIT'
02152	U	Unknown	vkCreateImage	'If tiling is VK_IMAGE_TILING_LINEAR, and VkFormatProperties::linearTilingFeatures (as returned by vkGetPhysicalDeviceFormatProperties with the same value of format) does not include VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT, usage must not contain VK_IMAGE_USAGE_STORAGE_BIT'
02153	U	Unknown	vkCreateImage	'If tiling is VK_IMAGE_TILING_LINEAR, and VkFormatProperties::linearTilingFeatures (as returned by vkGetPhysicalDeviceFormatProperties with the same value of format) does not include VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT, usage must not contain VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT'
02154	U	Unknown	vkCreateImage	'If tiling is VK_IMAGE_TILING_LINEAR, and VkFormatProperties::linearTilingFeatures (as returned by vkGetPhysicalDeviceFormatProperties with the same value of format) does not include VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT, usage must not contain VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT'
02155	U	Unknown	vkCreateImage	'If tiling is VK_IMAGE_TILING_OPTIMAL, format must be a format that has at least one supported feature bit present in the value of VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format'
02156	U	Unknown	vkCreateImage	'If tiling is VK_IMAGE_TILING_OPTIMAL, and VkFormatProperties::optimalTilingFeatures (as returned by vkGetPhysicalDeviceFormatProperties with the same value of format) does not include VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT, usage must not contain VK_IMAGE_USAGE_SAMPLED_BIT'
02157	U	Unknown	vkCreateImage	'If tiling is VK_IMAGE_TILING_OPTIMAL, and VkFormatProperties::optimalTilingFeatures (as returned by vkGetPhysicalDeviceFormatProperties with the same value of format) does not include VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT, usage must not contain VK_IMAGE_USAGE_STORAGE_BIT'
02158	U	Unknown	vkCreateImage	'If tiling is VK_IMAGE_TILING_OPTIMAL, and VkFormatProperties::optimalTilingFeatures (as returned by vkGetPhysicalDeviceFormatProperties with the same value of format) does not include VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT, usage must not contain VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT'
02159	U	Unknown	vkCreateImage	'If tiling is VK_IMAGE_TILING_OPTIMAL, and VkFormatProperties::optimalTilingFeatures (as returned by vkGetPhysicalDeviceFormatProperties with the same value of format) does not include VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT, usage must not contain VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT'
02160	Y	SparseBindingImageBufferCreate	vkCreateImage	'If flags contains VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT or VK_IMAGE_CREATE_SPARSE_ALIASED_BIT, it must also contain VK_IMAGE_CREATE_SPARSE_BINDING_BIT'
02161	N	Unknown	vkCreateImageView	'If image was created with VK_IMAGE_TILING_LINEAR and usage containing VK_IMAGE_USAGE_SAMPLED_BIT, format must be supported for sampled images, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT flag in VkFormatProperties::linearTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format'
02162	N	Unknown	vkCreateImageView	'If image was created with VK_IMAGE_TILING_LINEAR and usage containing VK_IMAGE_USAGE_STORAGE_BIT, format must be supported for storage images, as specified by the VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT flag in VkFormatProperties::linearTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format'
02163	N	Unknown	vkCreateImageView	'If image was created with VK_IMAGE_TILING_LINEAR and usage containing VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, format must be supported for color attachments, as specified by the VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT flag in VkFormatProperties::linearTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format'
02164	N	Unknown	vkCreateImageView	'If image was created with VK_IMAGE_TILING_LINEAR and usage containing VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, format must be supported for depth/stencil attachments, as specified by the VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT flag in VkFormatProperties::linearTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format'
02165	U	Unknown	vkCreateImageView	'If image was created with VK_IMAGE_TILING_OPTIMAL, format must be format that has at least one supported feature bit present in the value of VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format'
02166	U	Unknown	vkCreateImageView	'If image was created with VK_IMAGE_TILING_OPTIMAL and usage containing VK_IMAGE_USAGE_SAMPLED_BIT, format must be supported for sampled images, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT flag in VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format'
02167	U	Unknown	vkCreateImageView	'If image was created with VK_IMAGE_TILING_OPTIMAL and usage containing VK_IMAGE_USAGE_STORAGE_BIT, format must be supported for storage images, as specified by the VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT flag in VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format'
02168	U	Unknown	vkCreateImageView	'If image was created with VK_IMAGE_TILING_OPTIMAL and usage containing VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, format must be supported for color attachments, as specified by the VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT flag in VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format'
02169	U	Unknown	vkCreateImageView	'If image was created with VK_IMAGE_TILING_OPTIMAL and usage containing VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, format must be supported for depth/stencil attachments, as specified by the VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT flag in VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties with the same value of format'
02170	U	Unknown	vkCreateImageView	'subresourceRange must be a valid image subresource range for image (see Section 11.5, Image Views)'
02171	Y	ImageLayerViewTests	vkCreateImageView	'If image was created with the VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT flag, format must be compatible with the format used to create image, as defined in Format Compatibility Classes'
02172	Y	ImageLayerViewTests	vkCreateImageView	'If image was not created with the VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT flag, format must be identical to the format used to create image'
02173	U	Unknown	vkCreateImageView	'subResourceRange and viewType must be compatible with the image, as described in the compatibility table'
02174	U	Unknown	vkBindBufferMemory	'memoryOffset must be an integer multiple of the alignment member of the VkMemoryRequirements structure returned from a call to vkGetBufferMemoryRequirements with buffer'
02175	U	Unknown	vkBindBufferMemory	'The size member of the VkMemoryRequirements structure returned from a call to vkGetBufferMemoryRequirements with buffer must be less than or equal to the size of memory minus memoryOffset'
02176	U	Unknown	vkBindBufferMemory	'If buffer was created with VkDedicatedAllocationBufferCreateInfoNV::dedicatedAllocation equal to VK_TRUE, memory must have been created with VkDedicatedAllocationMemoryAllocateInfoNV::buffer equal to buffer and memoryOffset must be zero'
02177	U	Unknown	vkBindBufferMemory	'If buffer was not created with VkDedicatedAllocationBufferCreateInfoNV::dedicatedAllocation equal to VK_TRUE, memory must not have been allocated dedicated for a specific buffer or image'
02178	U	Unknown	vkBindImageMemory	'memoryOffset must be an integer multiple of the alignment member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements with image'
02179	U	Unknown	vkBindImageMemory	'The size member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements with image must be less than or equal to the size of memory minus memoryOffset'
02180	U	Unknown	vkBindImageMemory	'If image was created with VkDedicatedAllocationImageCreateInfoNV::dedicatedAllocation equal to VK_TRUE, memory must have been created with VkDedicatedAllocationMemoryAllocateInfoNV::image equal to image and memoryOffset must be zero'
02181	U	Unknown	vkBindImageMemory	'If image was not created with VkDedicatedAllocationImageCreateInfoNV::dedicatedAllocation equal to VK_TRUE, memory must not have been allocated dedicated for a specific buffer or image'
02182	Y	None	vkCmdBlitImage	'srcImage must have been created with VK_IMAGE_USAGE_TRANSFER_SRC_BIT usage flag'
02183	U	Unknown	vkCmdBlitImage	'srcImageLayout must specify the layout of the image subresources of srcImage specified in pRegions at the time this command is executed on a VkDevice'
02184	U	Unknown	vkCmdBlitImage	'srcImageLayout must be either of VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL'
02185	U	Unknown	vkCmdBlitImage	'dstImage must use a format that supports VK_FORMAT_FEATURE_BLIT_DST_BIT, which is indicated by VkFormatProperties::linearTilingFeatures (for linear tiled images) or VkFormatProperties::optimalTilingFeatures (for optimally tiled images) - as returned by vkGetPhysicalDeviceFormatProperties'
02186	Y	None	vkCmdBlitImage	'dstImage must have been created with VK_IMAGE_USAGE_TRANSFER_DST_BIT usage flag'
02187	U	Unknown	vkCmdBlitImage	'dstImageLayout must specify the layout of the image subresources of dstImage specified in pRegions at the time this command is executed on a VkDevice'
02188	U	Unknown	vkCmdBlitImage	'dstImageLayout must be either of VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL'
02189	U	Unknown	vkCmdBlitImage	'The sample count of srcImage and dstImage must both be equal to VK_SAMPLE_COUNT_1_BIT'
02190	U	Unknown	vkCmdBlitImage	'If either of srcImage or dstImage was created with a signed integer VkFormat, the other must also have been created with a signed integer VkFormat'
02191	U	Unknown	vkCmdBlitImage	'If either of srcImage or dstImage was created with an unsigned integer VkFormat, the other must also have been created with an unsigned integer VkFormat'
02192	U	Unknown	vkCmdBlitImage	'If either of srcImage or dstImage was created with a depth/stencil format, the other must have exactly the same format'
02193	U	Unknown	vkCmdBlitImage	'If srcImage was created with a depth/stencil format, filter must be VK_FILTER_NEAREST'
02194	U	Unknown	vkCmdBlitImage	'srcImage must have been created with a samples value of VK_SAMPLE_COUNT_1_BIT'
02195	U	Unknown	vkCmdBlitImage	'dstImage must have been created with a samples value of VK_SAMPLE_COUNT_1_BIT'
02196	U	Unknown	vkCmdBlitImage	'If filter is VK_FILTER_LINEAR, srcImage must be of a format which supports linear filtering, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT flag in VkFormatProperties::linearTilingFeatures (for a linear image) or VkFormatProperties::optimalTilingFeatures(for an optimally tiled image) returned by vkGetPhysicalDeviceFormatProperties'
02197	U	Unknown	vkCmdBlitImage	'If filter is VK_FILTER_CUBIC_IMG, srcImage must be of a format which supports cubic filtering, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG flag in VkFormatProperties::linearTilingFeatures (for a linear image) or VkFormatProperties::optimalTilingFeatures(for an optimally tiled image) returned by vkGetPhysicalDeviceFormatProperties'
02198	U	Unknown	vkCmdBlitImage	'If filter is VK_FILTER_CUBIC_IMG, srcImage must have a VkImageType of VK_IMAGE_TYPE_3D'
02199	U	Unknown	vkCmdResolveImage	'If dstImage was created with tiling equal to VK_IMAGE_TILING_OPTIMAL, dstImage must have been created with a format that supports being a color attachment, as specified by the VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT flag in VkFormatProperties::optimalTilingFeatures returned by vkGetPhysicalDeviceFormatProperties'
02200	U	Unknown	vkCmdDraw	'All vertex input bindings accessed via vertex input variables declared in the vertex shader entry points interface must have valid buffers bound'
02201	U	Unknown	vkCmdDraw	'For a given vertex buffer binding, any attribute data fetched must be entirely contained within the corresponding vertex buffer binding, as described in Section 20.2, Vertex Input Description'
02202	U	Unknown	vkCmdDraw	'A valid graphics pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_GRAPHICS'
02203	U	Unknown	vkCmdDraw	'If the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must have been set on the current command buffer'
02204	U	Unknown	vkCmdDraw	'Every input attachment used by the current subpass must be bound to the pipeline via a descriptor set'
02205	U	Unknown	vkCmdDraw	'If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage'
02206	U	Unknown	vkCmdDraw	'If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage'
02207	U	Unknown	vkCmdDraw	'If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage'
02208	U	Unknown	vkCmdDraw	'If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the currently bound descriptor set'
02209	U	Unknown	vkCmdDraw	'If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it must not access values outside of the range of that buffer specified in the currently bound descriptor set'
02210	U	Unknown	vkCmdDraw	'Any VkImageView being sampled with VK_FILTER_LINEAR as a result of this command must be of a format which supports linear filtering, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT flag in VkFormatProperties::linearTilingFeatures (for a linear image) or VkFormatProperties::optimalTilingFeatures(for an optimally tiled image) returned by vkGetPhysicalDeviceFormatProperties'
02211	U	Unknown	vkCmdDraw	'Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must be of a format which supports cubic filtering, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG flag in VkFormatProperties::linearTilingFeatures (for a linear image) or VkFormatProperties::optimalTilingFeatures(for an optimally tiled image) returned by vkGetPhysicalDeviceFormatProperties'
02212	U	Unknown	vkCmdDraw	'Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must not have a VkImageViewType of VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY'
02213	U	Unknown	vkCmdDrawIndexed	'All vertex input bindings accessed via vertex input variables declared in the vertex shader entry points interface must have valid buffers bound'
02214	U	Unknown	vkCmdDrawIndexed	'For a given vertex buffer binding, any attribute data fetched must be entirely contained within the corresponding vertex buffer binding, as described in Section 20.2, Vertex Input Description'
02215	U	Unknown	vkCmdDrawIndexed	'A valid graphics pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_GRAPHICS'
02216	U	Unknown	vkCmdDrawIndexed	'If the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must have been set on the current command buffer'
02217	U	Unknown	vkCmdDrawIndexed	'(indexSize * (firstIndex + indexCount) + offset) must be less than or equal to the size of the currently bound index buffer, with indexSize being based on the type specified by indexType, where the index buffer, indexType, and offset are specified via vkCmdBindIndexBuffer'
02218	U	Unknown	vkCmdDrawIndexed	'Every input attachment used by the current subpass must be bound to the pipeline via a descriptor set'
02219	U	Unknown	vkCmdDrawIndexed	'If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage'
02220	U	Unknown	vkCmdDrawIndexed	'If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage'
02221	U	Unknown	vkCmdDrawIndexed	'If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage'
02222	U	Unknown	vkCmdDrawIndexed	'If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the currently bound descriptor set'
02223	U	Unknown	vkCmdDrawIndexed	'If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it must not access values outside of the range of that buffer specified in the currently bound descriptor set'
02224	U	Unknown	vkCmdDrawIndexed	'Any VkImageView being sampled with VK_FILTER_LINEAR as a result of this command must be of a format which supports linear filtering, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT flag in VkFormatProperties::linearTilingFeatures (for a linear image) or VkFormatProperties::optimalTilingFeatures(for an optimally tiled image) returned by vkGetPhysicalDeviceFormatProperties'
02225	U	Unknown	vkCmdDrawIndexed	'Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must be of a format which supports cubic filtering, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG flag in VkFormatProperties::linearTilingFeatures (for a linear image) or VkFormatProperties::optimalTilingFeatures(for an optimally tiled image) returned by vkGetPhysicalDeviceFormatProperties'
02226	U	Unknown	vkCmdDrawIndexed	'Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must not have a VkImageViewType of VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY'
02227	U	Unknown	vkCmdDrawIndirect	'The current render pass must be compatible with the renderPass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS.'
02228	U	Unknown	vkCmdDrawIndirect	'The subpass index of the current render pass must be equal to the subpass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS.'
02229	U	Unknown	vkCmdDrawIndirect	'For each set n that is statically used by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in the section called Pipeline Layout Compatibility'
02230	U	Unknown	vkCmdDrawIndirect	'For each push constant that is statically used by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must have been set for VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for push constants, with the VkPipelineLayout used to create the current VkPipeline, as described in the section called Pipeline Layout Compatibility'
02231	U	Unknown	vkCmdDrawIndirect	'Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the currently bound VkPipeline object, specified via vkCmdBindPipeline'
02232	U	Unknown	vkCmdDrawIndirect	'All vertex input bindings accessed via vertex input variables declared in the vertex shader entry points interface must have valid buffers bound'
02233	U	Unknown	vkCmdDrawIndirect	'A valid graphics pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_GRAPHICS'
02234	U	Unknown	vkCmdDrawIndirect	'If the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must have been set on the current command buffer'
02235	U	Unknown	vkCmdDrawIndirect	'If drawCount is equal to 1, (offset + sizeof(VkDrawIndirectCommand)) must be less than or equal to the size of buffer'
02236	U	Unknown	vkCmdDrawIndirect	'If drawCount is greater than 1, (stride  (drawCount - 1) + offset + sizeof(VkDrawIndirectCommand)) must be less than or equal to the size of buffer'
02237	U	Unknown	vkCmdDrawIndirect	'drawCount must be less than or equal to VkPhysicalDeviceLimits::maxDrawIndirectCount'
02238	U	Unknown	vkCmdDrawIndirect	'Every input attachment used by the current subpass must be bound to the pipeline via a descriptor set'
02239	U	Unknown	vkCmdDrawIndirect	'If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage'
02240	U	Unknown	vkCmdDrawIndirect	'If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage'
02241	U	Unknown	vkCmdDrawIndirect	'If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage'
02242	U	Unknown	vkCmdDrawIndirect	'If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the currently bound descriptor set'
02243	U	Unknown	vkCmdDrawIndirect	'If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it must not access values outside of the range of that buffer specified in the currently bound descriptor set'
02244	U	Unknown	vkCmdDrawIndirect	'Any VkImageView being sampled with VK_FILTER_LINEAR as a result of this command must be of a format which supports linear filtering, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT flag in VkFormatProperties::linearTilingFeatures (for a linear image) or VkFormatProperties::optimalTilingFeatures(for an optimally tiled image) returned by vkGetPhysicalDeviceFormatProperties'
02245	U	Unknown	vkCmdDrawIndirect	'Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must be of a format which supports cubic filtering, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG flag in VkFormatProperties::linearTilingFeatures (for a linear image) or VkFormatProperties::optimalTilingFeatures(for an optimally tiled image) returned by vkGetPhysicalDeviceFormatProperties'
02246	U	Unknown	vkCmdDrawIndirect	'Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must not have a VkImageViewType of VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY'
02247	U	Unknown	vkCmdDrawIndirectCountAMD	'The current render pass must be compatible with the renderPass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS.'
02248	U	Unknown	vkCmdDrawIndirectCountAMD	'The subpass index of the current render pass must be equal to the subpass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS.'
02249	U	Unknown	vkCmdDrawIndirectCountAMD	'For each set n that is statically used by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in the section called Pipeline Layout Compatibility'
02250	U	Unknown	vkCmdDrawIndirectCountAMD	'For each push constant that is statically used by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must have been set for VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for push constants, with the VkPipelineLayout used to create the current VkPipeline, as described in the section called Pipeline Layout Compatibility'
02251	U	Unknown	vkCmdDrawIndirectCountAMD	'Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the currently bound VkPipeline object, specified via vkCmdBindPipeline'
02252	U	Unknown	vkCmdDrawIndirectCountAMD	'All vertex input bindings accessed via vertex input variables declared in the vertex shader entry points interface must have valid buffers bound'
02253	U	Unknown	vkCmdDrawIndirectCountAMD	'A valid graphics pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_GRAPHICS'
02254	U	Unknown	vkCmdDrawIndirectCountAMD	'If the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must have been set on the current command buffer'
02255	U	Unknown	vkCmdDrawIndirectCountAMD	'If the count stored in countBuffer is equal to 1, (offset + sizeof(VkDrawIndirectCommand)) must be less than or equal to the size of buffer'
02256	U	Unknown	vkCmdDrawIndirectCountAMD	'If the count stored in countBuffer is greater than 1, (stride  (drawCount - 1) + offset + sizeof(VkDrawIndirectCommand)) must be less than or equal to the size of buffer'
02257	U	Unknown	vkCmdDrawIndirectCountAMD	'The count stored in countBuffer must be less than or equal to VkPhysicalDeviceLimits::maxDrawIndirectCount'
02258	U	Unknown	vkCmdDrawIndirectCountAMD	'Every input attachment used by the current subpass must be bound to the pipeline via a descriptor set'
02259	U	Unknown	vkCmdDrawIndirectCountAMD	'If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage'
02260	U	Unknown	vkCmdDrawIndirectCountAMD	'If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage'
02261	U	Unknown	vkCmdDrawIndirectCountAMD	'If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage'
02262	U	Unknown	vkCmdDrawIndirectCountAMD	'If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the currently bound descriptor set'
02263	U	Unknown	vkCmdDrawIndirectCountAMD	'If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it must not access values outside of the range of that buffer specified in the currently bound descriptor set'
02264	U	Unknown	vkCmdDrawIndirectCountAMD	'Any VkImageView being sampled with VK_FILTER_LINEAR as a result of this command must be of a format which supports linear filtering, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT flag in VkFormatProperties::linearTilingFeatures (for a linear image) or VkFormatProperties::optimalTilingFeatures(for an optimally tiled image) returned by vkGetPhysicalDeviceFormatProperties'
02265	U	Unknown	vkCmdDrawIndexedIndirect	'The current render pass must be compatible with the renderPass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS.'
02266	U	Unknown	vkCmdDrawIndexedIndirect	'The subpass index of the current render pass must be equal to the subpass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS.'
02267	U	Unknown	vkCmdDrawIndexedIndirect	'For each set n that is statically used by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in the section called Pipeline Layout Compatibility'
02268	U	Unknown	vkCmdDrawIndexedIndirect	'For each push constant that is statically used by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must have been set for VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for push constants, with the VkPipelineLayout used to create the current VkPipeline, as described in the section called Pipeline Layout Compatibility'
02269	U	Unknown	vkCmdDrawIndexedIndirect	'Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the currently bound VkPipeline object, specified via vkCmdBindPipeline'
02270	U	Unknown	vkCmdDrawIndexedIndirect	'All vertex input bindings accessed via vertex input variables declared in the vertex shader entry points interface must have valid buffers bound'
02271	U	Unknown	vkCmdDrawIndexedIndirect	'A valid graphics pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_GRAPHICS'
02272	U	Unknown	vkCmdDrawIndexedIndirect	'If the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must have been set on the current command buffer'
02273	U	Unknown	vkCmdDrawIndexedIndirect	'If drawCount is equal to 1, (offset + sizeof(VkDrawIndexedIndirectCommand)) must be less than or equal to the size of buffer'
02274	U	Unknown	vkCmdDrawIndexedIndirect	'If drawCount is greater than 1, (stride  (drawCount - 1) + offset + sizeof(VkDrawIndexedIndirectCommand)) must be less than or equal to the size of buffer'
02275	U	Unknown	vkCmdDrawIndexedIndirect	'drawCount must be less than or equal to VkPhysicalDeviceLimits::maxDrawIndirectCount'
02276	U	Unknown	vkCmdDrawIndexedIndirect	'Every input attachment used by the current subpass must be bound to the pipeline via a descriptor set'
02277	U	Unknown	vkCmdDrawIndexedIndirect	'If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage'
02278	U	Unknown	vkCmdDrawIndexedIndirect	'If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage'
02279	U	Unknown	vkCmdDrawIndexedIndirect	'If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage'
02280	U	Unknown	vkCmdDrawIndexedIndirect	'If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the currently bound descriptor set'
02281	U	Unknown	vkCmdDrawIndexedIndirect	'If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it must not access values outside of the range of that buffer specified in the currently bound descriptor set'
02282	U	Unknown	vkCmdDrawIndexedIndirect	'Any VkImageView being sampled with VK_FILTER_LINEAR as a result of this command must be of a format which supports linear filtering, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT flag in VkFormatProperties::linearTilingFeatures (for a linear image) or VkFormatProperties::optimalTilingFeatures(for an optimally tiled image) returned by vkGetPhysicalDeviceFormatProperties'
02283	U	Unknown	vkCmdDrawIndexedIndirect	'Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must be of a format which supports cubic filtering, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG flag in VkFormatProperties::linearTilingFeatures (for a linear image) or VkFormatProperties::optimalTilingFeatures(for an optimally tiled image) returned by vkGetPhysicalDeviceFormatProperties'
02284	U	Unknown	vkCmdDrawIndexedIndirect	'Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must not have a VkImageViewType of VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY'
02285	U	Unknown	vkCmdDrawIndexedIndirect	'If the drawIndirectFirstInstance feature is not enabled, firstInstance must be 0'
02286	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'The current render pass must be compatible with the renderPass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS.'
02287	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'The subpass index of the current render pass must be equal to the subpass member of the VkGraphicsPipelineCreateInfo structure specified when creating the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS.'
02288	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'For each set n that is statically used by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a descriptor set must have been bound to n at VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for set n, with the VkPipelineLayout used to create the current VkPipeline, as described in the section called Pipeline Layout Compatibility'
02289	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'For each push constant that is statically used by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS, a push constant value must have been set for VK_PIPELINE_BIND_POINT_GRAPHICS, with a VkPipelineLayout that is compatible for push constants, with the VkPipelineLayout used to create the current VkPipeline, as described in the section called Pipeline Layout Compatibility'
02290	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'Descriptors in each bound descriptor set, specified via vkCmdBindDescriptorSets, must be valid if they are statically used by the currently bound VkPipeline object, specified via vkCmdBindPipeline'
02291	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'All vertex input bindings accessed via vertex input variables declared in the vertex shader entry points interface must have valid buffers bound'
02292	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'A valid graphics pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_GRAPHICS'
02293	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'If the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS requires any dynamic state, that state must have been set on the current command buffer'
02294	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'If count stored in countBuffer is equal to 1, (offset + sizeof(VkDrawIndexedIndirectCommand)) must be less than or equal to the size of buffer'
02295	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'If count stored in countBuffer is greater than 1, (stride  (drawCount - 1) + offset + sizeof(VkDrawIndexedIndirectCommand)) must be less than or equal to the size of buffer'
02296	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'drawCount must be less than or equal to VkPhysicalDeviceLimits::maxDrawIndirectCount'
02297	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'Every input attachment used by the current subpass must be bound to the pipeline via a descriptor set'
02298	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage'
02299	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage'
02300	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage'
02301	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the currently bound descriptor set'
02302	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_GRAPHICS accesses a storage buffer, it must not access values outside of the range of that buffer specified in the currently bound descriptor set'
02303	U	Unknown	vkCmdDrawIndexedIndirectCountAMD	'Any VkImageView being sampled with VK_FILTER_LINEAR as a result of this command must be of a format which supports linear filtering, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT flag in VkFormatProperties::linearTilingFeatures (for a linear image) or VkFormatProperties::optimalTilingFeatures(for an optimally tiled image) returned by vkGetPhysicalDeviceFormatProperties'
02304	U	Unknown	vkCmdDispatch	'A valid compute pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_COMPUTE'
02305	U	Unknown	vkCmdDispatch	'For each push constant that is statically used by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_COMPUTE, a push constant value must have been set for VK_PIPELINE_BIND_POINT_COMPUTE, with a VkPipelineLayout that is compatible for push constants with the one used to create the current VkPipeline, as described in the section called Pipeline Layout Compatibility'
02306	U	Unknown	vkCmdDispatch	'If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage'
02307	U	Unknown	vkCmdDispatch	'If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage'
02308	U	Unknown	vkCmdDispatch	'If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage'
02309	U	Unknown	vkCmdDispatch	'If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_COMPUTE accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the currently bound descriptor set'
02310	U	Unknown	vkCmdDispatch	'If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_COMPUTE accesses a storage buffer, it must not access values outside of the range of that buffer specified in the currently bound descriptor set'
02311	U	Unknown	vkCmdDispatch	'Any VkImageView being sampled with VK_FILTER_LINEAR as a result of this command must be of a format which supports linear filtering, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT flag in VkFormatProperties::linearTilingFeatures (for a linear image) or VkFormatProperties::optimalTilingFeatures(for an optimally tiled image) returned by vkGetPhysicalDeviceFormatProperties'
02312	U	Unknown	vkCmdDispatch	'Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must be of a format which supports cubic filtering, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG flag in VkFormatProperties::linearTilingFeatures (for a linear image) or VkFormatProperties::optimalTilingFeatures(for an optimally tiled image) returned by vkGetPhysicalDeviceFormatProperties'
02313	U	Unknown	vkCmdDispatch	'Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must not have a VkImageViewType of VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY'
02314	U	Unknown	vkCmdDispatchIndirect	'A valid compute pipeline must be bound to the current command buffer with VK_PIPELINE_BIND_POINT_COMPUTE'
02315	U	Unknown	vkCmdDispatchIndirect	'buffer must have been created with the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set'
02316	U	Unknown	vkCmdDispatchIndirect	'offset must be a multiple of 4'
02317	U	Unknown	vkCmdDispatchIndirect	'The sum of offset and the size of VkDispatchIndirectCommand must be less than or equal to the size of buffer'
02318	U	Unknown	vkCmdDispatchIndirect	'For each push constant that is statically used by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_COMPUTE, a push constant value must have been set for VK_PIPELINE_BIND_POINT_COMPUTE, with a VkPipelineLayout that is compatible for push constants with the one used to create the current VkPipeline, as described in the section called Pipeline Layout Compatibility'
02319	U	Unknown	vkCmdDispatchIndirect	'If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it must not be used to sample from any VkImage with a VkImageView of the type VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, VK_IMAGE_VIEW_TYPE_1D_ARRAY, VK_IMAGE_VIEW_TYPE_2D_ARRAY or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY, in any shader stage'
02320	U	Unknown	vkCmdDispatchIndirect	'If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions with ImplicitLod, Dref or Proj in their name, in any shader stage'
02321	U	Unknown	vkCmdDispatchIndirect	'If any VkSampler object that is accessed from a shader by the VkPipeline currently bound to VK_PIPELINE_BIND_POINT_COMPUTE uses unnormalized coordinates, it must not be used with any of the SPIR-V OpImageSample* or OpImageSparseSample* instructions that includes a LOD bias or any offset values, in any shader stage'
02322	U	Unknown	vkCmdDispatchIndirect	'If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_COMPUTE accesses a uniform buffer, it must not access values outside of the range of that buffer specified in the currently bound descriptor set'
02323	U	Unknown	vkCmdDispatchIndirect	'If the robust buffer access feature is not enabled, and any shader stage in the VkPipeline object currently bound to VK_PIPELINE_BIND_POINT_COMPUTE accesses a storage buffer, it must not access values outside of the range of that buffer specified in the currently bound descriptor set'
02324	U	Unknown	vkCmdDispatchIndirect	'Any VkImageView being sampled with VK_FILTER_LINEAR as a result of this command must be of a format which supports linear filtering, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT flag in VkFormatProperties::linearTilingFeatures (for a linear image) or VkFormatProperties::optimalTilingFeatures(for an optimally tiled image) returned by vkGetPhysicalDeviceFormatProperties'
02325	U	Unknown	vkCmdDispatchIndirect	'Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must be of a format which supports cubic filtering, as specified by the VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG flag in VkFormatProperties::linearTilingFeatures (for a linear image) or VkFormatProperties::optimalTilingFeatures(for an optimally tiled image) returned by vkGetPhysicalDeviceFormatProperties'
02326	U	Unknown	vkCmdDispatchIndirect	'Any VkImageView being sampled with VK_FILTER_CUBIC_IMG as a result of this command must not have a VkImageViewType of VK_IMAGE_VIEW_TYPE_3D, VK_IMAGE_VIEW_TYPE_CUBE, or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY'
02327	U	Unknown	vkCreateDisplayPlaneSurfaceKHR	'If the planeReorderPossible member of the VkDisplayPropertiesKHR structure returned by vkGetPhysicalDeviceDisplayPropertiesKHR for the display corresponding to displayMode is VK_TRUE then planeStackIndex must be less than the number of display planes supported by the device as determined by calling vkGetPhysicalDeviceDisplayPlanePropertiesKHR; otherwise planeStackIndex must equal the currentStackIndex member of VkDisplayPlanePropertiesKHR returned by vkGetPhysicalDeviceDisplayPlanePropertiesKHR for the display plane corresponding to displayMode'
02328	U	Unknown	vkCreateDisplayPlaneSurfaceKHR	'If alphaMode is VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR then globalAlpha must be between 0 and 1, inclusive'
02329	U	Unknown	vkCreateDisplayPlaneSurfaceKHR	'alphaMode must be 0 or one of the bits present in the supportedAlpha member of VkDisplayPlaneCapabilitiesKHR returned by vkGetDisplayPlaneCapabilitiesKHR for the display plane corresponding to displayMode'
02330	U	Unknown	vkCreateDisplayPlaneSurfaceKHR	'The width and height members of imageExtent must be less than the maxImageDimensions2D member of VkPhysicalDeviceLimits'
02331	Y	Unknown	vkCreateSwapchainKHR	'minImageCount must be greater than or equal to the value returned in the minImageCount member of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface'
02332	Y	Unknown	vkCreateSwapchainKHR	'minImageCount must be less than or equal to the value returned in the maxImageCount member of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface if the returned maxImageCount is not zero'
02333	Y	Unknown	vkCreateSwapchainKHR	'imageFormat and imageColorSpace must match the format and colorSpace members, respectively, of one of the VkSurfaceFormatKHR structures returned by vkGetPhysicalDeviceSurfaceFormatsKHR for the surface'
02334	Y	Unknown	vkCreateSwapchainKHR	'imageExtent must be between minImageExtent and maxImageExtent, inclusive, where minImageExtent and maxImageExtent are members of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface'
02335	Y	Unknown	vkCreateSwapchainKHR	'imageArrayLayers must be greater than 0 and less than or equal to the maxImageArrayLayers member of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface'
02336	Y	Unknown	vkCreateSwapchainKHR	'imageUsage must be a subset of the supported usage flags present in the supportedUsageFlags member of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface'
02337	U	Unknown	vkCreateSwapchainKHR	'If imageSharingMode is VK_SHARING_MODE_CONCURRENT, pQueueFamilyIndices must be a pointer to an array of queueFamilyIndexCount uint32_t values'
02338	U	Unknown	vkCreateSwapchainKHR	'If imageSharingMode is VK_SHARING_MODE_CONCURRENT, queueFamilyIndexCount must be greater than 1'
02339	Y	Unknown	vkCreateSwapchainKHR	'preTransform must be one of the bits present in the supportedTransforms member of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface'
02340	Y	Unknown	vkCreateSwapchainKHR	'compositeAlpha must be one of the bits present in the supportedCompositeAlpha member of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface'
02341	Y	Unknown	vkCreateSwapchainKHR	'presentMode must be one of the VkPresentModeKHR values returned by vkGetPhysicalDeviceSurfacePresentModesKHR for the surface'
02342	U	Unknown	vkQueuePresentKHR	'If more than one member of pSwapchains was created from a display surface, all display surfaces referenced that refer to the same display must use the same display mode'
02343	U	Unknown	vkCmdDebugMarkerEndEXT	'If the matching vkCmdDebugMarkerBeginEXT command was in a secondary command buffer, the vkCmdDebugMarkerEndEXT must be in the same commandBuffer'
02344	U	Unknown	vkCreateImage	'If imageType is VK_IMAGE_TYPE_3D, arrayLayers must be 1.'
02345	Y	DuplicateDescriptorBinding	vkCreateDescriptorSetLayout	'The VkDescriptorSetLayoutBinding::binding members of the elements of the pBindings array must each have different values.'
02346	U	Unknown	vkAllocateMemory	'handleType must not have more than one bit set.'
02347	U	Unknown	vkAllocateMemory	'handle must be a valid handle to memory, obtained as specified by handleType.'
02348	Y	DSUpdateEmptyBinding	vkUpdateDescriptorSets	'dstBinding must be a binding with a non-zero descriptorCount'
02349	U	Unknown	vkQueueSubmit	'Any calls to vkCmdSetEvent, vkCmdResetEvent or vkCmdWaitEvents that have been recorded into any of the command buffer elements of the pCommandBuffers member of any element of pSubmits, must not reference any VkEvent that is referenced by any of those commands that is pending execution on another queue.'
02350	U	Unknown	vkCmdWaitEvents	'srcStageMask must be the bitwise OR of the stageMask parameter used in previous calls to vkCmdSetEvent with any of the members of pEvents and VK_PIPELINE_STAGE_HOST_BIT if any of the members of pEvents was set using vkSetEvent'
02351	U	Unknown	vkCreateRenderPass	'For any member of pAttachments with a loadOp equal to VK_ATTACHMENT_LOAD_OP_CLEAR, the first use of that attachment must not specify a layout equal to VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL or VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL.'
02352	U	Unknown	vkCreateImage	'If imageType is VK_IMAGE_TYPE_1D, flags must not contain VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT'
02353	U	Unknown	vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX	'physicalDevice must be a valid VkPhysicalDevice handle'
02354	U	Unknown	vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX	'pFeatures must be a pointer to a VkDeviceGeneratedCommandsFeaturesNVX structure'
02355	U	Unknown	vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX	'pLimits must be a pointer to a VkDeviceGeneratedCommandsLimitsNVX structure'
02356	U	Unknown	vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX	'sType must be VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_FEATURES_NVX'
02357	U	Unknown	vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX	'pNext must be NULL'
02358	U	Unknown	vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX	'sType must be VK_STRUCTURE_TYPE_DEVICE_GENERATED_COMMANDS_LIMITS_NVX'
02359	U	Unknown	vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX	'pNext must be NULL'
02360	U	Unknown	vkCreateObjectTableNVX	'device must be a valid VkDevice handle'
02361	U	Unknown	vkCreateObjectTableNVX	'pCreateInfo must be a pointer to a valid VkObjectTableCreateInfoNVX structure'
02362	U	Unknown	vkCreateObjectTableNVX	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
02363	U	Unknown	vkCreateObjectTableNVX	'pObjectTable must be a pointer to a VkObjectTableNVX handle'
02364	U	Unknown	vkCreateObjectTableNVX	'objectCount must be greater than 0'
02365	U	Unknown	vkCreateObjectTableNVX	'If the VkDeviceGeneratedCommandsFeaturesNVX::computeBindingPointSupport feature is not enabled, pObjectEntryUsageFlags must not contain VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX'
02366	U	Unknown	vkCreateObjectTableNVX	'Any value within pObjectEntryCounts must not exceed VkDeviceGeneratedCommandsLimitsNVX::maxObjectEntryCounts'
02367	U	Unknown	vkCreateObjectTableNVX	'maxUniformBuffersPerDescriptor must be within the limits supported by the device.'
02368	U	Unknown	vkCreateObjectTableNVX	'maxStorageBuffersPerDescriptor must be within the limits supported by the device.'
02369	U	Unknown	vkCreateObjectTableNVX	'maxStorageImagesPerDescriptor must be within the limits supported by the device.'
02370	U	Unknown	vkCreateObjectTableNVX	'maxSampledImagesPerDescriptor must be within the limits supported by the device.'
02371	U	Unknown	vkCreateObjectTableNVX	'sType must be VK_STRUCTURE_TYPE_OBJECT_TABLE_CREATE_INFO_NVX'
02372	U	Unknown	vkCreateObjectTableNVX	'pNext must be NULL'
02373	U	Unknown	vkCreateObjectTableNVX	'pObjectEntryTypes must be a pointer to an array of objectCount valid VkObjectEntryTypeNVX values'
02374	U	Unknown	vkCreateObjectTableNVX	'pObjectEntryCounts must be a pointer to an array of objectCount uint32_t values'
02375	U	Unknown	vkCreateObjectTableNVX	'pObjectEntryUsageFlags must be a pointer to an array of objectCount valid combinations of VkObjectEntryUsageFlagBitsNVX values'
02376	U	Unknown	vkCreateObjectTableNVX	'Each element of pObjectEntryUsageFlags must not be 0'
02377	U	Unknown	vkDestroyObjectTableNVX	'All submitted commands that refer to objectTable must have completed execution.'
02378	U	Unknown	vkDestroyObjectTableNVX	'If VkAllocationCallbacks were provided when objectTable was created, a compatible set of callbacks must be provided here.'
02379	U	Unknown	vkDestroyObjectTableNVX	'If no VkAllocationCallbacks were provided when objectTable was created, pAllocator must be NULL.'
02380	U	Unknown	vkDestroyObjectTableNVX	'device must be a valid VkDevice handle'
02381	U	Unknown	vkDestroyObjectTableNVX	'objectTable must be a valid VkObjectTableNVX handle'
02382	U	Unknown	vkDestroyObjectTableNVX	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
02383	U	Unknown	vkDestroyObjectTableNVX	'objectTable must have been created, allocated, or retrieved from device'
02384	U	Unknown	vkRegisterObjectsNVX	'The contents of pObjectTableEntry must yield plausible bindings supported by the device.'
02385	U	Unknown	vkRegisterObjectsNVX	'At any pObjectIndices there must not be a registered resource already.'
02386	U	Unknown	vkRegisterObjectsNVX	'Any value inside pObjectIndices must be below the appropriate VkObjectTableCreateInfoNVX::pObjectEntryCounts limits provided at objectTable creation time.'
02387	U	Unknown	vkRegisterObjectsNVX	'device must be a valid VkDevice handle'
02388	U	Unknown	vkRegisterObjectsNVX	'objectTable must be a valid VkObjectTableNVX handle'
02389	U	Unknown	vkRegisterObjectsNVX	'ppObjectTableEntries must be a pointer to an array of objectCount valid VkObjectTableEntryNVX structures'
02390	U	Unknown	vkRegisterObjectsNVX	'pObjectIndices must be a pointer to an array of objectCount uint32_t values'
02391	U	Unknown	vkRegisterObjectsNVX	'objectCount must be greater than 0'
02392	U	Unknown	vkRegisterObjectsNVX	'objectTable must have been created, allocated, or retrieved from device'
02393	U	Unknown	vkRegisterObjectsNVX	'If the VkDeviceGeneratedCommandsFeaturesNVX::computeBindingPointSupport feature is not enabled, flags must not contain VK_OBJECT_ENTRY_USAGE_COMPUTE_BIT_NVX'
02394	U	Unknown	vkRegisterObjectsNVX	'type must be a valid VkObjectEntryTypeNVX value'
02395	U	Unknown	vkRegisterObjectsNVX	'flags must be a valid combination of VkObjectEntryUsageFlagBitsNVX values'
02396	U	Unknown	vkRegisterObjectsNVX	'flags must not be 0'
02397	U	Unknown	vkRegisterObjectsNVX	'type must be VK_OBJECT_ENTRY_PIPELINE_NVX'
02398	U	Unknown	vkRegisterObjectsNVX	'type must be a valid VkObjectEntryTypeNVX value'
02399	U	Unknown	vkRegisterObjectsNVX	'flags must be a valid combination of VkObjectEntryUsageFlagBitsNVX values'
02400	U	Unknown	vkRegisterObjectsNVX	'flags must not be 0'
02401	U	Unknown	vkRegisterObjectsNVX	'pipeline must be a valid VkPipeline handle'
02402	U	Unknown	vkRegisterObjectsNVX	'type must be VK_OBJECT_ENTRY_DESCRIPTOR_SET_NVX'
02403	U	Unknown	vkRegisterObjectsNVX	'type must be a valid VkObjectEntryTypeNVX value'
02404	U	Unknown	vkRegisterObjectsNVX	'flags must be a valid combination of VkObjectEntryUsageFlagBitsNVX values'
02405	U	Unknown	vkRegisterObjectsNVX	'flags must not be 0'
02406	U	Unknown	vkRegisterObjectsNVX	'pipelineLayout must be a valid VkPipelineLayout handle'
02407	U	Unknown	vkRegisterObjectsNVX	'descriptorSet must be a valid VkDescriptorSet handle'
02408	U	Unknown	vkRegisterObjectsNVX	'Both of descriptorSet, and pipelineLayout must have been created, allocated, or retrieved from the same VkDevice'
02409	U	Unknown	vkRegisterObjectsNVX	'type must be VK_OBJECT_ENTRY_VERTEX_BUFFER_NVX'
02410	U	Unknown	vkRegisterObjectsNVX	'type must be a valid VkObjectEntryTypeNVX value'
02411	U	Unknown	vkRegisterObjectsNVX	'flags must be a valid combination of VkObjectEntryUsageFlagBitsNVX values'
02412	U	Unknown	vkRegisterObjectsNVX	'flags must not be 0'
02413	U	Unknown	vkRegisterObjectsNVX	'buffer must be a valid VkBuffer handle'
02414	U	Unknown	vkRegisterObjectsNVX	'type must be VK_OBJECT_ENTRY_INDEX_BUFFER_NVX'
02415	U	Unknown	vkRegisterObjectsNVX	'type must be a valid VkObjectEntryTypeNVX value'
02416	U	Unknown	vkRegisterObjectsNVX	'flags must be a valid combination of VkObjectEntryUsageFlagBitsNVX values'
02417	U	Unknown	vkRegisterObjectsNVX	'flags must not be 0'
02418	U	Unknown	vkRegisterObjectsNVX	'buffer must be a valid VkBuffer handle'
02419	U	Unknown	vkRegisterObjectsNVX	'type must be VK_OBJECT_ENTRY_PUSH_CONSTANT_NVX'
02420	U	Unknown	vkRegisterObjectsNVX	'type must be a valid VkObjectEntryTypeNVX value'
02421	U	Unknown	vkRegisterObjectsNVX	'flags must be a valid combination of VkObjectEntryUsageFlagBitsNVX values'
02422	U	Unknown	vkRegisterObjectsNVX	'flags must not be 0'
02423	U	Unknown	vkRegisterObjectsNVX	'pipelineLayout must be a valid VkPipelineLayout handle'
02424	U	Unknown	vkRegisterObjectsNVX	'stageFlags must be a valid combination of VkShaderStageFlagBits values'
02425	U	Unknown	vkRegisterObjectsNVX	'stageFlags must not be 0'
02426	U	Unknown	vkUnregisterObjectsNVX	'At any pObjectIndices there must be a registered resource already.'
02427	U	Unknown	vkUnregisterObjectsNVX	'The pObjectEntryTypes of the resource at pObjectIndices must match.'
02428	U	Unknown	vkUnregisterObjectsNVX	'All operations on the device using the registered resource must have been completed.'
02429	U	Unknown	vkUnregisterObjectsNVX	'device must be a valid VkDevice handle'
02430	U	Unknown	vkUnregisterObjectsNVX	'objectTable must be a valid VkObjectTableNVX handle'
02431	U	Unknown	vkUnregisterObjectsNVX	'pObjectEntryTypes must be a pointer to an array of objectCount valid VkObjectEntryTypeNVX values'
02432	U	Unknown	vkUnregisterObjectsNVX	'pObjectIndices must be a pointer to an array of objectCount uint32_t values'
02433	U	Unknown	vkUnregisterObjectsNVX	'objectCount must be greater than 0'
02434	U	Unknown	vkUnregisterObjectsNVX	'objectTable must have been created, allocated, or retrieved from device'
02435	U	Unknown	vkUnregisterObjectsNVX	'bindingUnit must stay within device supported limits for the appropriate commands.'
02436	U	Unknown	vkUnregisterObjectsNVX	'dynamicCount must stay within device supported limits for the appropriate commands.'
02437	U	Unknown	vkUnregisterObjectsNVX	'divisor must greater 0 and power of two.'
02438	U	Unknown	vkUnregisterObjectsNVX	'tokenType must be a valid VkIndirectCommandsTokenTypeNVX value'
02439	U	Unknown	vkUnregisterObjectsNVX	'The buffers usage flag must have the VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set.'
02440	U	Unknown	vkUnregisterObjectsNVX	'The offset must be aligned to VkDeviceGeneratedCommandsLimitsNVX::minCommandsTokenBufferOffsetAlignment.'
02441	U	Unknown	vkUnregisterObjectsNVX	'tokenType must be a valid VkIndirectCommandsTokenTypeNVX value'
02442	U	Unknown	vkUnregisterObjectsNVX	'buffer must be a valid VkBuffer handle'
02443	U	Unknown	vkCreateIndirectCommandsLayoutNVX	'device must be a valid VkDevice handle'
02444	U	Unknown	vkCreateIndirectCommandsLayoutNVX	'pCreateInfo must be a pointer to a valid VkIndirectCommandsLayoutCreateInfoNVX structure'
02445	U	Unknown	vkCreateIndirectCommandsLayoutNVX	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
02446	U	Unknown	vkCreateIndirectCommandsLayoutNVX	'pIndirectCommandsLayout must be a pointer to a VkIndirectCommandsLayoutNVX handle'
02447	U	Unknown	vkCreateIndirectCommandsLayoutNVX	'tokenCount must be greater than 0 and below VkDeviceGeneratedCommandsLimitsNVX::maxIndirectCommandsLayoutTokenCount'
02448	U	Unknown	vkCreateIndirectCommandsLayoutNVX	'If the VkDeviceGeneratedCommandsFeaturesNVX::computeBindingPointSupport feature is not enabled, then pipelineBindPoint must not be VK_PIPELINE_BIND_POINT_COMPUTE'
02449	U	Unknown	vkCreateIndirectCommandsLayoutNVX	'If pTokens contains an entry of VK_INDIRECT_COMMANDS_TOKEN_PIPELINE_NVX it must be the first element of the array and there must be only a single element of such token type.'
02450	U	Unknown	vkCreateIndirectCommandsLayoutNVX	'All state binding tokens in pTokens must occur prior work provoking tokens (VK_INDIRECT_COMMANDS_TOKEN_DRAW_NVX, VK_INDIRECT_COMMANDS_TOKEN_DRAW_INDEXED_NVX, VK_INDIRECT_COMMANDS_TOKEN_DISPATCH_NVX).'
02451	U	Unknown	vkCreateIndirectCommandsLayoutNVX	'The content of pTokens must include at least one work provoking token.'
02452	U	Unknown	vkCreateIndirectCommandsLayoutNVX	'sType must be VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NVX'
02453	U	Unknown	vkCreateIndirectCommandsLayoutNVX	'pNext must be NULL'
02454	U	Unknown	vkCreateIndirectCommandsLayoutNVX	'pipelineBindPoint must be a valid VkPipelineBindPoint value'
02455	U	Unknown	vkCreateIndirectCommandsLayoutNVX	'flags must be a valid combination of VkIndirectCommandsLayoutUsageFlagBitsNVX values'
02456	U	Unknown	vkCreateIndirectCommandsLayoutNVX	'flags must not be 0'
02457	U	Unknown	vkCreateIndirectCommandsLayoutNVX	'pTokens must be a pointer to an array of tokenCount valid VkIndirectCommandsLayoutTokenNVX structures'
02458	U	Unknown	vkCreateIndirectCommandsLayoutNVX	'tokenCount must be greater than 0'
02459	U	Unknown	vkDestroyIndirectCommandsLayoutNVX	'All submitted commands that refer to indirectCommandsLayout must have completed execution'
02460	U	Unknown	vkDestroyIndirectCommandsLayoutNVX	'If VkAllocationCallbacks were provided when objectTable was created, a compatible set of callbacks must be provided here'
02461	U	Unknown	vkDestroyIndirectCommandsLayoutNVX	'If no VkAllocationCallbacks were provided when objectTable was created, pAllocator must be NULL'
02462	U	Unknown	vkDestroyIndirectCommandsLayoutNVX	'device must be a valid VkDevice handle'
02463	U	Unknown	vkDestroyIndirectCommandsLayoutNVX	'indirectCommandsLayout must be a valid VkIndirectCommandsLayoutNVX handle'
02464	U	Unknown	vkDestroyIndirectCommandsLayoutNVX	'If pAllocator is not NULL, pAllocator must be a pointer to a valid VkAllocationCallbacks structure'
02465	U	Unknown	vkDestroyIndirectCommandsLayoutNVX	'indirectCommandsLayout must have been created, allocated, or retrieved from device'
02466	U	Unknown	vkCmdReserveSpaceForCommandsNVX	'The provided commandBuffer must not have had a prior space reservation since its creation or the last reset.'
02467	U	Unknown	vkCmdReserveSpaceForCommandsNVX	'The state of the commandBuffer must be legal to execute all commands within the sequence provided by the indirectCommandsLayout member of pProcessCommandsInfo.'
02468	U	Unknown	vkCmdReserveSpaceForCommandsNVX	'commandBuffer must be a valid VkCommandBuffer handle'
02469	U	Unknown	vkCmdReserveSpaceForCommandsNVX	'pReserveSpaceInfo must be a pointer to a valid VkCmdReserveSpaceForCommandsInfoNVX structure'
02470	U	Unknown	vkCmdReserveSpaceForCommandsNVX	'commandBuffer must be in the recording state'
02471	U	Unknown	vkCmdReserveSpaceForCommandsNVX	'The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations'
02472	U	Unknown	vkCmdReserveSpaceForCommandsNVX	'This command must only be called inside of a render pass instance'
02473	U	Unknown	vkCmdReserveSpaceForCommandsNVX	'commandBuffer must be a secondary VkCommandBuffer'
02474	U	Unknown	vkCmdReserveSpaceForCommandsNVX	'sType must be VK_STRUCTURE_TYPE_CMD_RESERVE_SPACE_FOR_COMMANDS_INFO_NVX'
02475	U	Unknown	vkCmdReserveSpaceForCommandsNVX	'pNext must be NULL'
02476	U	Unknown	vkCmdReserveSpaceForCommandsNVX	'objectTable must be a valid VkObjectTableNVX handle'
02477	U	Unknown	vkCmdReserveSpaceForCommandsNVX	'indirectCommandsLayout must be a valid VkIndirectCommandsLayoutNVX handle'
02478	U	Unknown	vkCmdReserveSpaceForCommandsNVX	'Both of indirectCommandsLayout, and objectTable must have been created, allocated, or retrieved from the same VkDevice'
02479	U	Unknown	vkCmdProcessCommandsNVX	'commandBuffer must be a valid VkCommandBuffer handle'
02480	U	Unknown	vkCmdProcessCommandsNVX	'pProcessCommandsInfo must be a pointer to a valid VkCmdProcessCommandsInfoNVX structure'
02481	U	Unknown	vkCmdProcessCommandsNVX	'commandBuffer must be in the recording state'
02482	U	Unknown	vkCmdProcessCommandsNVX	'The VkCommandPool that commandBuffer was allocated from must support graphics, or compute operations'
02483	U	Unknown	vkCmdProcessCommandsNVX	'This command must only be called inside of a render pass instance'
02484	U	Unknown	vkCmdProcessCommandsNVX	'The provided objectTable must include all objects referenced by the generation process.'
02485	U	Unknown	vkCmdProcessCommandsNVX	'indirectCommandsTokenCount must match the indirectCommandsLayouts tokenCount.'
02486	U	Unknown	vkCmdProcessCommandsNVX	'The tokenType member of each entry in the pIndirectCommandsTokens array must match the values used at creation time of indirectCommandsLayout'
02487	U	Unknown	vkCmdProcessCommandsNVX	'If targetCommandBuffer is provided, it must have reserved command space.'
02488	U	Unknown	vkCmdProcessCommandsNVX	'If targetCommandBuffer is provided, the objectTable must match the reservations objectTable and must have had all referenced objects registered at reservation time.'
02489	U	Unknown	vkCmdProcessCommandsNVX	'If targetCommandBuffer is provided, the indirectCommandsLayout must match the reservations indirectCommandsLayout.'
02490	U	Unknown	vkCmdProcessCommandsNVX	'If targetCommandBuffer is provided, the maxSequencesCount must not exceed the reservations maxSequencesCount.'
02491	U	Unknown	vkCmdProcessCommandsNVX	'If sequencesCountBuffer is used, its usage flag must have VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set.'
02492	U	Unknown	vkCmdProcessCommandsNVX	'If sequencesCountBuffer is used, sequencesCountOffset must be aligned to VkDeviceGeneratedCommandsLimitsNVX::minSequenceCountBufferOffsetAlignment.'
02493	U	Unknown	vkCmdProcessCommandsNVX	'If sequencesIndexBuffer is used, its usage flag must have VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT bit set.'
02494	U	Unknown	vkCmdProcessCommandsNVX	'If sequencesIndexBuffer is used, sequencesIndexOffset must be aligned to VkDeviceGeneratedCommandsLimitsNVX::minSequenceIndexBufferOffsetAlignment.'
02495	U	Unknown	vkCmdProcessCommandsNVX	'sType must be VK_STRUCTURE_TYPE_CMD_PROCESS_COMMANDS_INFO_NVX'
02496	U	Unknown	vkCmdProcessCommandsNVX	'pNext must be NULL'
02497	U	Unknown	vkCmdProcessCommandsNVX	'objectTable must be a valid VkObjectTableNVX handle'
02498	U	Unknown	vkCmdProcessCommandsNVX	'indirectCommandsLayout must be a valid VkIndirectCommandsLayoutNVX handle'
02499	U	Unknown	vkCmdProcessCommandsNVX	'pIndirectCommandsTokens must be a pointer to an array of indirectCommandsTokenCount valid VkIndirectCommandsTokenNVX structures'
02500	U	Unknown	vkCmdProcessCommandsNVX	'If targetCommandBuffer is not NULL, targetCommandBuffer must be a valid VkCommandBuffer handle'
02501	U	Unknown	vkCmdProcessCommandsNVX	'If sequencesCountBuffer is not VK_NULL_HANDLE, sequencesCountBuffer must be a valid VkBuffer handle'
02502	U	Unknown	vkCmdProcessCommandsNVX	'If sequencesIndexBuffer is not VK_NULL_HANDLE, sequencesIndexBuffer must be a valid VkBuffer handle'
02503	U	Unknown	vkCmdProcessCommandsNVX	'Each of indirectCommandsLayout, objectTable, sequencesCountBuffer, sequencesIndexBuffer, and targetCommandBuffer that are valid handles must have been created, allocated, or retrieved from the same VkDevice'
02504	U	Unknown	vkCreateWin32SurfaceKHR	'hinstance must be a valid Win32 HINSTANCE.'
02505	U	Unknown	vkCreateWin32SurfaceKHR	'hwnd must be a valid Win32 HWND.'
02506	U	Unknown	vkCreateXcbSurfaceKHR	'window must be a valid X11 xcb_window_t.'
02507	U	Unknown	vkCreateXlibSurfaceKHR	'window must be a valid Xlib Window.'
02508	U	Unknown	vkEnumerateDeviceExtensionProperties	'If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a pointer to an array of pPropertyCount VkExtensionProperties structures'
02509	U	Unknown	vkQueueSubmit	'Any stage flag included in any element of the pWaitDstStageMask member of any element of pSubmits must be a pipeline stage supported by one of the capabilities of queue, as specified in the table of supported pipeline stages.'
02510	Y	InvalidBarriers	vkCmdWaitEvents	'Any pipeline stage included in srcStageMask or dstStageMask must be supported by the capabilities of the queue family specified by the queueFamilyIndex member of the VkCommandPoolCreateInfo structure that was used to create the VkCommandPool that commandBuffer was allocated from, as specified in the table of supported pipeline stages.'
02511	U	Unknown	vkCmdWaitEvents	'Any given element of pMemoryBarriers, pBufferMemoryBarriers or pImageMemoryBarriers must not have any access flag included in its srcAccessMask member if that bit is not supported by any of the pipeline stages in srcStageMask, as specified in the table of supported access types.'
02512	U	Unknown	vkCmdWaitEvents	'Any given element of pMemoryBarriers, pBufferMemoryBarriers or pImageMemoryBarriers must not have any access flag included in its dstAccessMask member if that bit is not supported by any of the pipeline stages in dstStageMask, as specified in the table of supported access types.'
02513	Y	InvalidBarriers	vkCmdPipelineBarrier	'Any pipeline stage included in srcStageMask or dstStageMask must be supported by the capabilities of the queue family specified by the queueFamilyIndex member of the VkCommandPoolCreateInfo structure that was used to create the VkCommandPool that commandBuffer was allocated from, as specified in the table of supported pipeline stages.'
02514	U	Unknown	vkCmdPipelineBarrier	'Any given element of pMemoryBarriers, pBufferMemoryBarriers or pImageMemoryBarriers must not have any access flag included in its srcAccessMask member if that bit is not supported by any of the pipeline stages in srcStageMask, as specified in the table of supported access types.'
02515	U	Unknown	vkCmdPipelineBarrier	'Any given element of pMemoryBarriers, pBufferMemoryBarriers or pImageMemoryBarriers must not have any access flag included in its dstAccessMask member if that bit is not supported by any of the pipeline stages in dstStageMask, as specified in the table of supported access types.'
02516	U	Unknown	vkCreateRenderPass	'For any element of pDependencies, if the srcSubpass is not VK_SUBPASS_EXTERNAL, all stage flags included in the srcStageMask member of that dependency must be a pipeline stage supported by the pipeline identified by the pipelineBindPoint member of the source subpass.'
02517	U	Unknown	vkCreateRenderPass	'For any element of pDependencies, if the dstSubpass is not VK_SUBPASS_EXTERNAL, all stage flags included in the dstStageMask member of that dependency must be a pipeline stage supported by the pipeline identified by the pipelineBindPoint member of the source subpass.'
02518	U	Unknown	vkCreateRenderPass	'Any access flag included in srcAccessMask must be supported by one of the pipeline stages in srcStageMask, as specified in the table of supported access types.'
02519	U	Unknown	vkCreateRenderPass	'Any access flag included in dstAccessMask must be supported by one of the pipeline stages in dstStageMask, as specified in the table of supported access types.'
02520	U	Unknown	vkCmdBeginRenderPass	'The srcStageMask and dstStageMask members of any element of the pDependencies member of VkRenderPassCreateInfo used to create renderpass must be supported by the capabilities of the queue family identified by the queueFamilyIndex member of the VkCommandPoolCreateInfo used to create the command pool which commandBuffer was allocated from.'
02521	U	Unknown	vkCreatePipelineLayout	'offset must be a multiple of 4'
02522	U	Unknown	vkCreateBufferView	'If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object'
02523	U	Unknown	vkCreateImage	'The combination of format, type, tiling, usage, and flags must be supported, as indicated by a VK_SUCCESS return value from vkGetPhysicalDeviceImageFormatProperties invoked with the same values passed to the corresponding parameters.'
02524	U	Unknown	vkCreateImageView	'If image is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object'
02525	U	Unknown	vkUpdateDescriptorSets	'If descriptorType is VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, the buffer member of any given element of pBufferInfo that is non-sparse must be bound completely and contiguously to a single VkDeviceMemory object'
02526	U	Unknown	vkCmdCopyQueryPoolResults	'If dstBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object'
02527	U	Unknown	vkCmdClearColorImage	'If image is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object'
02528	U	Unknown	vkCmdClearDepthStencilImage	'If image is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object'
02529	U	Unknown	vkCmdFillBuffer	'If dstBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object'
02530	U	Unknown	vkCmdUpdateBuffer	'If dstBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object'
02531	U	Unknown	vkCmdCopyBuffer	'If srcBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object'
02532	U	Unknown	vkCmdCopyBuffer	'If dstBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object'
02533	U	Unknown	vkCmdCopyImage	'If srcImage is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object'
02534	U	Unknown	vkCmdCopyImage	'If dstImage is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object'
02535	U	Unknown	vkCmdCopyBufferToImage	'If srcBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object'
02536	U	Unknown	vkCmdCopyBufferToImage	'If dstImage is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object'
02537	U	Unknown	vkCmdCopyImageToBuffer	'If srcImage is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object'
02538	U	Unknown	vkCmdCopyImageToBuffer	'If dstBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object'
02539	U	Unknown	vkCmdBlitImage	'If srcImage is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object'
02540	U	Unknown	vkCmdBlitImage	'If dstImage is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object'
02541	U	Unknown	vkCmdResolveImage	'If srcImage is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object'
02542	U	Unknown	vkCmdResolveImage	'If dstImage is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object'
02543	U	Unknown	vkCmdBindIndexBuffer	'If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object'
02544	U	Unknown	vkCmdDrawIndirect	'If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object'
02545	U	Unknown	vkCmdDrawIndexedIndirect	'If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object'
02546	U	Unknown	vkCmdBindVertexBuffers	'Each element of pBuffers that is non-sparse must be bound completely and contiguously to a single VkDeviceMemory object'
02547	U	Unknown	vkCmdDispatchIndirect	'If buffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object'
02548	U	Unknown	vkCmdProcessCommandsNVX	'indirectCommandsTokenCount must be greater than 0'

